package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*KerberosRequest kerberos request

swagger:model KerberosRequest
*/
type KerberosRequest struct {

	/* kerberos admin user

	Max Length: 15
	Min Length: 5
	*/
	Admin string `json:"admin,omitempty"`

	/* container dn
	 */
	ContainerDn *string `json:"containerDn,omitempty"`

	/* ldap url
	 */
	LdapURL *string `json:"ldapUrl,omitempty"`

	/* kerberos master key

	Max Length: 50
	Min Length: 3
	*/
	MasterKey string `json:"masterKey,omitempty"`

	/* kerberos admin password

	Max Length: 50
	Min Length: 5
	*/
	Password string `json:"password,omitempty"`

	/* principal
	 */
	Principal *string `json:"principal,omitempty"`

	/* realm
	 */
	Realm *string `json:"realm,omitempty"`

	/* tcp allowed
	 */
	TCPAllowed *bool `json:"tcpAllowed,omitempty"`

	/* url
	 */
	URL *string `json:"url,omitempty"`
}

// Validate validates this kerberos request
func (m *KerberosRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMasterKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRequest) validateAdmin(formats strfmt.Registry) error {

	if swag.IsZero(m.Admin) { // not required
		return nil
	}

	if err := validate.MinLength("admin", "body", string(m.Admin), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("admin", "body", string(m.Admin), 15); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validateMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("masterKey", "body", string(m.MasterKey), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("masterKey", "body", string(m.MasterKey), 50); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 50); err != nil {
		return err
	}

	return nil
}
