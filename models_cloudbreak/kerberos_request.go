// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KerberosRequest kerberos request
// swagger:model KerberosRequest

type KerberosRequest struct {

	// kerberos admin user
	// Max Length: 15
	// Min Length: 5
	Admin string `json:"admin,omitempty"`

	// kerberos admin server URL
	AdminURL string `json:"adminUrl,omitempty"`

	// container dn
	ContainerDn string `json:"containerDn,omitempty"`

	// descriptor
	Descriptor string `json:"descriptor,omitempty"`

	// krb5 conf
	Krb5Conf string `json:"krb5Conf,omitempty"`

	// ldap Url
	LdapURL string `json:"ldapUrl,omitempty"`

	// kerberos master key
	// Max Length: 50
	// Min Length: 3
	MasterKey string `json:"masterKey,omitempty"`

	// kerberos admin password
	// Max Length: 50
	// Min Length: 5
	Password string `json:"password,omitempty"`

	// kerberos principal
	Principal string `json:"principal,omitempty"`

	// realm
	Realm string `json:"realm,omitempty"`

	// tcp allowed
	TCPAllowed *bool `json:"tcpAllowed,omitempty"`

	// kerberos KDC server URL
	URL string `json:"url,omitempty"`
}

/* polymorph KerberosRequest admin false */

/* polymorph KerberosRequest adminUrl false */

/* polymorph KerberosRequest containerDn false */

/* polymorph KerberosRequest descriptor false */

/* polymorph KerberosRequest krb5Conf false */

/* polymorph KerberosRequest ldapUrl false */

/* polymorph KerberosRequest masterKey false */

/* polymorph KerberosRequest password false */

/* polymorph KerberosRequest principal false */

/* polymorph KerberosRequest realm false */

/* polymorph KerberosRequest tcpAllowed false */

/* polymorph KerberosRequest url false */

// Validate validates this kerberos request
func (m *KerberosRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMasterKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRequest) validateAdmin(formats strfmt.Registry) error {

	if swag.IsZero(m.Admin) { // not required
		return nil
	}

	if err := validate.MinLength("admin", "body", string(m.Admin), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("admin", "body", string(m.Admin), 15); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validateMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("masterKey", "body", string(m.MasterKey), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("masterKey", "body", string(m.MasterKey), 50); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRequest) UnmarshalBinary(b []byte) error {
	var res KerberosRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
