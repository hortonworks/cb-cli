// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MpackRequest mpack request
// swagger:model MpackRequest

type MpackRequest struct {

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// if true, management pack will be installed with '--force' flag
	Force *bool `json:"force,omitempty"`

	// url of the ambari management pack
	// Required: true
	MpackURL *string `json:"mpackUrl"`

	// name of the resource
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// if true, management pack will be installed with '--purge' flag
	Purge *bool `json:"purge,omitempty"`

	// if provided, management pack will be installed with '--purgeList' option with this values
	PurgeList []string `json:"purgeList"`
}

/* polymorph MpackRequest description false */

/* polymorph MpackRequest force false */

/* polymorph MpackRequest mpackUrl false */

/* polymorph MpackRequest name false */

/* polymorph MpackRequest purge false */

/* polymorph MpackRequest purgeList false */

// Validate validates this mpack request
func (m *MpackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateMpackURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePurgeList(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MpackRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *MpackRequest) validateMpackURL(formats strfmt.Registry) error {

	if err := validate.Required("mpackUrl", "body", m.MpackURL); err != nil {
		return err
	}

	return nil
}

func (m *MpackRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *MpackRequest) validatePurgeList(formats strfmt.Registry) error {

	if swag.IsZero(m.PurgeList) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MpackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MpackRequest) UnmarshalBinary(b []byte) error {
	var res MpackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
