package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*GatewayJSON gateway json

swagger:model GatewayJson
*/
type GatewayJSON struct {

	/* enable Knox gateway security
	 */
	EnableGateway *bool `json:"enableGateway,omitempty"`

	/* exposed Knox services
	 */
	ExposedServices []string `json:"exposedServices,omitempty"`

	/* Knox gateway type
	 */
	GatewayType *string `json:"gatewayType,omitempty"`

	/* Knox gateway path
	 */
	Path *string `json:"path,omitempty"`

	/* SSO Provider certificate
	 */
	SignCert *string `json:"signCert,omitempty"`

	/* SSO Provider pub key
	 */
	SignPub *string `json:"signPub,omitempty"`

	/* SSO provider cluster name
	 */
	SsoProvider *string `json:"ssoProvider,omitempty"`

	/* Knox SSO type
	 */
	SsoType *string `json:"ssoType,omitempty"`

	/* Knox topology name
	 */
	TopologyName *string `json:"topologyName,omitempty"`
}

// Validate validates this gateway json
func (m *GatewayJSON) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateExposedServices(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGatewayType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSsoType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GatewayJSON) validateExposedServices(formats strfmt.Registry) error {

	if swag.IsZero(m.ExposedServices) { // not required
		return nil
	}

	for i := 0; i < len(m.ExposedServices); i++ {

		if err := validate.RequiredString("exposedServices"+"."+strconv.Itoa(i), "body", string(m.ExposedServices[i])); err != nil {
			return err
		}

	}

	return nil
}

var gatewayJsonTypeGatewayTypePropEnum []interface{}

func (m *GatewayJSON) validateGatewayTypeEnum(path, location string, value string) error {
	if gatewayJsonTypeGatewayTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["CENTRAL","INDIVIDUAL"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			gatewayJsonTypeGatewayTypePropEnum = append(gatewayJsonTypeGatewayTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, gatewayJsonTypeGatewayTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayJSON) validateGatewayType(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayType) { // not required
		return nil
	}

	if err := m.validateGatewayTypeEnum("gatewayType", "body", *m.GatewayType); err != nil {
		return err
	}

	return nil
}

var gatewayJsonTypeSsoTypePropEnum []interface{}

func (m *GatewayJSON) validateSsoTypeEnum(path, location string, value string) error {
	if gatewayJsonTypeSsoTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["SSO_PROVIDER","SSO_CONSUMER","NONE"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			gatewayJsonTypeSsoTypePropEnum = append(gatewayJsonTypeSsoTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, gatewayJsonTypeSsoTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayJSON) validateSsoType(formats strfmt.Registry) error {

	if swag.IsZero(m.SsoType) { // not required
		return nil
	}

	if err := m.validateSsoTypeEnum("ssoType", "body", *m.SsoType); err != nil {
		return err
	}

	return nil
}
