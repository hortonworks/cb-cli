// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackValidationRequest stack validation request
// swagger:model StackValidationRequest

type StackValidationRequest struct {

	// blueprint for the cluster
	Blueprint *BlueprintRequest `json:"blueprint,omitempty"`

	// blueprint id for the cluster
	BlueprintID int64 `json:"blueprintId,omitempty"`

	// blueprint name for the cluster
	BlueprintName string `json:"blueprintName,omitempty"`

	// stack related credential
	Credential *CredentialRequest `json:"credential,omitempty"`

	// credential resource id for the stack
	CredentialID int64 `json:"credentialId,omitempty"`

	// credential resource name for the stack
	CredentialName string `json:"credentialName,omitempty"`

	// cluster related filesystem
	FileSystem *FileSystem `json:"fileSystem,omitempty"`

	// collection of hostgroups
	// Required: true
	// Unique: true
	HostGroups []*HostGroupRequest `json:"hostGroups"`

	// collection of instance groupst
	// Required: true
	// Unique: true
	InstanceGroups []*InstanceGroups `json:"instanceGroups"`

	// stack related network
	Network *NetworkRequest `json:"network,omitempty"`

	// network resource id for the stack
	NetworkID int64 `json:"networkId,omitempty"`

	// type of cloud provider
	// Required: true
	Platform *string `json:"platform"`
}

/* polymorph StackValidationRequest blueprint false */

/* polymorph StackValidationRequest blueprintId false */

/* polymorph StackValidationRequest blueprintName false */

/* polymorph StackValidationRequest credential false */

/* polymorph StackValidationRequest credentialId false */

/* polymorph StackValidationRequest credentialName false */

/* polymorph StackValidationRequest fileSystem false */

/* polymorph StackValidationRequest hostGroups false */

/* polymorph StackValidationRequest instanceGroups false */

/* polymorph StackValidationRequest network false */

/* polymorph StackValidationRequest networkId false */

/* polymorph StackValidationRequest platform false */

// Validate validates this stack validation request
func (m *StackValidationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCredential(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFileSystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackValidationRequest) validateBlueprint(formats strfmt.Registry) error {

	if swag.IsZero(m.Blueprint) { // not required
		return nil
	}

	if m.Blueprint != nil {

		if err := m.Blueprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blueprint")
			}
			return err
		}
	}

	return nil
}

func (m *StackValidationRequest) validateCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {

		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *StackValidationRequest) validateFileSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSystem) { // not required
		return nil
	}

	if m.FileSystem != nil {

		if err := m.FileSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystem")
			}
			return err
		}
	}

	return nil
}

func (m *StackValidationRequest) validateHostGroups(formats strfmt.Registry) error {

	if err := validate.Required("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	if err := validate.UniqueItems("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.HostGroups); i++ {

		if swag.IsZero(m.HostGroups[i]) { // not required
			continue
		}

		if m.HostGroups[i] != nil {

			if err := m.HostGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StackValidationRequest) validateInstanceGroups(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	if err := validate.UniqueItems("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceGroups); i++ {

		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {

			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StackValidationRequest) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {

		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *StackValidationRequest) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StackValidationRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackValidationRequest) UnmarshalBinary(b []byte) error {
	var res StackValidationRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
