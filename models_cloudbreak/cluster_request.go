// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterRequest cluster request
// swagger:model ClusterRequest

type ClusterRequest struct {

	// details of the external Ambari database
	AmbariDatabaseDetails *AmbariDatabaseDetails `json:"ambariDatabaseDetails,omitempty"`

	// details of the Ambari package repository
	AmbariRepoDetailsJSON *AmbariRepoDetails `json:"ambariRepoDetailsJson,omitempty"`

	// a master key for encrypting the passwords in Ambari
	// Max Length: 100
	// Min Length: 5
	AmbariSecurityMasterKey string `json:"ambariSecurityMasterKey,omitempty"`

	// details of the Ambari stack
	AmbariStackDetails *AmbariStackDetails `json:"ambariStackDetails,omitempty"`

	// blueprint for the cluster
	Blueprint *BlueprintRequest `json:"blueprint,omitempty"`

	// blueprint custom properties
	BlueprintCustomProperties string `json:"blueprintCustomProperties,omitempty"`

	// blueprint id for the cluster
	BlueprintID int64 `json:"blueprintId,omitempty"`

	// blueprint inputs in the cluster
	// Unique: true
	BlueprintInputs []*BlueprintInput `json:"blueprintInputs"`

	// blueprint name for the cluster
	BlueprintName string `json:"blueprintName,omitempty"`

	// config recommendation strategy
	ConfigStrategy string `json:"configStrategy,omitempty"`

	// cluster can connect to a datalake you can define the parameters here
	ConnectedCluster *ConnectedClusterRequest `json:"connectedCluster,omitempty"`

	// custom containers
	CustomContainer *CustomContainerRequest `json:"customContainer,omitempty"`

	// custom queue for yarn orchestrator
	CustomQueue string `json:"customQueue,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// send email about the result of the cluster installation
	EmailNeeded *bool `json:"emailNeeded,omitempty"`

	// send email to the requested address
	EmailTo string `json:"emailTo,omitempty"`

	// enable Kerberos security
	EnableSecurity *bool `json:"enableSecurity,omitempty"`

	// executor type of cluster
	ExecutorType string `json:"executorType,omitempty"`

	// external file system configuration
	FileSystem *FileSystem `json:"fileSystem,omitempty"`

	// gateway
	Gateway *GatewayJSON `json:"gateway,omitempty"`

	// collection of hostgroups
	// Unique: true
	HostGroups []*HostGroupRequest `json:"hostGroups"`

	// kerberos
	Kerberos *KerberosRequest `json:"kerberos,omitempty"`

	// LDAP config for the cluster
	LdapConfig *LdapConfigRequest `json:"ldapConfig,omitempty"`

	// LDAP config id for the cluster
	LdapConfigID int64 `json:"ldapConfigId,omitempty"`

	// LDAP config name for the cluster
	LdapConfigName string `json:"ldapConfigName,omitempty"`

	// name of the resource
	// Required: true
	// Max Length: 40
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// ambari password
	// Required: true
	// Max Length: 100
	// Min Length: 5
	Password *string `json:"password"`

	// proxy configuration name for the cluster
	ProxyName string `json:"proxyName,omitempty"`

	// RDS configuration ids for the cluster
	// Unique: true
	RdsConfigIds []int64 `json:"rdsConfigIds"`

	// details of the external database for Hadoop components
	// Unique: true
	RdsConfigJsons []*RdsConfig `json:"rdsConfigJsons"`

	// RDS configuration names for the cluster
	// Unique: true
	RdsConfigNames []string `json:"rdsConfigNames"`

	// ambari username
	// Required: true
	// Max Length: 15
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	UserName *string `json:"userName"`

	// blueprint validation
	ValidateBlueprint *bool `json:"validateBlueprint,omitempty"`
}

/* polymorph ClusterRequest ambariDatabaseDetails false */

/* polymorph ClusterRequest ambariRepoDetailsJson false */

/* polymorph ClusterRequest ambariSecurityMasterKey false */

/* polymorph ClusterRequest ambariStackDetails false */

/* polymorph ClusterRequest blueprint false */

/* polymorph ClusterRequest blueprintCustomProperties false */

/* polymorph ClusterRequest blueprintId false */

/* polymorph ClusterRequest blueprintInputs false */

/* polymorph ClusterRequest blueprintName false */

/* polymorph ClusterRequest configStrategy false */

/* polymorph ClusterRequest connectedCluster false */

/* polymorph ClusterRequest customContainer false */

/* polymorph ClusterRequest customQueue false */

/* polymorph ClusterRequest description false */

/* polymorph ClusterRequest emailNeeded false */

/* polymorph ClusterRequest emailTo false */

/* polymorph ClusterRequest enableSecurity false */

/* polymorph ClusterRequest executorType false */

/* polymorph ClusterRequest fileSystem false */

/* polymorph ClusterRequest gateway false */

/* polymorph ClusterRequest hostGroups false */

/* polymorph ClusterRequest kerberos false */

/* polymorph ClusterRequest ldapConfig false */

/* polymorph ClusterRequest ldapConfigId false */

/* polymorph ClusterRequest ldapConfigName false */

/* polymorph ClusterRequest name false */

/* polymorph ClusterRequest password false */

/* polymorph ClusterRequest proxyName false */

/* polymorph ClusterRequest rdsConfigIds false */

/* polymorph ClusterRequest rdsConfigJsons false */

/* polymorph ClusterRequest rdsConfigNames false */

/* polymorph ClusterRequest userName false */

/* polymorph ClusterRequest validateBlueprint false */

// Validate validates this cluster request
func (m *ClusterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbariDatabaseDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAmbariRepoDetailsJSON(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAmbariSecurityMasterKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAmbariStackDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBlueprint(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateBlueprintInputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConfigStrategy(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectedCluster(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomContainer(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExecutorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateFileSystem(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateKerberos(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLdapConfig(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRdsConfigIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRdsConfigJsons(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRdsConfigNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterRequest) validateAmbariDatabaseDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariDatabaseDetails) { // not required
		return nil
	}

	if m.AmbariDatabaseDetails != nil {

		if err := m.AmbariDatabaseDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariDatabaseDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateAmbariRepoDetailsJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariRepoDetailsJSON) { // not required
		return nil
	}

	if m.AmbariRepoDetailsJSON != nil {

		if err := m.AmbariRepoDetailsJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariRepoDetailsJson")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateAmbariSecurityMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariSecurityMasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("ambariSecurityMasterKey", "body", string(m.AmbariSecurityMasterKey), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ambariSecurityMasterKey", "body", string(m.AmbariSecurityMasterKey), 100); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateAmbariStackDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariStackDetails) { // not required
		return nil
	}

	if m.AmbariStackDetails != nil {

		if err := m.AmbariStackDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariStackDetails")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateBlueprint(formats strfmt.Registry) error {

	if swag.IsZero(m.Blueprint) { // not required
		return nil
	}

	if m.Blueprint != nil {

		if err := m.Blueprint.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("blueprint")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateBlueprintInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.BlueprintInputs) { // not required
		return nil
	}

	if err := validate.UniqueItems("blueprintInputs", "body", m.BlueprintInputs); err != nil {
		return err
	}

	for i := 0; i < len(m.BlueprintInputs); i++ {

		if swag.IsZero(m.BlueprintInputs[i]) { // not required
			continue
		}

		if m.BlueprintInputs[i] != nil {

			if err := m.BlueprintInputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("blueprintInputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var clusterRequestTypeConfigStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEVER_APPLY","ONLY_STACK_DEFAULTS_APPLY","ALWAYS_APPLY","ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterRequestTypeConfigStrategyPropEnum = append(clusterRequestTypeConfigStrategyPropEnum, v)
	}
}

const (
	// ClusterRequestConfigStrategyNEVERAPPLY captures enum value "NEVER_APPLY"
	ClusterRequestConfigStrategyNEVERAPPLY string = "NEVER_APPLY"
	// ClusterRequestConfigStrategyONLYSTACKDEFAULTSAPPLY captures enum value "ONLY_STACK_DEFAULTS_APPLY"
	ClusterRequestConfigStrategyONLYSTACKDEFAULTSAPPLY string = "ONLY_STACK_DEFAULTS_APPLY"
	// ClusterRequestConfigStrategyALWAYSAPPLY captures enum value "ALWAYS_APPLY"
	ClusterRequestConfigStrategyALWAYSAPPLY string = "ALWAYS_APPLY"
	// ClusterRequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES captures enum value "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
	ClusterRequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES string = "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
)

// prop value enum
func (m *ClusterRequest) validateConfigStrategyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterRequestTypeConfigStrategyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterRequest) validateConfigStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigStrategyEnum("configStrategy", "body", m.ConfigStrategy); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateConnectedCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedCluster) { // not required
		return nil
	}

	if m.ConnectedCluster != nil {

		if err := m.ConnectedCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedCluster")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateCustomContainer(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomContainer) { // not required
		return nil
	}

	if m.CustomContainer != nil {

		if err := m.CustomContainer.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customContainer")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

var clusterRequestTypeExecutorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTAINER","DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterRequestTypeExecutorTypePropEnum = append(clusterRequestTypeExecutorTypePropEnum, v)
	}
}

const (
	// ClusterRequestExecutorTypeCONTAINER captures enum value "CONTAINER"
	ClusterRequestExecutorTypeCONTAINER string = "CONTAINER"
	// ClusterRequestExecutorTypeDEFAULT captures enum value "DEFAULT"
	ClusterRequestExecutorTypeDEFAULT string = "DEFAULT"
)

// prop value enum
func (m *ClusterRequest) validateExecutorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterRequestTypeExecutorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterRequest) validateExecutorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutorTypeEnum("executorType", "body", m.ExecutorType); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateFileSystem(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSystem) { // not required
		return nil
	}

	if m.FileSystem != nil {

		if err := m.FileSystem.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("fileSystem")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {

		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateHostGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.HostGroups); i++ {

		if swag.IsZero(m.HostGroups[i]) { // not required
			continue
		}

		if m.HostGroups[i] != nil {

			if err := m.HostGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterRequest) validateKerberos(formats strfmt.Registry) error {

	if swag.IsZero(m.Kerberos) { // not required
		return nil
	}

	if m.Kerberos != nil {

		if err := m.Kerberos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kerberos")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateLdapConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapConfig) { // not required
		return nil
	}

	if m.LdapConfig != nil {

		if err := m.LdapConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapConfig")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 40); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 100); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateRdsConfigIds(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigIds", "body", m.RdsConfigIds); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateRdsConfigJsons(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigJsons) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigJsons", "body", m.RdsConfigJsons); err != nil {
		return err
	}

	for i := 0; i < len(m.RdsConfigJsons); i++ {

		if swag.IsZero(m.RdsConfigJsons[i]) { // not required
			continue
		}

		if m.RdsConfigJsons[i] != nil {

			if err := m.RdsConfigJsons[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rdsConfigJsons" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ClusterRequest) validateRdsConfigNames(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigNames", "body", m.RdsConfigNames); err != nil {
		return err
	}

	return nil
}

func (m *ClusterRequest) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	if err := validate.MinLength("userName", "body", string(*m.UserName), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("userName", "body", string(*m.UserName), 15); err != nil {
		return err
	}

	if err := validate.Pattern("userName", "body", string(*m.UserName), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterRequest) UnmarshalBinary(b []byte) error {
	var res ClusterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
