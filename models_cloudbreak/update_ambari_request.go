// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateAmbariRequest update ambari request
// swagger:model UpdateAmbariRequest

type UpdateAmbariRequest struct {

	// details of the Ambari stack
	AmbariStackDetails *AmbariStackDetails `json:"ambariStackDetails,omitempty"`

	// blueprint id for the cluster
	BlueprintName string `json:"blueprintName,omitempty"`

	// collection of hostgroups
	// Unique: true
	Hostgroups []*HostGroupRequest `json:"hostgroups"`

	// user details
	UserNamePasswordJSON *UserNamePassword `json:"userNamePasswordJson,omitempty"`

	// validate blueprint
	ValidateBlueprint *bool `json:"validateBlueprint,omitempty"`
}

/* polymorph UpdateAmbariRequest ambariStackDetails false */

/* polymorph UpdateAmbariRequest blueprintName false */

/* polymorph UpdateAmbariRequest hostgroups false */

/* polymorph UpdateAmbariRequest userNamePasswordJson false */

/* polymorph UpdateAmbariRequest validateBlueprint false */

// Validate validates this update ambari request
func (m *UpdateAmbariRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbariStackDetails(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostgroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserNamePasswordJSON(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateAmbariRequest) validateAmbariStackDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariStackDetails) { // not required
		return nil
	}

	if m.AmbariStackDetails != nil {

		if err := m.AmbariStackDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariStackDetails")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateAmbariRequest) validateHostgroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostgroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostgroups", "body", m.Hostgroups); err != nil {
		return err
	}

	for i := 0; i < len(m.Hostgroups); i++ {

		if swag.IsZero(m.Hostgroups[i]) { // not required
			continue
		}

		if m.Hostgroups[i] != nil {

			if err := m.Hostgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostgroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateAmbariRequest) validateUserNamePasswordJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.UserNamePasswordJSON) { // not required
		return nil
	}

	if m.UserNamePasswordJSON != nil {

		if err := m.UserNamePasswordJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userNamePasswordJson")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateAmbariRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateAmbariRequest) UnmarshalBinary(b []byte) error {
	var res UpdateAmbariRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
