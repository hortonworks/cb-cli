package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*FileSystem file system

swagger:model FileSystem
*/
type FileSystem struct {

	/* true if fs.defaultFS should point to this filesystem
	 */
	DefaultFs *bool `json:"defaultFs,omitempty"`

	/* name of the filesystem

	Required: true
	*/
	Name string `json:"name"`

	/* configuration of the filesystem access as key-value pairs
	 */
	Properties map[string]string `json:"properties,omitempty"`

	/* type of the filesystem

	Required: true
	*/
	Type string `json:"type"`
}

// Validate validates this file system
func (m *FileSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSystem) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	return nil
}

func (m *FileSystem) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	return nil
}

var fileSystemTypeTypePropEnum []interface{}

func (m *FileSystem) validateTypeEnum(path, location string, value string) error {
	if fileSystemTypeTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["DASH","WASB_INTEGRATED","GCS","WASB","ADLS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			fileSystemTypeTypePropEnum = append(fileSystemTypeTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, fileSystemTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FileSystem) validateType(formats strfmt.Registry) error {

	if err := validate.RequiredString("type", "body", string(m.Type)); err != nil {
		return err
	}

	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}
