// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FileSystem file system
// swagger:model FileSystem

type FileSystem struct {

	// true if fs.defaultFS should point to this filesystem
	DefaultFs *bool `json:"defaultFs,omitempty"`

	// name of the filesystem
	// Required: true
	Name *string `json:"name"`

	// configuration of the filesystem access as key-value pairs
	Properties map[string]string `json:"properties,omitempty"`

	// type of the filesystem
	// Required: true
	Type *string `json:"type"`
}

/* polymorph FileSystem defaultFs false */

/* polymorph FileSystem name false */

/* polymorph FileSystem properties false */

/* polymorph FileSystem type false */

// Validate validates this file system
func (m *FileSystem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FileSystem) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var fileSystemTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WASB_INTEGRATED","GCS","WASB","ADLS","S3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		fileSystemTypeTypePropEnum = append(fileSystemTypeTypePropEnum, v)
	}
}

const (
	// FileSystemTypeWASBINTEGRATED captures enum value "WASB_INTEGRATED"
	FileSystemTypeWASBINTEGRATED string = "WASB_INTEGRATED"
	// FileSystemTypeGCS captures enum value "GCS"
	FileSystemTypeGCS string = "GCS"
	// FileSystemTypeWASB captures enum value "WASB"
	FileSystemTypeWASB string = "WASB"
	// FileSystemTypeADLS captures enum value "ADLS"
	FileSystemTypeADLS string = "ADLS"
	// FileSystemTypeS3 captures enum value "S3"
	FileSystemTypeS3 string = "S3"
)

// prop value enum
func (m *FileSystem) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, fileSystemTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *FileSystem) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FileSystem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FileSystem) UnmarshalBinary(b []byte) error {
	var res FileSystem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
