// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RDSConfig r d s config
// swagger:model RDSConfig

type RDSConfig struct {

	// Password to use for the jdbc connection
	// Required: true
	ConnectionPassword *string `json:"connectionPassword"`

	// JDBC connection URL in the form of jdbc:<db-type>://<address>:<port>/<db>
	// Required: true
	// Pattern: ^jdbc:postgresql://[-\w\.]*:\d{1,5}/?\w*
	ConnectionURL *string `json:"connectionURL"`

	// Username to use for the jdbc connection
	// Required: true
	ConnectionUserName *string `json:"connectionUserName"`

	// Type of the external database (allowed values: MYSQL, POSTGRES)
	// Required: true
	DatabaseType *string `json:"databaseType"`

	// HDP version for the RDS configuration
	// Required: true
	HdpVersion *string `json:"hdpVersion"`

	// Name of the RDS configuration resource
	// Required: true
	Name *string `json:"name"`

	// custom properties for rds connection
	// Unique: true
	Properties []*RdsConfigProperty `json:"properties"`

	// Type of rds (HIVE or RANGER)
	Type string `json:"type,omitempty"`

	// If true, then the RDS configuration will be validated
	Validated *bool `json:"validated,omitempty"`
}

/* polymorph RDSConfig connectionPassword false */

/* polymorph RDSConfig connectionURL false */

/* polymorph RDSConfig connectionUserName false */

/* polymorph RDSConfig databaseType false */

/* polymorph RDSConfig hdpVersion false */

/* polymorph RDSConfig name false */

/* polymorph RDSConfig properties false */

/* polymorph RDSConfig type false */

/* polymorph RDSConfig validated false */

// Validate validates this r d s config
func (m *RDSConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionPassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectionURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateConnectionUserName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDatabaseType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHdpVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RDSConfig) validateConnectionPassword(formats strfmt.Registry) error {

	if err := validate.Required("connectionPassword", "body", m.ConnectionPassword); err != nil {
		return err
	}

	return nil
}

func (m *RDSConfig) validateConnectionURL(formats strfmt.Registry) error {

	if err := validate.Required("connectionURL", "body", m.ConnectionURL); err != nil {
		return err
	}

	if err := validate.Pattern("connectionURL", "body", string(*m.ConnectionURL), `^jdbc:postgresql://[-\w\.]*:\d{1,5}/?\w*`); err != nil {
		return err
	}

	return nil
}

func (m *RDSConfig) validateConnectionUserName(formats strfmt.Registry) error {

	if err := validate.Required("connectionUserName", "body", m.ConnectionUserName); err != nil {
		return err
	}

	return nil
}

var rDSConfigTypeDatabaseTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["POSTGRES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDSConfigTypeDatabaseTypePropEnum = append(rDSConfigTypeDatabaseTypePropEnum, v)
	}
}

const (
	// RDSConfigDatabaseTypePOSTGRES captures enum value "POSTGRES"
	RDSConfigDatabaseTypePOSTGRES string = "POSTGRES"
)

// prop value enum
func (m *RDSConfig) validateDatabaseTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDSConfigTypeDatabaseTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDSConfig) validateDatabaseType(formats strfmt.Registry) error {

	if err := validate.Required("databaseType", "body", m.DatabaseType); err != nil {
		return err
	}

	// value enum
	if err := m.validateDatabaseTypeEnum("databaseType", "body", *m.DatabaseType); err != nil {
		return err
	}

	return nil
}

func (m *RDSConfig) validateHdpVersion(formats strfmt.Registry) error {

	if err := validate.Required("hdpVersion", "body", m.HdpVersion); err != nil {
		return err
	}

	return nil
}

func (m *RDSConfig) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *RDSConfig) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if err := validate.UniqueItems("properties", "body", m.Properties); err != nil {
		return err
	}

	for i := 0; i < len(m.Properties); i++ {

		if swag.IsZero(m.Properties[i]) { // not required
			continue
		}

		if m.Properties[i] != nil {

			if err := m.Properties[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("properties" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var rDSConfigTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HIVE","RANGER","DRUID"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rDSConfigTypeTypePropEnum = append(rDSConfigTypeTypePropEnum, v)
	}
}

const (
	// RDSConfigTypeHIVE captures enum value "HIVE"
	RDSConfigTypeHIVE string = "HIVE"
	// RDSConfigTypeRANGER captures enum value "RANGER"
	RDSConfigTypeRANGER string = "RANGER"
	// RDSConfigTypeDRUID captures enum value "DRUID"
	RDSConfigTypeDRUID string = "DRUID"
)

// prop value enum
func (m *RDSConfig) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rDSConfigTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RDSConfig) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RDSConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RDSConfig) UnmarshalBinary(b []byte) error {
	var res RDSConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
