package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*PlatformRegionsJSON platform regions json

swagger:model PlatformRegionsJson
*/
type PlatformRegionsJSON struct {

	/* availability zones
	 */
	AvailabilityZones map[string]map[string][]string `json:"availabilityZones,omitempty"`

	/* default regions
	 */
	DefaultRegions map[string]string `json:"defaultRegions,omitempty"`

	/* regions
	 */
	Regions map[string][]string `json:"regions,omitempty"`
}

// Validate validates this platform regions json
func (m *PlatformRegionsJSON) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailabilityZones(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDefaultRegions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlatformRegionsJSON) validateAvailabilityZones(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailabilityZones) { // not required
		return nil
	}

	if swag.IsZero(m.AvailabilityZones) { // not required
		return nil
	}

	return nil
}

func (m *PlatformRegionsJSON) validateDefaultRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.DefaultRegions) { // not required
		return nil
	}

	if err := validate.Required("defaultRegions", "body", m.DefaultRegions); err != nil {
		return err
	}

	return nil
}

func (m *PlatformRegionsJSON) validateRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	if err := validate.Required("regions", "body", m.Regions); err != nil {
		return err
	}

	return nil
}
