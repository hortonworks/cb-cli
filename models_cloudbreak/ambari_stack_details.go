// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AmbariStackDetails ambari stack details
// swagger:model AmbariStackDetails

type AmbariStackDetails struct {

	// operating system for the stack, like redhat6
	Os string `json:"os,omitempty"`

	// name of the stack, like HDP
	// Required: true
	Stack *string `json:"stack"`

	// url of the stack repository
	// Required: true
	StackBaseURL *string `json:"stackBaseURL"`

	// id of the stack repository
	// Required: true
	StackRepoID *string `json:"stackRepoId"`

	// url of the stack utils repository
	// Required: true
	UtilsBaseURL *string `json:"utilsBaseURL"`

	// id of the stack utils repository
	// Required: true
	UtilsRepoID *string `json:"utilsRepoId"`

	// whether to verify or not the repo url
	// Required: true
	Verify bool `json:"verify"`

	// version of the stack
	// Required: true
	Version *string `json:"version"`
}

/* polymorph AmbariStackDetails os false */

/* polymorph AmbariStackDetails stack false */

/* polymorph AmbariStackDetails stackBaseURL false */

/* polymorph AmbariStackDetails stackRepoId false */

/* polymorph AmbariStackDetails utilsBaseURL false */

/* polymorph AmbariStackDetails utilsRepoId false */

/* polymorph AmbariStackDetails verify false */

/* polymorph AmbariStackDetails version false */

// Validate validates this ambari stack details
func (m *AmbariStackDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStack(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStackBaseURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStackRepoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUtilsBaseURL(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUtilsRepoID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVerify(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmbariStackDetails) validateStack(formats strfmt.Registry) error {

	if err := validate.Required("stack", "body", m.Stack); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateStackBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("stackBaseURL", "body", m.StackBaseURL); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateStackRepoID(formats strfmt.Registry) error {

	if err := validate.Required("stackRepoId", "body", m.StackRepoID); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateUtilsBaseURL(formats strfmt.Registry) error {

	if err := validate.Required("utilsBaseURL", "body", m.UtilsBaseURL); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateUtilsRepoID(formats strfmt.Registry) error {

	if err := validate.Required("utilsRepoId", "body", m.UtilsRepoID); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateVerify(formats strfmt.Registry) error {

	if err := validate.Required("verify", "body", bool(m.Verify)); err != nil {
		return err
	}

	return nil
}

func (m *AmbariStackDetails) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AmbariStackDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmbariStackDetails) UnmarshalBinary(b []byte) error {
	var res AmbariStackDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
