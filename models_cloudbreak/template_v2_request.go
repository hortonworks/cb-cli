// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplateV2Request template v2 request
// swagger:model TemplateV2Request

type TemplateV2Request struct {

	// type of the instance
	// Required: true
	InstanceType *string `json:"instanceType"`

	// cloud specific parameters for template
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// number of volumes
	VolumeCount int32 `json:"volumeCount,omitempty"`

	// size of volumes
	VolumeSize int32 `json:"volumeSize,omitempty"`

	// type of the volumes
	VolumeType string `json:"volumeType,omitempty"`
}

/* polymorph TemplateV2Request instanceType false */

/* polymorph TemplateV2Request parameters false */

/* polymorph TemplateV2Request volumeCount false */

/* polymorph TemplateV2Request volumeSize false */

/* polymorph TemplateV2Request volumeType false */

// Validate validates this template v2 request
func (m *TemplateV2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateV2Request) validateInstanceType(formats strfmt.Registry) error {

	if err := validate.Required("instanceType", "body", m.InstanceType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplateV2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplateV2Request) UnmarshalBinary(b []byte) error {
	var res TemplateV2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
