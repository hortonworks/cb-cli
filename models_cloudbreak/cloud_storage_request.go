// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudStorageRequest cloud storage request
// swagger:model CloudStorageRequest

type CloudStorageRequest struct {

	// abfs
	Abfs *AbfsCloudStorageParameters `json:"abfs,omitempty"`

	// adls
	Adls *AdlsCloudStorageParameters `json:"adls,omitempty"`

	// gcs
	Gcs *GcsCloudStorageParameters `json:"gcs,omitempty"`

	// cloud storage locations
	// Unique: true
	Locations []*StorageLocationRequest `json:"locations"`

	// s3
	S3 *S3CloudStorageParameters `json:"s3,omitempty"`

	// wasb
	Wasb *WasbCloudStorageParameters `json:"wasb,omitempty"`
}

/* polymorph CloudStorageRequest abfs false */

/* polymorph CloudStorageRequest adls false */

/* polymorph CloudStorageRequest gcs false */

/* polymorph CloudStorageRequest locations false */

/* polymorph CloudStorageRequest s3 false */

/* polymorph CloudStorageRequest wasb false */

// Validate validates this cloud storage request
func (m *CloudStorageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAbfs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAdls(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateGcs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocations(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWasb(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudStorageRequest) validateAbfs(formats strfmt.Registry) error {

	if swag.IsZero(m.Abfs) { // not required
		return nil
	}

	if m.Abfs != nil {

		if err := m.Abfs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("abfs")
			}
			return err
		}
	}

	return nil
}

func (m *CloudStorageRequest) validateAdls(formats strfmt.Registry) error {

	if swag.IsZero(m.Adls) { // not required
		return nil
	}

	if m.Adls != nil {

		if err := m.Adls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adls")
			}
			return err
		}
	}

	return nil
}

func (m *CloudStorageRequest) validateGcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Gcs) { // not required
		return nil
	}

	if m.Gcs != nil {

		if err := m.Gcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *CloudStorageRequest) validateLocations(formats strfmt.Registry) error {

	if swag.IsZero(m.Locations) { // not required
		return nil
	}

	if err := validate.UniqueItems("locations", "body", m.Locations); err != nil {
		return err
	}

	for i := 0; i < len(m.Locations); i++ {

		if swag.IsZero(m.Locations[i]) { // not required
			continue
		}

		if m.Locations[i] != nil {

			if err := m.Locations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("locations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CloudStorageRequest) validateS3(formats strfmt.Registry) error {

	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {

		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

func (m *CloudStorageRequest) validateWasb(formats strfmt.Registry) error {

	if swag.IsZero(m.Wasb) { // not required
		return nil
	}

	if m.Wasb != nil {

		if err := m.Wasb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudStorageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudStorageRequest) UnmarshalBinary(b []byte) error {
	var res CloudStorageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
