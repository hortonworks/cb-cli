// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkResponse network response
// swagger:model NetworkResponse

type NetworkResponse struct {

	// type of cloud provider
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// id of the resource
	// Read Only: true
	ID int64 `json:"id,omitempty"`

	// name of the resource
	// Required: true
	Name *string `json:"name"`

	// provider specific parameters of the specified network
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// resource is visible in account
	// Read Only: true
	PublicInAccount *bool `json:"publicInAccount,omitempty"`

	// the subnet definition of the network in CIDR format
	SubnetCIDR string `json:"subnetCIDR,omitempty"`

	// id of the topology the resource belongs to
	TopologyID int64 `json:"topologyId,omitempty"`
}

/* polymorph NetworkResponse cloudPlatform false */

/* polymorph NetworkResponse description false */

/* polymorph NetworkResponse id false */

/* polymorph NetworkResponse name false */

/* polymorph NetworkResponse parameters false */

/* polymorph NetworkResponse publicInAccount false */

/* polymorph NetworkResponse subnetCIDR false */

/* polymorph NetworkResponse topologyId false */

// Validate validates this network response
func (m *NetworkResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkResponse) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *NetworkResponse) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *NetworkResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkResponse) UnmarshalBinary(b []byte) error {
	var res NetworkResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
