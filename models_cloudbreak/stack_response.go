package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*StackResponse stack response

swagger:model StackResponse
*/
type StackResponse struct {

	/* account id of the resource owner that is provided by OAuth provider
	 */
	Account *string `json:"account,omitempty"`

	/* specific version of ambari
	 */
	AmbariVersion *string `json:"ambariVersion,omitempty"`

	/* availability zone of the stack
	 */
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	/* type of cloud provider

	Read Only: true
	*/
	CloudPlatform *string `json:"cloudPlatform,omitempty"`

	/* details of the Cloudbreak that provisioned the stack
	 */
	CloudbreakDetails *CloudbreakDetailsJSON `json:"cloudbreakDetails,omitempty"`

	/* cluster
	 */
	Cluster *ClusterResponse `json:"cluster,omitempty"`

	/* creation time of the stack in long
	 */
	Created *int64 `json:"created,omitempty"`

	/* stack related credential
	 */
	Credential *CredentialResponse `json:"credential,omitempty"`

	/* credential resource id for the stack
	 */
	CredentialID *int64 `json:"credentialId,omitempty"`

	/* failure policy in case of failures
	 */
	FailurePolicy *FailurePolicyResponse `json:"failurePolicy,omitempty"`

	/* the related flex subscription
	 */
	FlexSubscription *FlexSubscriptionResponse `json:"flexSubscription,omitempty"`

	/* port of the gateway secured proxy
	 */
	GatewayPort *int32 `json:"gatewayPort,omitempty"`

	/* specific version of HDP
	 */
	HdpVersion *string `json:"hdpVersion,omitempty"`

	/* id of the stack
	 */
	ID *int64 `json:"id,omitempty"`

	/* image of the stack
	 */
	Image *ImageJSON `json:"image,omitempty"`

	/* instance groups
	 */
	InstanceGroups []*InstanceGroupResponse `json:"instanceGroups,omitempty"`

	/* name of the stack

	Required: true
	Max Length: 40
	Min Length: 5
	Pattern: ([a-z][-a-z0-9]*[a-z0-9])
	*/
	Name string `json:"name"`

	/* stack related network
	 */
	Network *NetworkResponse `json:"network,omitempty"`

	/* network resource id for the stack
	 */
	NetworkID *int64 `json:"networkId,omitempty"`

	/* action on failure
	 */
	OnFailureAction *string `json:"onFailureAction,omitempty"`

	/* the details of the container orchestrator api to use
	 */
	Orchestrator *OrchestratorResponse `json:"orchestrator,omitempty"`

	/* id of the resource owner that is provided by OAuth provider
	 */
	Owner *string `json:"owner,omitempty"`

	/* additional cloud specific parameters for stack
	 */
	Parameters map[string]string `json:"parameters,omitempty"`

	/* cloud provider api variant
	 */
	PlatformVariant *string `json:"platformVariant,omitempty"`

	/* resource is visible in account
	 */
	Public *bool `json:"public,omitempty"`

	/* region of the stack
	 */
	Region *string `json:"region,omitempty"`

	/* relocate the docker service in startup time
	 */
	RelocateDocker *bool `json:"relocateDocker,omitempty"`

	/* S3 access role arn
	 */
	S3AccessRoleArn *string `json:"s3AccessRoleArn,omitempty"`

	/* freemarker template for the stack
	 */
	StackTemplate *string `json:"stackTemplate,omitempty"`

	/* status of the stack
	 */
	Status *string `json:"status,omitempty"`

	/* status message of the stack
	 */
	StatusReason *string `json:"statusReason,omitempty"`

	/* stack related tags
	 */
	Tags map[string]interface{} `json:"tags,omitempty"`
}

// Validate validates this stack response
func (m *StackResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateOnFailureAction(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateParameters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackResponse) validateInstanceGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceGroups) { // not required
		return nil
	}

	for i := 0; i < len(m.InstanceGroups); i++ {

		if m.InstanceGroups[i] != nil {

			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *StackResponse) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 40); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `([a-z][-a-z0-9]*[a-z0-9])`); err != nil {
		return err
	}

	return nil
}

var stackResponseTypeOnFailureActionPropEnum []interface{}

func (m *StackResponse) validateOnFailureActionEnum(path, location string, value string) error {
	if stackResponseTypeOnFailureActionPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["ROLLBACK","DO_NOTHING"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			stackResponseTypeOnFailureActionPropEnum = append(stackResponseTypeOnFailureActionPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, stackResponseTypeOnFailureActionPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StackResponse) validateOnFailureAction(formats strfmt.Registry) error {

	if swag.IsZero(m.OnFailureAction) { // not required
		return nil
	}

	if err := m.validateOnFailureActionEnum("onFailureAction", "body", *m.OnFailureAction); err != nil {
		return err
	}

	return nil
}

func (m *StackResponse) validateParameters(formats strfmt.Registry) error {

	if swag.IsZero(m.Parameters) { // not required
		return nil
	}

	if err := validate.Required("parameters", "body", m.Parameters); err != nil {
		return err
	}

	return nil
}

var stackResponseTypeStatusPropEnum []interface{}

func (m *StackResponse) validateStatusEnum(path, location string, value string) error {
	if stackResponseTypeStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","ENABLE_SECURITY_FAILED","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			stackResponseTypeStatusPropEnum = append(stackResponseTypeStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, stackResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StackResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}
