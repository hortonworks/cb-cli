package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*AmbariDatabaseDetails ambari database details

swagger:model AmbariDatabaseDetails
*/
type AmbariDatabaseDetails struct {

	/* host of the Ambari database

	Required: true
	Pattern: ^[a-zA-Z0-9]([a-zA-Z0-9-\.]+)$
	*/
	Host string `json:"host"`

	/* name of the Ambari database

	Required: true
	Pattern: ^[^']+$
	*/
	Name string `json:"name"`

	/* password for the Ambari database

	Required: true
	Pattern: ^[^']+$
	*/
	Password string `json:"password"`

	/* port of the Ambari database

	Required: true
	*/
	Port int32 `json:"port"`

	/* user name for the Ambari database

	Required: true
	Pattern: ^[^']+$
	*/
	UserName string `json:"userName"`

	/* vendor of the Ambari database

	Required: true
	*/
	Vendor string `json:"vendor"`
}

// Validate validates this ambari database details
func (m *AmbariDatabaseDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateVendor(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmbariDatabaseDetails) validateHost(formats strfmt.Registry) error {

	if err := validate.RequiredString("host", "body", string(m.Host)); err != nil {
		return err
	}

	if err := validate.Pattern("host", "body", string(m.Host), `^[a-zA-Z0-9]([a-zA-Z0-9-\.]+)$`); err != nil {
		return err
	}

	return nil
}

func (m *AmbariDatabaseDetails) validateName(formats strfmt.Registry) error {

	if err := validate.RequiredString("name", "body", string(m.Name)); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `^[^']+$`); err != nil {
		return err
	}

	return nil
}

func (m *AmbariDatabaseDetails) validatePassword(formats strfmt.Registry) error {

	if err := validate.RequiredString("password", "body", string(m.Password)); err != nil {
		return err
	}

	if err := validate.Pattern("password", "body", string(m.Password), `^[^']+$`); err != nil {
		return err
	}

	return nil
}

func (m *AmbariDatabaseDetails) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", int32(m.Port)); err != nil {
		return err
	}

	return nil
}

func (m *AmbariDatabaseDetails) validateUserName(formats strfmt.Registry) error {

	if err := validate.RequiredString("userName", "body", string(m.UserName)); err != nil {
		return err
	}

	if err := validate.Pattern("userName", "body", string(m.UserName), `^[^']+$`); err != nil {
		return err
	}

	return nil
}

var ambariDatabaseDetailsTypeVendorPropEnum []interface{}

func (m *AmbariDatabaseDetails) validateVendorEnum(path, location string, value string) error {
	if ambariDatabaseDetailsTypeVendorPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["POSTGRES","MYSQL","MARIADB","MSSQL","ORACLE","SQLANYWHERE","EMBEDDED"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			ambariDatabaseDetailsTypeVendorPropEnum = append(ambariDatabaseDetailsTypeVendorPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, ambariDatabaseDetailsTypeVendorPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AmbariDatabaseDetails) validateVendor(formats strfmt.Registry) error {

	if err := validate.RequiredString("vendor", "body", string(m.Vendor)); err != nil {
		return err
	}

	if err := m.validateVendorEnum("vendor", "body", m.Vendor); err != nil {
		return err
	}

	return nil
}
