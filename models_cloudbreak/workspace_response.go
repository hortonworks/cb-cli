// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WorkspaceResponse workspace response
// swagger:model WorkspaceResponse

type WorkspaceResponse struct {

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// id of the resource
	ID int64 `json:"id,omitempty"`

	// name of the resource
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name string `json:"name,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// users
	// Unique: true
	Users []*UserWorkspacePermissionsJSON `json:"users"`
}

/* polymorph WorkspaceResponse description false */

/* polymorph WorkspaceResponse id false */

/* polymorph WorkspaceResponse name false */

/* polymorph WorkspaceResponse status false */

/* polymorph WorkspaceResponse users false */

// Validate validates this workspace response
func (m *WorkspaceResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WorkspaceResponse) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceResponse) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.MinLength("name", "body", string(m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

var workspaceResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE","DELETED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		workspaceResponseTypeStatusPropEnum = append(workspaceResponseTypeStatusPropEnum, v)
	}
}

const (
	// WorkspaceResponseStatusACTIVE captures enum value "ACTIVE"
	WorkspaceResponseStatusACTIVE string = "ACTIVE"
	// WorkspaceResponseStatusDELETED captures enum value "DELETED"
	WorkspaceResponseStatusDELETED string = "DELETED"
)

// prop value enum
func (m *WorkspaceResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, workspaceResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *WorkspaceResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *WorkspaceResponse) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if err := validate.UniqueItems("users", "body", m.Users); err != nil {
		return err
	}

	for i := 0; i < len(m.Users); i++ {

		if swag.IsZero(m.Users[i]) { // not required
			continue
		}

		if m.Users[i] != nil {

			if err := m.Users[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("users" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *WorkspaceResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WorkspaceResponse) UnmarshalBinary(b []byte) error {
	var res WorkspaceResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
