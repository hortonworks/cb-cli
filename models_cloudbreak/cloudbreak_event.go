package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*CloudbreakEvent cloudbreak event

swagger:model CloudbreakEvent
*/
type CloudbreakEvent struct {

	/* account id of the resource owner that is provided by OAuth provider
	 */
	Account *string `json:"account,omitempty"`

	/* availability zone of the stack
	 */
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	/* blueprint id for the cluster
	 */
	BlueprintID *int64 `json:"blueprintId,omitempty"`

	/* gathered from blueprintName field from the blueprint JSON
	 */
	BlueprintName *string `json:"blueprintName,omitempty"`

	/* type of cloud provider
	 */
	Cloud *string `json:"cloud,omitempty"`

	/* id of the cluster
	 */
	ClusterID *int64 `json:"clusterId,omitempty"`

	/* name of the cluster
	 */
	ClusterName *string `json:"clusterName,omitempty"`

	/* status of the cluster
	 */
	ClusterStatus *string `json:"clusterStatus,omitempty"`

	/* message of the event
	 */
	EventMessage *string `json:"eventMessage,omitempty"`

	/* timestamp of the event
	 */
	EventTimestamp *int64 `json:"eventTimestamp,omitempty"`

	/* type of the event
	 */
	EventType *string `json:"eventType,omitempty"`

	/* name of the instance group
	 */
	InstanceGroup *string `json:"instanceGroup,omitempty"`

	/* number of nodes
	 */
	NodeCount *int32 `json:"nodeCount,omitempty"`

	/* id of the resource owner that is provided by OAuth provider
	 */
	Owner *string `json:"owner,omitempty"`

	/* region of the stack
	 */
	Region *string `json:"region,omitempty"`

	/* id of the stack
	 */
	StackID *int64 `json:"stackId,omitempty"`

	/* name of the stack
	 */
	StackName *string `json:"stackName,omitempty"`

	/* status of the stack
	 */
	StackStatus *string `json:"stackStatus,omitempty"`
}

// Validate validates this cloudbreak event
func (m *CloudbreakEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStackStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudbreakEventTypeClusterStatusPropEnum []interface{}

func (m *CloudbreakEvent) validateClusterStatusEnum(path, location string, value string) error {
	if cloudbreakEventTypeClusterStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","ENABLE_SECURITY_FAILED","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			cloudbreakEventTypeClusterStatusPropEnum = append(cloudbreakEventTypeClusterStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, cloudbreakEventTypeClusterStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudbreakEvent) validateClusterStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterStatus) { // not required
		return nil
	}

	if err := m.validateClusterStatusEnum("clusterStatus", "body", *m.ClusterStatus); err != nil {
		return err
	}

	return nil
}

var cloudbreakEventTypeStackStatusPropEnum []interface{}

func (m *CloudbreakEvent) validateStackStatusEnum(path, location string, value string) error {
	if cloudbreakEventTypeStackStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","ENABLE_SECURITY_FAILED","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			cloudbreakEventTypeStackStatusPropEnum = append(cloudbreakEventTypeStackStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, cloudbreakEventTypeStackStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudbreakEvent) validateStackStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.StackStatus) { // not required
		return nil
	}

	if err := m.validateStackStatusEnum("stackStatus", "body", *m.StackStatus); err != nil {
		return err
	}

	return nil
}
