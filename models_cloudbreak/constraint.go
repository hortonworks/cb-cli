package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*Constraint constraint

swagger:model Constraint
*/
type Constraint struct {

	/* name of a constraint template that defines the resource constraints for the hostgroup
	 */
	ConstraintTemplateName *string `json:"constraintTemplateName,omitempty"`

	/* number of hosts in the hostgroup

	Required: true
	*/
	HostCount int32 `json:"hostCount"`

	/* name of an instance group where the hostgroup will be deployed

	Required: true
	*/
	InstanceGroupName string `json:"instanceGroupName"`
}

// Validate validates this constraint
func (m *Constraint) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostCount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceGroupName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Constraint) validateHostCount(formats strfmt.Registry) error {

	if err := validate.Required("hostCount", "body", int32(m.HostCount)); err != nil {
		return err
	}

	return nil
}

func (m *Constraint) validateInstanceGroupName(formats strfmt.Registry) error {

	if err := validate.RequiredString("instanceGroupName", "body", string(m.InstanceGroupName)); err != nil {
		return err
	}

	return nil
}
