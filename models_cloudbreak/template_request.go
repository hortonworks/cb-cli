// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TemplateRequest template request
// swagger:model TemplateRequest

type TemplateRequest struct {

	// type of cloud provider
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// custom instancetype definition
	CustomInstanceType *CustomInstanceType `json:"customInstanceType,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// type of the instance
	InstanceType string `json:"instanceType,omitempty"`

	// name of the resource
	// Required: true
	// Pattern: ([a-z][-a-z0-9]*[a-z0-9])
	Name *string `json:"name"`

	// cloud specific parameters for template
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// id of the topology the resource belongs to
	TopologyID int64 `json:"topologyId,omitempty"`

	// number of volumes
	VolumeCount int32 `json:"volumeCount,omitempty"`

	// size of volumes
	VolumeSize int32 `json:"volumeSize,omitempty"`

	// type of the volumes
	VolumeType string `json:"volumeType,omitempty"`
}

/* polymorph TemplateRequest cloudPlatform false */

/* polymorph TemplateRequest customInstanceType false */

/* polymorph TemplateRequest description false */

/* polymorph TemplateRequest instanceType false */

/* polymorph TemplateRequest name false */

/* polymorph TemplateRequest parameters false */

/* polymorph TemplateRequest topologyId false */

/* polymorph TemplateRequest volumeCount false */

/* polymorph TemplateRequest volumeSize false */

/* polymorph TemplateRequest volumeType false */

// Validate validates this template request
func (m *TemplateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCustomInstanceType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TemplateRequest) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *TemplateRequest) validateCustomInstanceType(formats strfmt.Registry) error {

	if swag.IsZero(m.CustomInstanceType) { // not required
		return nil
	}

	if m.CustomInstanceType != nil {

		if err := m.CustomInstanceType.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("customInstanceType")
			}
			return err
		}
	}

	return nil
}

func (m *TemplateRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *TemplateRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `([a-z][-a-z0-9]*[a-z0-9])`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TemplateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TemplateRequest) UnmarshalBinary(b []byte) error {
	var res TemplateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
