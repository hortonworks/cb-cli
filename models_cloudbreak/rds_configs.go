// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RdsConfigs rds configs
// swagger:model RdsConfigs

type RdsConfigs struct {

	// details of the external database for Hadoop components
	// Unique: true
	Configs []*RdsConfig `json:"configs"`

	// RDS configuration ids for the cluster
	// Unique: true
	Ids []int64 `json:"ids"`
}

/* polymorph RdsConfigs configs false */

/* polymorph RdsConfigs ids false */

// Validate validates this rds configs
func (m *RdsConfigs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RdsConfigs) validateConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.Configs) { // not required
		return nil
	}

	if err := validate.UniqueItems("configs", "body", m.Configs); err != nil {
		return err
	}

	for i := 0; i < len(m.Configs); i++ {

		if swag.IsZero(m.Configs[i]) { // not required
			continue
		}

		if m.Configs[i] != nil {

			if err := m.Configs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *RdsConfigs) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	if err := validate.UniqueItems("ids", "body", m.Ids); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RdsConfigs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RdsConfigs) UnmarshalBinary(b []byte) error {
	var res RdsConfigs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
