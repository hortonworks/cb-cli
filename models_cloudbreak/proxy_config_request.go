// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProxyConfigRequest proxy config request
// swagger:model ProxyConfigRequest

type ProxyConfigRequest struct {

	// description of the resource
	Description string `json:"description,omitempty"`

	// Name of the proxy configuration resource
	// Required: true
	Name *string `json:"name"`

	// Password to use for basic authentication
	Password string `json:"password,omitempty"`

	// determines the protocol (http or https)
	// Required: true
	// Pattern: ^http(s)?$
	Protocol *string `json:"protocol"`

	// host or IP address of proxy server
	// Required: true
	ServerHost *string `json:"serverHost"`

	// port of proxy server (typically: 3128 or 8080)
	// Required: true
	ServerPort *int32 `json:"serverPort"`

	// Username to use for basic authentication
	UserName string `json:"userName,omitempty"`
}

/* polymorph ProxyConfigRequest description false */

/* polymorph ProxyConfigRequest name false */

/* polymorph ProxyConfigRequest password false */

/* polymorph ProxyConfigRequest protocol false */

/* polymorph ProxyConfigRequest serverHost false */

/* polymorph ProxyConfigRequest serverPort false */

/* polymorph ProxyConfigRequest userName false */

// Validate validates this proxy config request
func (m *ProxyConfigRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProxyConfigRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *ProxyConfigRequest) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	if err := validate.Pattern("protocol", "body", string(*m.Protocol), `^http(s)?$`); err != nil {
		return err
	}

	return nil
}

func (m *ProxyConfigRequest) validateServerHost(formats strfmt.Registry) error {

	if err := validate.Required("serverHost", "body", m.ServerHost); err != nil {
		return err
	}

	return nil
}

func (m *ProxyConfigRequest) validateServerPort(formats strfmt.Registry) error {

	if err := validate.Required("serverPort", "body", m.ServerPort); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProxyConfigRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProxyConfigRequest) UnmarshalBinary(b []byte) error {
	var res ProxyConfigRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
