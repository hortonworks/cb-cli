// Code generated by go-swagger; DO NOT EDIT.

package models_cloudbreak

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityGroupResponse security group response
// swagger:model SecurityGroupResponse

type SecurityGroupResponse struct {

	// account id of the resource owner that is provided by OAuth provider
	Account string `json:"account,omitempty"`

	// type of cloud provider
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// id of the resource
	ID int64 `json:"id,omitempty"`

	// name of the resource
	Name string `json:"name,omitempty"`

	// id of the resource owner that is provided by OAuth provider
	Owner string `json:"owner,omitempty"`

	// resource is visible in account
	// Required: true
	PublicInAccount bool `json:"publicInAccount"`

	// Exisiting security group id
	SecurityGroupID string `json:"securityGroupId,omitempty"`

	// list of security rules that relates to the security group
	SecurityRules []*SecurityRuleResponse `json:"securityRules"`
}

/* polymorph SecurityGroupResponse account false */

/* polymorph SecurityGroupResponse cloudPlatform false */

/* polymorph SecurityGroupResponse description false */

/* polymorph SecurityGroupResponse id false */

/* polymorph SecurityGroupResponse name false */

/* polymorph SecurityGroupResponse owner false */

/* polymorph SecurityGroupResponse publicInAccount false */

/* polymorph SecurityGroupResponse securityGroupId false */

/* polymorph SecurityGroupResponse securityRules false */

// Validate validates this security group response
func (m *SecurityGroupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePublicInAccount(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSecurityRules(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityGroupResponse) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupResponse) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupResponse) validatePublicInAccount(formats strfmt.Registry) error {

	if err := validate.Required("publicInAccount", "body", bool(m.PublicInAccount)); err != nil {
		return err
	}

	return nil
}

func (m *SecurityGroupResponse) validateSecurityRules(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityRules) { // not required
		return nil
	}

	for i := 0; i < len(m.SecurityRules); i++ {

		if swag.IsZero(m.SecurityRules[i]) { // not required
			continue
		}

		if m.SecurityRules[i] != nil {

			if err := m.SecurityRules[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("securityRules" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityGroupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityGroupResponse) UnmarshalBinary(b []byte) error {
	var res SecurityGroupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
