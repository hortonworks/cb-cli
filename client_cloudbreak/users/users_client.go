package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new users API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
EvictCurrentUserDetails removes current user from cache

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) EvictCurrentUserDetails(params *EvictCurrentUserDetailsParams) (*EvictCurrentUserDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvictCurrentUserDetailsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "evictCurrentUserDetails",
		Method:             "DELETE",
		PathPattern:        "/users/evict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EvictCurrentUserDetailsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*EvictCurrentUserDetailsOK), nil
}

/*
EvictUserDetails removes user from cache by username

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) EvictUserDetails(params *EvictUserDetailsParams) (*EvictUserDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvictUserDetailsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "evictUserDetails",
		Method:             "PUT",
		PathPattern:        "/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EvictUserDetailsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*EvictUserDetailsOK), nil
}

/*
HasResourcesUser checks that account user has any resources

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) HasResourcesUser(params *HasResourcesUserParams) (*HasResourcesUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHasResourcesUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "hasResourcesUser",
		Method:             "GET",
		PathPattern:        "/users/{id}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &HasResourcesUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*HasResourcesUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
