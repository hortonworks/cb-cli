// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_util

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id util API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id util API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CheckClientVersionV3 checks the client version
*/
func (a *Client) CheckClientVersionV3(params *CheckClientVersionV3Params) (*CheckClientVersionV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckClientVersionV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkClientVersionV3",
		Method:             "GET",
		PathPattern:        "/v3/util/client/{version}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckClientVersionV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckClientVersionV3OK), nil

}

/*
CreateRDSDatabaseUtilV3 creates a database for the service in the r d s if the connection could be created
*/
func (a *Client) CreateRDSDatabaseUtilV3(params *CreateRDSDatabaseUtilV3Params) (*CreateRDSDatabaseUtilV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRDSDatabaseUtilV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRDSDatabaseUtilV3",
		Method:             "POST",
		PathPattern:        "/v3/util/rds-database",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRDSDatabaseUtilV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRDSDatabaseUtilV3OK), nil

}

/*
GetCloudStorageMatrixV3 returns supported cloud storage for stack version

Define stack version at least at patch level eg. 2.6.0
*/
func (a *Client) GetCloudStorageMatrixV3(params *GetCloudStorageMatrixV3Params) (*GetCloudStorageMatrixV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudStorageMatrixV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCloudStorageMatrixV3",
		Method:             "GET",
		PathPattern:        "/v3/util/cloudstoragematrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCloudStorageMatrixV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCloudStorageMatrixV3OK), nil

}

/*
GetStackMatrixUtilV3 returns default ambari details for distinct h d p and h d f
*/
func (a *Client) GetStackMatrixUtilV3(params *GetStackMatrixUtilV3Params) (*GetStackMatrixUtilV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackMatrixUtilV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackMatrixUtilV3",
		Method:             "GET",
		PathPattern:        "/v3/util/stackmatrix",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackMatrixUtilV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackMatrixUtilV3OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
