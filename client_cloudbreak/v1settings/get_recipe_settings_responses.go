// Code generated by go-swagger; DO NOT EDIT.

package v1settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"
)

// GetRecipeSettingsReader is a Reader for the GetRecipeSettings structure.
type GetRecipeSettingsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRecipeSettingsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {

	case 200:
		result := NewGetRecipeSettingsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewGetRecipeSettingsOK creates a GetRecipeSettingsOK with default headers values
func NewGetRecipeSettingsOK() *GetRecipeSettingsOK {
	return &GetRecipeSettingsOK{}
}

/*GetRecipeSettingsOK handles this case with default header values.

successful operation
*/
type GetRecipeSettingsOK struct {
	Payload GetRecipeSettingsOKBody
}

func (o *GetRecipeSettingsOK) Error() string {
	return fmt.Sprintf("[GET /v1/settings/recipe][%d] getRecipeSettingsOK  %+v", 200, o.Payload)
}

func (o *GetRecipeSettingsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetRecipeSettingsOKBody get recipe settings o k body
swagger:model GetRecipeSettingsOKBody
*/

type GetRecipeSettingsOKBody map[string]interface{}

// Validate validates this get recipe settings o k body
func (o GetRecipeSettingsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := validate.Required("getRecipeSettingsOK", "body", o); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
