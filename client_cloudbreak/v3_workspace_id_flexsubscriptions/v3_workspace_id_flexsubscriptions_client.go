// Code generated by go-swagger; DO NOT EDIT.

package v3_workspace_id_flexsubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 workspace id flexsubscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 workspace id flexsubscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateFlexSubscriptionInWorkspace creates flex subscription in workspace

Flex subscriptions could be configured.
*/
func (a *Client) CreateFlexSubscriptionInWorkspace(params *CreateFlexSubscriptionInWorkspaceParams) (*CreateFlexSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlexSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFlexSubscriptionInWorkspace",
		Method:             "POST",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFlexSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFlexSubscriptionInWorkspaceOK), nil

}

/*
DeleteFlexSubscriptionInWorkspace deletes flex subscription by name in workspace

Flex subscriptions could be configured.
*/
func (a *Client) DeleteFlexSubscriptionInWorkspace(params *DeleteFlexSubscriptionInWorkspaceParams) (*DeleteFlexSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlexSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlexSubscriptionInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFlexSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlexSubscriptionInWorkspaceOK), nil

}

/*
GetFlexSubscriptionInWorkspace gets flex subscription by name in workspace

Flex subscriptions could be configured.
*/
func (a *Client) GetFlexSubscriptionInWorkspace(params *GetFlexSubscriptionInWorkspaceParams) (*GetFlexSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlexSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlexSubscriptionInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlexSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlexSubscriptionInWorkspaceOK), nil

}

/*
ListFlexSubscriptionsByWorkspace lists flex subscriptions for the given workspace

Flex subscriptions could be configured.
*/
func (a *Client) ListFlexSubscriptionsByWorkspace(params *ListFlexSubscriptionsByWorkspaceParams) (*ListFlexSubscriptionsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFlexSubscriptionsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFlexSubscriptionsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFlexSubscriptionsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFlexSubscriptionsByWorkspaceOK), nil

}

/*
PutDefaultFlexSubscriptionByNameInWorkspace sets the workspace default flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutDefaultFlexSubscriptionByNameInWorkspace(params *PutDefaultFlexSubscriptionByNameInWorkspaceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDefaultFlexSubscriptionByNameInWorkspaceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDefaultFlexSubscriptionByNameInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDefaultFlexSubscriptionByNameInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutUsedForControllerFlexSubscriptionByNameInWorkspace sets the workspace used for controller flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutUsedForControllerFlexSubscriptionByNameInWorkspace(params *PutUsedForControllerFlexSubscriptionByNameInWorkspaceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsedForControllerFlexSubscriptionByNameInWorkspaceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUsedForControllerFlexSubscriptionByNameInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v3/{workspaceId}/flexsubscriptions/setusedforcontroller/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUsedForControllerFlexSubscriptionByNameInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
