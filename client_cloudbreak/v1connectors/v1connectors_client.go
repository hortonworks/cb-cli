// Code generated by go-swagger; DO NOT EDIT.

package v1connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1connectors API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1connectors API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRecommendation creates a recommendation that advises cloud resources for the given blueprint

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) CreateRecommendation(params *CreateRecommendationParams) (*CreateRecommendationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecommendationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRecommendation",
		Method:             "POST",
		PathPattern:        "/v1/connectors/recommendation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRecommendationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRecommendationOK), nil

}

/*
GetAccessConfigs retrives access configs with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetAccessConfigs(params *GetAccessConfigsParams) (*GetAccessConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessConfigs",
		Method:             "POST",
		PathPattern:        "/v1/connectors/accessconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccessConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessConfigsOK), nil

}

/*
GetDisktypeByType retrives disks by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetDisktypeByType(params *GetDisktypeByTypeParams) (*GetDisktypeByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisktypeByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDisktypeByType",
		Method:             "GET",
		PathPattern:        "/v1/connectors/disktypes/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDisktypeByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisktypeByTypeOK), nil

}

/*
GetDisktypes retrives available disk types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetDisktypes(params *GetDisktypesParams) (*GetDisktypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisktypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDisktypes",
		Method:             "GET",
		PathPattern:        "/v1/connectors/disktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDisktypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisktypesOK), nil

}

/*
GetEncryptionKeys retrives encryption keys with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetEncryptionKeys(params *GetEncryptionKeysParams) (*GetEncryptionKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEncryptionKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEncryptionKeys",
		Method:             "POST",
		PathPattern:        "/v1/connectors/encryptionkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEncryptionKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEncryptionKeysOK), nil

}

/*
GetGatewaysCredentialID retrives gateways with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetGatewaysCredentialID(params *GetGatewaysCredentialIDParams) (*GetGatewaysCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewaysCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewaysCredentialId",
		Method:             "POST",
		PathPattern:        "/v1/connectors/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGatewaysCredentialIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGatewaysCredentialIDOK), nil

}

/*
GetIPPoolsCredentialID retrives ip pools with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetIPPoolsCredentialID(params *GetIPPoolsCredentialIDParams) (*GetIPPoolsCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPPoolsCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIpPoolsCredentialId",
		Method:             "POST",
		PathPattern:        "/v1/connectors/ippools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPPoolsCredentialIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPPoolsCredentialIDOK), nil

}

/*
GetOchestratorsByType retrives orchestrators by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetOchestratorsByType(params *GetOchestratorsByTypeParams) (*GetOchestratorsByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOchestratorsByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOchestratorsByType",
		Method:             "GET",
		PathPattern:        "/v1/connectors/ochestrators/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOchestratorsByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOchestratorsByTypeOK), nil

}

/*
GetOrchestratortypes retrives available orchestrator types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetOrchestratortypes(params *GetOrchestratortypesParams) (*GetOrchestratortypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrchestratortypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getOrchestratortypes",
		Method:             "GET",
		PathPattern:        "/v1/connectors/ochestrators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrchestratortypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrchestratortypesOK), nil

}

/*
GetPlatformNetworks retrives network properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformNetworks(params *GetPlatformNetworksParams) (*GetPlatformNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformNetworks",
		Method:             "POST",
		PathPattern:        "/v1/connectors/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformNetworksOK), nil

}

/*
GetPlatformSShKeys retrives sshkeys properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformSShKeys(params *GetPlatformSShKeysParams) (*GetPlatformSShKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformSShKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformSShKeys",
		Method:             "POST",
		PathPattern:        "/v1/connectors/sshkeys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformSShKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformSShKeysOK), nil

}

/*
GetPlatformSecurityGroups retrives securitygroups properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformSecurityGroups(params *GetPlatformSecurityGroupsParams) (*GetPlatformSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformSecurityGroups",
		Method:             "POST",
		PathPattern:        "/v1/connectors/securitygroups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformSecurityGroupsOK), nil

}

/*
GetPlatformVariantByType retrives a platform variant by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformVariantByType(params *GetPlatformVariantByTypeParams) (*GetPlatformVariantByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformVariantByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformVariantByType",
		Method:             "GET",
		PathPattern:        "/v1/connectors/variants/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformVariantByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformVariantByTypeOK), nil

}

/*
GetPlatformVariants retrives available platform variants

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformVariants(params *GetPlatformVariantsParams) (*GetPlatformVariantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformVariantsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformVariants",
		Method:             "GET",
		PathPattern:        "/v1/connectors/variants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformVariantsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformVariantsOK), nil

}

/*
GetPlatforms retrives available platforms

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatforms(params *GetPlatformsParams) (*GetPlatformsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatforms",
		Method:             "GET",
		PathPattern:        "/v1/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformsOK), nil

}

/*
GetRegionAvByType retrives availability zones by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegionAvByType(params *GetRegionAvByTypeParams) (*GetRegionAvByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionAvByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegionAvByType",
		Method:             "GET",
		PathPattern:        "/v1/connectors/regions/av/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionAvByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionAvByTypeOK), nil

}

/*
GetRegionRByType retrives regions by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegionRByType(params *GetRegionRByTypeParams) (*GetRegionRByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionRByTypeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegionRByType",
		Method:             "GET",
		PathPattern:        "/v1/connectors/regions/r/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionRByTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionRByTypeOK), nil

}

/*
GetRegions retrives available regions

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegions(params *GetRegionsParams) (*GetRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegions",
		Method:             "GET",
		PathPattern:        "/v1/connectors/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsOK), nil

}

/*
GetSpecialProperties retrives special properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetSpecialProperties(params *GetSpecialPropertiesParams) (*GetSpecialPropertiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSpecialPropertiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSpecialProperties",
		Method:             "POST",
		PathPattern:        "/v1/connectors/custom",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSpecialPropertiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSpecialPropertiesOK), nil

}

/*
GetTagSpecifications retrives tag specifications

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetTagSpecifications(params *GetTagSpecificationsParams) (*GetTagSpecificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagSpecificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTagSpecifications",
		Method:             "GET",
		PathPattern:        "/v1/connectors/tagspecifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagSpecificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTagSpecificationsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
