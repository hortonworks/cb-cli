// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_ldapconfigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id ldapconfigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id ldapconfigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateLdapConfigsInOrganization creates l d a p config in organization

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) CreateLdapConfigsInOrganization(params *CreateLdapConfigsInOrganizationParams) (*CreateLdapConfigsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLdapConfigsInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLdapConfigsInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/ldapconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateLdapConfigsInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLdapConfigsInOrganizationOK), nil

}

/*
DeleteLdapConfigsInOrganization deletes l d a p config by name in organization

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) DeleteLdapConfigsInOrganization(params *DeleteLdapConfigsInOrganizationParams) (*DeleteLdapConfigsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapConfigsInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLdapConfigsInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/ldapconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapConfigsInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteLdapConfigsInOrganizationOK), nil

}

/*
GetLdapConfigInOrganization gets l d a p config by name in organization

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapConfigInOrganization(params *GetLdapConfigInOrganizationParams) (*GetLdapConfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapConfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLdapConfigInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/ldapconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapConfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapConfigInOrganizationOK), nil

}

/*
ListLdapsByOrganization lists l d a p configs for the given organization

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) ListLdapsByOrganization(params *ListLdapsByOrganizationParams) (*ListLdapsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListLdapsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listLdapsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/ldapconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListLdapsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListLdapsByOrganizationOK), nil

}

/*
PostLdapConnectionTestInOrganization tests that the connection could be established of an existing or new l d a p config
*/
func (a *Client) PostLdapConnectionTestInOrganization(params *PostLdapConnectionTestInOrganizationParams) (*PostLdapConnectionTestInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapConnectionTestInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postLdapConnectionTestInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/ldapconfigs/testconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapConnectionTestInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapConnectionTestInOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
