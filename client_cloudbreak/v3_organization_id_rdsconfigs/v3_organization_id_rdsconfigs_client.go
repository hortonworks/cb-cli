// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_rdsconfigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id rdsconfigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id rdsconfigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateRdsConfigInOrganization creates r d s config in organization

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) CreateRdsConfigInOrganization(params *CreateRdsConfigInOrganizationParams) (*CreateRdsConfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRdsConfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRdsConfigInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/rdsconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRdsConfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRdsConfigInOrganizationOK), nil

}

/*
DeleteRdsConfigInOrganization deletes r d s config by name in organization

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) DeleteRdsConfigInOrganization(params *DeleteRdsConfigInOrganizationParams) (*DeleteRdsConfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRdsConfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRdsConfigInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/rdsconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRdsConfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteRdsConfigInOrganizationOK), nil

}

/*
GetRdsConfigInOrganization gets r d s config by name in organization

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetRdsConfigInOrganization(params *GetRdsConfigInOrganizationParams) (*GetRdsConfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRdsConfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRdsConfigInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/rdsconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRdsConfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRdsConfigInOrganizationOK), nil

}

/*
GetRdsRequestFromNameInOrganization gets request in organization

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetRdsRequestFromNameInOrganization(params *GetRdsRequestFromNameInOrganizationParams) (*GetRdsRequestFromNameInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRdsRequestFromNameInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRdsRequestFromNameInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/rdsconfigs/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRdsRequestFromNameInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRdsRequestFromNameInOrganizationOK), nil

}

/*
ListRdsConfigsByOrganization lists r d s configs for the given organization

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) ListRdsConfigsByOrganization(params *ListRdsConfigsByOrganizationParams) (*ListRdsConfigsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRdsConfigsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRdsConfigsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/rdsconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRdsConfigsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRdsConfigsByOrganizationOK), nil

}

/*
TestRdsConnectionInOrganization tests r d s connectivity

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) TestRdsConnectionInOrganization(params *TestRdsConnectionInOrganizationParams) (*TestRdsConnectionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestRdsConnectionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testRdsConnectionInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/rdsconfigs/testconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestRdsConnectionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestRdsConnectionInOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
