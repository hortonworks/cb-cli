package clustertemplates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new clustertemplates API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for clustertemplates API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteClustertemplatesAccountName deletes public owned or private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeleteClustertemplatesAccountName(params *DeleteClustertemplatesAccountNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustertemplatesAccountNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteClustertemplatesAccountName",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClustertemplatesAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteClustertemplatesID deletes cluster template by id

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeleteClustertemplatesID(params *DeleteClustertemplatesIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustertemplatesIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteClustertemplatesID",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClustertemplatesIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteClustertemplatesUserName deletes private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) DeleteClustertemplatesUserName(params *DeleteClustertemplatesUserNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClustertemplatesUserNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteClustertemplatesUserName",
		Method:             "DELETE",
		PathPattern:        "/clustertemplates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClustertemplatesUserNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetClustertemplatesAccount retrieves public and private owned cluster template

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClustertemplatesAccount(params *GetClustertemplatesAccountParams) (*GetClustertemplatesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustertemplatesAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetClustertemplatesAccount",
		Method:             "GET",
		PathPattern:        "/clustertemplates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustertemplatesAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustertemplatesAccountOK), nil
}

/*
GetClustertemplatesAccountName retrieves a public or private owned cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClustertemplatesAccountName(params *GetClustertemplatesAccountNameParams) (*GetClustertemplatesAccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustertemplatesAccountNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetClustertemplatesAccountName",
		Method:             "GET",
		PathPattern:        "/clustertemplates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustertemplatesAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustertemplatesAccountNameOK), nil
}

/*
GetClustertemplatesID retrieves cluster template by id

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClustertemplatesID(params *GetClustertemplatesIDParams) (*GetClustertemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustertemplatesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetClustertemplatesID",
		Method:             "GET",
		PathPattern:        "/clustertemplates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustertemplatesIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustertemplatesIDOK), nil
}

/*
GetClustertemplatesUser retrieves private cluster templates

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClustertemplatesUser(params *GetClustertemplatesUserParams) (*GetClustertemplatesUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustertemplatesUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetClustertemplatesUser",
		Method:             "GET",
		PathPattern:        "/clustertemplates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustertemplatesUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustertemplatesUserOK), nil
}

/*
GetClustertemplatesUserName retrieves a private cluster template by name

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) GetClustertemplatesUserName(params *GetClustertemplatesUserNameParams) (*GetClustertemplatesUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustertemplatesUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetClustertemplatesUserName",
		Method:             "GET",
		PathPattern:        "/clustertemplates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustertemplatesUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustertemplatesUserNameOK), nil
}

/*
PostClustertemplatesAccount creates cluster template as public resource

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) PostClustertemplatesAccount(params *PostClustertemplatesAccountParams) (*PostClustertemplatesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustertemplatesAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostClustertemplatesAccount",
		Method:             "POST",
		PathPattern:        "/clustertemplates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostClustertemplatesAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustertemplatesAccountOK), nil
}

/*
PostClustertemplatesUser creates cluster template as private resource

Cluster templates are stored cluster configurations, which configurations are reusable any time
*/
func (a *Client) PostClustertemplatesUser(params *PostClustertemplatesUserParams) (*PostClustertemplatesUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostClustertemplatesUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostClustertemplatesUser",
		Method:             "POST",
		PathPattern:        "/clustertemplates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostClustertemplatesUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostClustertemplatesUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
