// Code generated by go-swagger; DO NOT EDIT.

package v1rdsconfigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1rdsconfigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1rdsconfigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePrivateRds deletes private r d s configuration by name

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) DeletePrivateRds(params *DeletePrivateRdsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateRdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateRds",
		Method:             "DELETE",
		PathPattern:        "/v1/rdsconfigs/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePublicRds deletes public owned or private r d s configuration by name

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) DeletePublicRds(params *DeletePublicRdsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicRdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicRds",
		Method:             "DELETE",
		PathPattern:        "/v1/rdsconfigs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteRds deletes r d s configuration by id

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) DeleteRds(params *DeleteRdsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRdsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRds",
		Method:             "DELETE",
		PathPattern:        "/v1/rdsconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPrivateRds retrieves a private r d s configuration by name

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetPrivateRds(params *GetPrivateRdsParams) (*GetPrivateRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateRds",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateRdsOK), nil

}

/*
GetPrivatesRds retrieves private r d s configurations

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetPrivatesRds(params *GetPrivatesRdsParams) (*GetPrivatesRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivatesRds",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesRdsOK), nil

}

/*
GetPublicRds retrieves a public or private owned r d s configuration by name

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetPublicRds(params *GetPublicRdsParams) (*GetPublicRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicRds",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicRdsOK), nil

}

/*
GetPublicsRds retrieves public and private owned r d s configurations

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetPublicsRds(params *GetPublicsRdsParams) (*GetPublicsRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsRds",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsRdsOK), nil

}

/*
GetRds retrieves r d s configuration by id

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetRds(params *GetRdsParams) (*GetRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRds",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRdsOK), nil

}

/*
GetRdsRequestFromName gets request

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) GetRdsRequestFromName(params *GetRdsRequestFromNameParams) (*GetRdsRequestFromNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRdsRequestFromNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRdsRequestFromName",
		Method:             "GET",
		PathPattern:        "/v1/rdsconfigs/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRdsRequestFromNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRdsRequestFromNameOK), nil

}

/*
PostPrivateRds creates r d s configuration as private resource

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) PostPrivateRds(params *PostPrivateRdsParams) (*PostPrivateRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateRds",
		Method:             "POST",
		PathPattern:        "/v1/rdsconfigs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateRdsOK), nil

}

/*
PostPublicRds creates r d s configuration as public resource

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) PostPublicRds(params *PostPublicRdsParams) (*PostPublicRdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicRdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicRds",
		Method:             "POST",
		PathPattern:        "/v1/rdsconfigs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicRdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicRdsOK), nil

}

/*
TestRdsConnection tests r d s connectivity

An RDS Configuration describe a connection to an external Relational Database Service that can be used as the Hive Metastore.
*/
func (a *Client) TestRdsConnection(params *TestRdsConnectionParams) (*TestRdsConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestRdsConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testRdsConnection",
		Method:             "POST",
		PathPattern:        "/v1/rdsconfigs/testconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestRdsConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestRdsConnectionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
