// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_audits

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id audits API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id audits API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAuditEventByOrganization gets audit event in organization

Audit event operations
*/
func (a *Client) GetAuditEventByOrganization(params *GetAuditEventByOrganizationParams) (*GetAuditEventByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditEventByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditEventByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/audits/event/{auditId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuditEventByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditEventByOrganizationOK), nil

}

/*
GetAuditEventsInOrganization lists audit events for the given organization

Audit event operations
*/
func (a *Client) GetAuditEventsInOrganization(params *GetAuditEventsInOrganizationParams) (*GetAuditEventsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditEventsInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditEventsInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/audits/events/{resourceType}/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuditEventsInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAuditEventsInOrganizationOK), nil

}

/*
GetAuditEventsZipInOrganization lists audit events for the given organization in zip file

Audit event operations
*/
func (a *Client) GetAuditEventsZipInOrganization(params *GetAuditEventsZipInOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAuditEventsZipInOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAuditEventsZipInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/audits/events/zip/{resourceType}/{resourceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAuditEventsZipInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
