package flexsubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new flexsubscriptions API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flexsubscriptions API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetFlexsubscriptionsUserName retrieves a private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) GetFlexsubscriptionsUserName(params *GetFlexsubscriptionsUserNameParams) (*GetFlexsubscriptionsUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlexsubscriptionsUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetFlexsubscriptionsUserName",
		Method:             "GET",
		PathPattern:        "/flexsubscriptions/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlexsubscriptionsUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlexsubscriptionsUserNameOK), nil
}

/*
DeleteFlexSubscriptionByID deletes flex subscription by id

Flex subscriptions could be configured.
*/
func (a *Client) DeleteFlexSubscriptionByID(params *DeleteFlexSubscriptionByIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlexSubscriptionByIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deleteFlexSubscriptionById",
		Method:             "DELETE",
		PathPattern:        "/flexsubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFlexSubscriptionByIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeletePublicFlexSubscriptionByName deletes public owned or private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) DeletePublicFlexSubscriptionByName(params *DeletePublicFlexSubscriptionByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicFlexSubscriptionByNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "deletePublicFlexSubscriptionByName",
		Method:             "DELETE",
		PathPattern:        "/flexsubscriptions/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicFlexSubscriptionByNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetFlexSubscriptionByID retrieves flex subscription by id

Flex subscriptions could be configured.
*/
func (a *Client) GetFlexSubscriptionByID(params *GetFlexSubscriptionByIDParams) (*GetFlexSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlexSubscriptionByIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getFlexSubscriptionById",
		Method:             "GET",
		PathPattern:        "/flexsubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlexSubscriptionByIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlexSubscriptionByIDOK), nil
}

/*
GetPrivateFlexSubscriptionByName deletes private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) GetPrivateFlexSubscriptionByName(params *GetPrivateFlexSubscriptionByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateFlexSubscriptionByNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivateFlexSubscriptionByName",
		Method:             "DELETE",
		PathPattern:        "/flexsubscriptions/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateFlexSubscriptionByNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetPrivateFlexSubscriptions retrieves private flex subscriptions

Flex subscriptions could be configured.
*/
func (a *Client) GetPrivateFlexSubscriptions(params *GetPrivateFlexSubscriptionsParams) (*GetPrivateFlexSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateFlexSubscriptionsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPrivateFlexSubscriptions",
		Method:             "GET",
		PathPattern:        "/flexsubscriptions/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateFlexSubscriptionsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateFlexSubscriptionsOK), nil
}

/*
GetPublicFlexSubscriptionByName retrieves a public or private owned flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) GetPublicFlexSubscriptionByName(params *GetPublicFlexSubscriptionByNameParams) (*GetPublicFlexSubscriptionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicFlexSubscriptionByNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicFlexSubscriptionByName",
		Method:             "GET",
		PathPattern:        "/flexsubscriptions/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicFlexSubscriptionByNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicFlexSubscriptionByNameOK), nil
}

/*
GetPublicFlexSubscriptions retrieves public and private owned flex subscriptions

Flex subscriptions could be configured.
*/
func (a *Client) GetPublicFlexSubscriptions(params *GetPublicFlexSubscriptionsParams) (*GetPublicFlexSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicFlexSubscriptionsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPublicFlexSubscriptions",
		Method:             "GET",
		PathPattern:        "/flexsubscriptions/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicFlexSubscriptionsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicFlexSubscriptionsOK), nil
}

/*
PostPrivateFlexSubscription creates flex subscription as private resource

Flex subscriptions could be configured.
*/
func (a *Client) PostPrivateFlexSubscription(params *PostPrivateFlexSubscriptionParams) (*PostPrivateFlexSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateFlexSubscriptionParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPrivateFlexSubscription",
		Method:             "POST",
		PathPattern:        "/flexsubscriptions/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateFlexSubscriptionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateFlexSubscriptionOK), nil
}

/*
PostPublicFlexSubscription creates flex subscription as public resource

Flex subscriptions could be configured.
*/
func (a *Client) PostPublicFlexSubscription(params *PostPublicFlexSubscriptionParams) (*PostPublicFlexSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicFlexSubscriptionParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "postPublicFlexSubscription",
		Method:             "POST",
		PathPattern:        "/flexsubscriptions/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicFlexSubscriptionReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicFlexSubscriptionOK), nil
}

/*
PutPublicDefaultFlexSubscriptionByName sets the account default flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutPublicDefaultFlexSubscriptionByName(params *PutPublicDefaultFlexSubscriptionByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicDefaultFlexSubscriptionByNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "putPublicDefaultFlexSubscriptionByName",
		Method:             "PUT",
		PathPattern:        "/flexsubscriptions/account/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicDefaultFlexSubscriptionByNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
