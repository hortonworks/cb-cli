// Code generated by go-swagger; DO NOT EDIT.

package v1clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteClusterParams creates a new DeleteClusterParams object
// with the default values initialized.
func NewDeleteClusterParams() *DeleteClusterParams {
	var (
		deleteDependenciesDefault = bool(false)
		withStackDeleteDefault    = bool(false)
	)
	return &DeleteClusterParams{
		DeleteDependencies: &deleteDependenciesDefault,
		WithStackDelete:    &withStackDeleteDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteClusterParamsWithTimeout creates a new DeleteClusterParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteClusterParamsWithTimeout(timeout time.Duration) *DeleteClusterParams {
	var (
		deleteDependenciesDefault = bool(false)
		withStackDeleteDefault    = bool(false)
	)
	return &DeleteClusterParams{
		DeleteDependencies: &deleteDependenciesDefault,
		WithStackDelete:    &withStackDeleteDefault,

		timeout: timeout,
	}
}

// NewDeleteClusterParamsWithContext creates a new DeleteClusterParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteClusterParamsWithContext(ctx context.Context) *DeleteClusterParams {
	var (
		deleteDependenciesDefault = bool(false)
		withStackDeleteDefault    = bool(false)
	)
	return &DeleteClusterParams{
		DeleteDependencies: &deleteDependenciesDefault,
		WithStackDelete:    &withStackDeleteDefault,

		Context: ctx,
	}
}

// NewDeleteClusterParamsWithHTTPClient creates a new DeleteClusterParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteClusterParamsWithHTTPClient(client *http.Client) *DeleteClusterParams {
	var (
		deleteDependenciesDefault = bool(false)
		withStackDeleteDefault    = bool(false)
	)
	return &DeleteClusterParams{
		DeleteDependencies: &deleteDependenciesDefault,
		WithStackDelete:    &withStackDeleteDefault,
		HTTPClient:         client,
	}
}

/*DeleteClusterParams contains all the parameters to send to the API endpoint
for the delete cluster operation typically these are written to a http.Request
*/
type DeleteClusterParams struct {

	/*DeleteDependencies*/
	DeleteDependencies *bool
	/*ID*/
	ID int64
	/*WithStackDelete*/
	WithStackDelete *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete cluster params
func (o *DeleteClusterParams) WithTimeout(timeout time.Duration) *DeleteClusterParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete cluster params
func (o *DeleteClusterParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete cluster params
func (o *DeleteClusterParams) WithContext(ctx context.Context) *DeleteClusterParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete cluster params
func (o *DeleteClusterParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete cluster params
func (o *DeleteClusterParams) WithHTTPClient(client *http.Client) *DeleteClusterParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete cluster params
func (o *DeleteClusterParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDeleteDependencies adds the deleteDependencies to the delete cluster params
func (o *DeleteClusterParams) WithDeleteDependencies(deleteDependencies *bool) *DeleteClusterParams {
	o.SetDeleteDependencies(deleteDependencies)
	return o
}

// SetDeleteDependencies adds the deleteDependencies to the delete cluster params
func (o *DeleteClusterParams) SetDeleteDependencies(deleteDependencies *bool) {
	o.DeleteDependencies = deleteDependencies
}

// WithID adds the id to the delete cluster params
func (o *DeleteClusterParams) WithID(id int64) *DeleteClusterParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the delete cluster params
func (o *DeleteClusterParams) SetID(id int64) {
	o.ID = id
}

// WithWithStackDelete adds the withStackDelete to the delete cluster params
func (o *DeleteClusterParams) WithWithStackDelete(withStackDelete *bool) *DeleteClusterParams {
	o.SetWithStackDelete(withStackDelete)
	return o
}

// SetWithStackDelete adds the withStackDelete to the delete cluster params
func (o *DeleteClusterParams) SetWithStackDelete(withStackDelete *bool) {
	o.WithStackDelete = withStackDelete
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteClusterParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DeleteDependencies != nil {

		// query param deleteDependencies
		var qrDeleteDependencies bool
		if o.DeleteDependencies != nil {
			qrDeleteDependencies = *o.DeleteDependencies
		}
		qDeleteDependencies := swag.FormatBool(qrDeleteDependencies)
		if qDeleteDependencies != "" {
			if err := r.SetQueryParam("deleteDependencies", qDeleteDependencies); err != nil {
				return err
			}
		}

	}

	// path param id
	if err := r.SetPathParam("id", swag.FormatInt64(o.ID)); err != nil {
		return err
	}

	if o.WithStackDelete != nil {

		// query param withStackDelete
		var qrWithStackDelete bool
		if o.WithStackDelete != nil {
			qrWithStackDelete = *o.WithStackDelete
		}
		qWithStackDelete := swag.FormatBool(qrWithStackDelete)
		if qWithStackDelete != "" {
			if err := r.SetQueryParam("withStackDelete", qWithStackDelete); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
