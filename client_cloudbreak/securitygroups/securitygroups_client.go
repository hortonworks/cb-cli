package securitygroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new securitygroups API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for securitygroups API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteSecuritygroupsAccountName deletes public owned or private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeleteSecuritygroupsAccountName(params *DeleteSecuritygroupsAccountNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecuritygroupsAccountNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSecuritygroupsAccountName",
		Method:             "DELETE",
		PathPattern:        "/securitygroups/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSecuritygroupsAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteSecuritygroupsID deletes security group by id

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeleteSecuritygroupsID(params *DeleteSecuritygroupsIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecuritygroupsIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSecuritygroupsID",
		Method:             "DELETE",
		PathPattern:        "/securitygroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSecuritygroupsIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteSecuritygroupsUserName deletes private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeleteSecuritygroupsUserName(params *DeleteSecuritygroupsUserNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecuritygroupsUserNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSecuritygroupsUserName",
		Method:             "DELETE",
		PathPattern:        "/securitygroups/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSecuritygroupsUserNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetSecuritygroupsAccount retrieves public and private owned security groups

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecuritygroupsAccount(params *GetSecuritygroupsAccountParams) (*GetSecuritygroupsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritygroupsAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSecuritygroupsAccount",
		Method:             "GET",
		PathPattern:        "/securitygroups/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritygroupsAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecuritygroupsAccountOK), nil
}

/*
GetSecuritygroupsAccountName retrieves a public or private owned security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecuritygroupsAccountName(params *GetSecuritygroupsAccountNameParams) (*GetSecuritygroupsAccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritygroupsAccountNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSecuritygroupsAccountName",
		Method:             "GET",
		PathPattern:        "/securitygroups/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritygroupsAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecuritygroupsAccountNameOK), nil
}

/*
GetSecuritygroupsID retrieves security group by id

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecuritygroupsID(params *GetSecuritygroupsIDParams) (*GetSecuritygroupsIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritygroupsIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSecuritygroupsID",
		Method:             "GET",
		PathPattern:        "/securitygroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritygroupsIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecuritygroupsIDOK), nil
}

/*
GetSecuritygroupsUser retrieves private security groups

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecuritygroupsUser(params *GetSecuritygroupsUserParams) (*GetSecuritygroupsUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritygroupsUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSecuritygroupsUser",
		Method:             "GET",
		PathPattern:        "/securitygroups/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritygroupsUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecuritygroupsUserOK), nil
}

/*
GetSecuritygroupsUserName retrieves a private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecuritygroupsUserName(params *GetSecuritygroupsUserNameParams) (*GetSecuritygroupsUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecuritygroupsUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSecuritygroupsUserName",
		Method:             "GET",
		PathPattern:        "/securitygroups/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecuritygroupsUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecuritygroupsUserNameOK), nil
}

/*
PostSecuritygroupsAccount creates security group as public resource

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) PostSecuritygroupsAccount(params *PostSecuritygroupsAccountParams) (*PostSecuritygroupsAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecuritygroupsAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostSecuritygroupsAccount",
		Method:             "POST",
		PathPattern:        "/securitygroups/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSecuritygroupsAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSecuritygroupsAccountOK), nil
}

/*
PostSecuritygroupsUser creates security group as private resource

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) PostSecuritygroupsUser(params *PostSecuritygroupsUserParams) (*PostSecuritygroupsUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSecuritygroupsUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostSecuritygroupsUser",
		Method:             "POST",
		PathPattern:        "/securitygroups/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSecuritygroupsUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSecuritygroupsUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
