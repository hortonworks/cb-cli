// Code generated by go-swagger; DO NOT EDIT.

package v1recipes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1recipes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1recipes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePrivateRecipe deletes private recipe by name

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) DeletePrivateRecipe(params *DeletePrivateRecipeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateRecipeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateRecipe",
		Method:             "DELETE",
		PathPattern:        "/v1/recipes/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePublicRecipe deletes public owned or private recipe by name

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) DeletePublicRecipe(params *DeletePublicRecipeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicRecipeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicRecipe",
		Method:             "DELETE",
		PathPattern:        "/v1/recipes/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteRecipe deletes recipe by id

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) DeleteRecipe(params *DeleteRecipeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteRecipeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteRecipe",
		Method:             "DELETE",
		PathPattern:        "/v1/recipes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPrivateRecipe retrieves a private recipe by name

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetPrivateRecipe(params *GetPrivateRecipeParams) (*GetPrivateRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateRecipe",
		Method:             "GET",
		PathPattern:        "/v1/recipes/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateRecipeOK), nil

}

/*
GetPrivatesRecipe retrieves private recipes

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetPrivatesRecipe(params *GetPrivatesRecipeParams) (*GetPrivatesRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivatesRecipe",
		Method:             "GET",
		PathPattern:        "/v1/recipes/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesRecipeOK), nil

}

/*
GetPublicRecipe retrieves a public or private owned recipe by name

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetPublicRecipe(params *GetPublicRecipeParams) (*GetPublicRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicRecipe",
		Method:             "GET",
		PathPattern:        "/v1/recipes/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicRecipeOK), nil

}

/*
GetPublicsRecipe retrieves public and private owned recipes

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetPublicsRecipe(params *GetPublicsRecipeParams) (*GetPublicsRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsRecipe",
		Method:             "GET",
		PathPattern:        "/v1/recipes/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsRecipeOK), nil

}

/*
GetRecipe retrieves recipe by id

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetRecipe(params *GetRecipeParams) (*GetRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipe",
		Method:             "GET",
		PathPattern:        "/v1/recipes/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeOK), nil

}

/*
GetRecipeRequestFromName retrieves recipe request by recipe name

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) GetRecipeRequestFromName(params *GetRecipeRequestFromNameParams) (*GetRecipeRequestFromNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeRequestFromNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipeRequestFromName",
		Method:             "GET",
		PathPattern:        "/v1/recipes/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRecipeRequestFromNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeRequestFromNameOK), nil

}

/*
PostPrivateRecipe creates recipe as private resource

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) PostPrivateRecipe(params *PostPrivateRecipeParams) (*PostPrivateRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateRecipe",
		Method:             "POST",
		PathPattern:        "/v1/recipes/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateRecipeOK), nil

}

/*
PostPublicRecipe creates recipe as public resource

Recipes are basically script extensions to a cluster that run on a set of nodes before or after the Ambari cluster installation.
*/
func (a *Client) PostPublicRecipe(params *PostPublicRecipeParams) (*PostPublicRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicRecipe",
		Method:             "POST",
		PathPattern:        "/v1/recipes/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicRecipeOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
