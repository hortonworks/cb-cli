package usages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new usages API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for usages API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetAccount retrieves public and private owned usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetAccount(params *GetAccountParams) (*GetAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getAccount",
		Method:             "GET",
		PathPattern:        "/usages/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountOK), nil
}

/*
GetDeployer retrieves usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetDeployer(params *GetDeployerParams) (*GetDeployerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeployerParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getDeployer",
		Method:             "GET",
		PathPattern:        "/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeployerReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeployerOK), nil
}

/*
GetUser retrieves private usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetUser(params *GetUserParams) (*GetUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getUser",
		Method:             "GET",
		PathPattern:        "/usages/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
