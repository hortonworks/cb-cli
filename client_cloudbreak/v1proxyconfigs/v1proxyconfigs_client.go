// Code generated by go-swagger; DO NOT EDIT.

package v1proxyconfigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1proxyconfigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1proxyconfigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePrivateProxyConfig deletes private proxy configuration by name

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeletePrivateProxyConfig(params *DeletePrivateProxyConfigParams) (*DeletePrivateProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateProxyConfig",
		Method:             "DELETE",
		PathPattern:        "/v1/proxyconfigs/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePrivateProxyConfigOK), nil

}

/*
DeleteProxyConfig deletes proxy configuration by id

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeleteProxyConfig(params *DeleteProxyConfigParams) (*DeleteProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxyConfig",
		Method:             "DELETE",
		PathPattern:        "/v1/proxyconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProxyConfigOK), nil

}

/*
DeletePublicProxyConfig deletes public owned or private proxy configuration by name

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeletePublicProxyConfig(params *DeletePublicProxyConfigParams) (*DeletePublicProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicProxyConfig",
		Method:             "DELETE",
		PathPattern:        "/v1/proxyconfigs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePublicProxyConfigOK), nil

}

/*
GetPrivateProxyConfig retrieves a private proxy configuration by name

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetPrivateProxyConfig(params *GetPrivateProxyConfigParams) (*GetPrivateProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateProxyConfig",
		Method:             "GET",
		PathPattern:        "/v1/proxyconfigs/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateProxyConfigOK), nil

}

/*
GetPrivatesProxyConfig retrieves private proxy configurations

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetPrivatesProxyConfig(params *GetPrivatesProxyConfigParams) (*GetPrivatesProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivatesProxyConfig",
		Method:             "GET",
		PathPattern:        "/v1/proxyconfigs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesProxyConfigOK), nil

}

/*
GetProxyConfig retrieves proxy configuration by id

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetProxyConfig(params *GetProxyConfigParams) (*GetProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyConfig",
		Method:             "GET",
		PathPattern:        "/v1/proxyconfigs/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxyConfigOK), nil

}

/*
GetPublicProxyConfig retrieves a public or private owned proxy configuration by name

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetPublicProxyConfig(params *GetPublicProxyConfigParams) (*GetPublicProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicProxyConfig",
		Method:             "GET",
		PathPattern:        "/v1/proxyconfigs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicProxyConfigOK), nil

}

/*
GetPublicsProxyConfig retrieves public and private owned proxy configurations

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetPublicsProxyConfig(params *GetPublicsProxyConfigParams) (*GetPublicsProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsProxyConfig",
		Method:             "GET",
		PathPattern:        "/v1/proxyconfigs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsProxyConfigOK), nil

}

/*
PostPrivateProxyConfig creates proxy configuration as private resource

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) PostPrivateProxyConfig(params *PostPrivateProxyConfigParams) (*PostPrivateProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateProxyConfig",
		Method:             "POST",
		PathPattern:        "/v1/proxyconfigs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateProxyConfigOK), nil

}

/*
PostPublicProxyConfig creates proxy configuration as public resource

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) PostPublicProxyConfig(params *PostPublicProxyConfigParams) (*PostPublicProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicProxyConfig",
		Method:             "POST",
		PathPattern:        "/v1/proxyconfigs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicProxyConfigOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
