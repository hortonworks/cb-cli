// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_smartsensesubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id smartsensesubscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id smartsensesubscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSmartSenseSubscriptionInOrganization creates smart sense subscription in organization

SmartSense subscriptions could be configured.
*/
func (a *Client) CreateSmartSenseSubscriptionInOrganization(params *CreateSmartSenseSubscriptionInOrganizationParams) (*CreateSmartSenseSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmartSenseSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmartSenseSubscriptionInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/smartsensesubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSmartSenseSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSmartSenseSubscriptionInOrganizationOK), nil

}

/*
DeleteSmartSenseSubscriptionInOrganization deletes smart sense subscription by name in organization

SmartSense subscriptions could be configured.
*/
func (a *Client) DeleteSmartSenseSubscriptionInOrganization(params *DeleteSmartSenseSubscriptionInOrganizationParams) (*DeleteSmartSenseSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmartSenseSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmartSenseSubscriptionInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/smartsensesubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSmartSenseSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmartSenseSubscriptionInOrganizationOK), nil

}

/*
GetSmartSenseSubscriptionInOrganization gets smart sense subscription by name in organization

SmartSense subscriptions could be configured.
*/
func (a *Client) GetSmartSenseSubscriptionInOrganization(params *GetSmartSenseSubscriptionInOrganizationParams) (*GetSmartSenseSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmartSenseSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmartSenseSubscriptionInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/smartsensesubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSmartSenseSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmartSenseSubscriptionInOrganizationOK), nil

}

/*
ListSmartSenseSubscriptionsByOrganization lists smart sense subscriptions for the given organization

SmartSense subscriptions could be configured.
*/
func (a *Client) ListSmartSenseSubscriptionsByOrganization(params *ListSmartSenseSubscriptionsByOrganizationParams) (*ListSmartSenseSubscriptionsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmartSenseSubscriptionsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSmartSenseSubscriptionsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/smartsensesubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSmartSenseSubscriptionsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSmartSenseSubscriptionsByOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
