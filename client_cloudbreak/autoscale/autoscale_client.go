// Code generated by go-swagger; DO NOT EDIT.

package autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new autoscale API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for autoscale API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AuthorizeForAutoscale authorize for autoscale API
*/
func (a *Client) AuthorizeForAutoscale(params *AuthorizeForAutoscaleParams) (*AuthorizeForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authorizeForAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale/stack/{id}/authorize/{owner}/{permission}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthorizeForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AuthorizeForAutoscaleOK), nil

}

/*
FailureReportClusterForAutoscale failures report

Endpoint to report the failed nodes in the given cluster. If recovery mode for the node's hostgroup is AUTO then autorecovery would be started. If recovery mode for the node's hostgroup is MANUAL, the nodes will be marked as unhealthy.
*/
func (a *Client) FailureReportClusterForAutoscale(params *FailureReportClusterForAutoscaleParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewFailureReportClusterForAutoscaleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "failureReportClusterForAutoscale",
		Method:             "POST",
		PathPattern:        "/autoscale/stack/{id}/cluster/failurereport",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &FailureReportClusterForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetAllStackForAutoscale retrieves all stacks

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetAllStackForAutoscale(params *GetAllStackForAutoscaleParams) (*GetAllStackForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllStackForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllStackForAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale/stack/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllStackForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllStackForAutoscaleOK), nil

}

/*
GetCertificateStackForAutoscale retrieves the TLS certificate used by the gateway

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetCertificateStackForAutoscale(params *GetCertificateStackForAutoscaleParams) (*GetCertificateStackForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCertificateStackForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCertificateStackForAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale/stack/{id}/certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCertificateStackForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCertificateStackForAutoscaleOK), nil

}

/*
GetFullClusterForAutoscale retrieves cluster by stack id

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a Blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) GetFullClusterForAutoscale(params *GetFullClusterForAutoscaleParams) (*GetFullClusterForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFullClusterForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFullClusterForAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale/stack/{id}/cluster/full",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFullClusterForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFullClusterForAutoscaleOK), nil

}

/*
GetStackForAmbariForAutoscale retrieves stack by ambari address

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackForAmbariForAutoscale(params *GetStackForAmbariForAutoscaleParams) (*GetStackForAmbariForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackForAmbariForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackForAmbariForAutoscale",
		Method:             "POST",
		PathPattern:        "/autoscale/ambari",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackForAmbariForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackForAmbariForAutoscaleOK), nil

}

/*
GetStackForAutoscale retrieves stack by id

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackForAutoscale(params *GetStackForAutoscaleParams) (*GetStackForAutoscaleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackForAutoscaleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackForAutoscale",
		Method:             "GET",
		PathPattern:        "/autoscale/stack/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackForAutoscaleOK), nil

}

/*
PutClusterForAutoscale updates stack by id

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutClusterForAutoscale(params *PutClusterForAutoscaleParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterForAutoscaleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putClusterForAutoscale",
		Method:             "PUT",
		PathPattern:        "/autoscale/stack/{id}/{owner}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutClusterForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutStackForAutoscale updates stack by id

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutStackForAutoscale(params *PutStackForAutoscaleParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutStackForAutoscaleParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putStackForAutoscale",
		Method:             "PUT",
		PathPattern:        "/autoscale/stack/{id}/{owner}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutStackForAutoscaleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
