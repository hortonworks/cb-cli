package ldap

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new ldap API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for ldap API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteLdapAccountName deletes public owned or private l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) DeleteLdapAccountName(params *DeleteLdapAccountNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapAccountNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteLdapAccountName",
		Method:             "DELETE",
		PathPattern:        "/ldap/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteLdapID deletes l d a p config by id

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) DeleteLdapID(params *DeleteLdapIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteLdapID",
		Method:             "DELETE",
		PathPattern:        "/ldap/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteLdapUserName deletes private l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) DeleteLdapUserName(params *DeleteLdapUserNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapUserNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteLdapUserName",
		Method:             "DELETE",
		PathPattern:        "/ldap/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapUserNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetLdapAccount retrieves public and private owned l d a p configs

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapAccount(params *GetLdapAccountParams) (*GetLdapAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetLdapAccount",
		Method:             "GET",
		PathPattern:        "/ldap/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapAccountOK), nil
}

/*
GetLdapAccountName retrieves a public or private owned l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapAccountName(params *GetLdapAccountNameParams) (*GetLdapAccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapAccountNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetLdapAccountName",
		Method:             "GET",
		PathPattern:        "/ldap/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapAccountNameOK), nil
}

/*
GetLdapID retrieves l d a p config by id

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapID(params *GetLdapIDParams) (*GetLdapIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetLdapID",
		Method:             "GET",
		PathPattern:        "/ldap/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapIDOK), nil
}

/*
GetLdapUser retrieves private l d a p configs

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapUser(params *GetLdapUserParams) (*GetLdapUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetLdapUser",
		Method:             "GET",
		PathPattern:        "/ldap/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapUserOK), nil
}

/*
GetLdapUserName retrieves a private l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapUserName(params *GetLdapUserNameParams) (*GetLdapUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetLdapUserName",
		Method:             "GET",
		PathPattern:        "/ldap/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapUserNameOK), nil
}

/*
PostLdapAccount creates l d a p config as public resource

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) PostLdapAccount(params *PostLdapAccountParams) (*PostLdapAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostLdapAccount",
		Method:             "POST",
		PathPattern:        "/ldap/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapAccountOK), nil
}

/*
PostLdapUser creates l d a p config as private resource

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) PostLdapUser(params *PostLdapUserParams) (*PostLdapUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostLdapUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostLdapUser",
		Method:             "POST",
		PathPattern:        "/ldap/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostLdapUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostLdapUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
