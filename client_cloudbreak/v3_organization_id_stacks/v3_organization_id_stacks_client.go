// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeImageV3 checks image in stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ChangeImageV3(params *ChangeImageV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/changeImage",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CreateStackInOrganization creates stack in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) CreateStackInOrganization(params *CreateStackInOrganizationParams) (*CreateStackInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStackInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStackInOrganizationOK), nil

}

/*
DeleteClusterWithKerberosV3 deletes the stack with kerberos cluster by name in organization

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a Blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteClusterWithKerberosV3(params *DeleteClusterWithKerberosV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterWithKerberosV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterWithKerberosV3",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterWithKerberosV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstanceStackV3 deletes instance from the stack s cluster in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceStackV3(params *DeleteInstanceStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceStackV3",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/instance/{instanceId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteStackInOrganization deletes stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteStackInOrganization(params *DeleteStackInOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetStackInOrganization gets stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackInOrganization(params *GetStackInOrganizationParams) (*GetStackInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackInOrganizationOK), nil

}

/*
GetStackRequestFromNameV3 gets stack request by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackRequestFromNameV3(params *GetStackRequestFromNameV3Params) (*GetStackRequestFromNameV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackRequestFromNameV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackRequestFromNameV3",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackRequestFromNameV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackRequestFromNameV3OK), nil

}

/*
ListStacksByOrganization lists stacks for the given organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ListStacksByOrganization(params *ListStacksByOrganizationParams) (*ListStacksByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStacksByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStacksByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStacksByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStacksByOrganizationOK), nil

}

/*
PostStackForBlueprintV3 posts stack for blueprint in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackForBlueprintV3(params *PostStackForBlueprintV3Params) (*PostStackForBlueprintV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackForBlueprintV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackForBlueprintV3",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/blueprint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackForBlueprintV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackForBlueprintV3OK), nil

}

/*
PutpasswordStackV3 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutpasswordStackV3(params *PutpasswordStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutpasswordStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putpasswordStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/ambari_password/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutpasswordStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutreinstallStackV3 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutreinstallStackV3(params *PutreinstallStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutreinstallStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putreinstallStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/reinstall}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutreinstallStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutscalingStackV3 scales the stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutscalingStackV3(params *PutscalingStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutscalingStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putscalingStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutscalingStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutstartStackV3 starts the stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutstartStackV3(params *PutstartStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutstartStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putstartStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutstartStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutstopStackV3 stops the stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutstopStackV3(params *PutstopStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutstopStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putstopStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutstopStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutsyncStackV3 syncs the stack by name in organization

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutsyncStackV3(params *PutsyncStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutsyncStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putsyncStackV3",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutsyncStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RepairClusterV3 repairs the stack by name in organization

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairClusterV3(params *RepairClusterV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairClusterV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairClusterV3",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/manualrepair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairClusterV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RetryStackV3 retries the stack by name in organization

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryStackV3(params *RetryStackV3Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryStackV3Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryStackV3",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StatusStackV3 retrieves stack status by stack name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusStackV3(params *StatusStackV3Params) (*StatusStackV3OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusStackV3Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusStackV3",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/stacks/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusStackV3Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusStackV3OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
