package connectors

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new connectors API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for connectors API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
GetDisktypeByType retrives disks by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetDisktypeByType(params *GetDisktypeByTypeParams) (*GetDisktypeByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisktypeByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getDisktypeByType",
		Method:             "GET",
		PathPattern:        "/connectors/disktypes/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDisktypeByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisktypeByTypeOK), nil
}

/*
GetDisktypes retrives available disk types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetDisktypes(params *GetDisktypesParams) (*GetDisktypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisktypesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getDisktypes",
		Method:             "GET",
		PathPattern:        "/connectors/disktypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDisktypesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisktypesOK), nil
}

/*
GetOchestratorsByType retrives orchestrators by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetOchestratorsByType(params *GetOchestratorsByTypeParams) (*GetOchestratorsByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOchestratorsByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOchestratorsByType",
		Method:             "GET",
		PathPattern:        "/connectors/ochestrators/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOchestratorsByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOchestratorsByTypeOK), nil
}

/*
GetOrchestratortypes retrives available orchestrator types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetOrchestratortypes(params *GetOrchestratortypesParams) (*GetOrchestratortypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOrchestratortypesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getOrchestratortypes",
		Method:             "GET",
		PathPattern:        "/connectors/ochestrators",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetOrchestratortypesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetOrchestratortypesOK), nil
}

/*
GetPlatformVariantByType retrives a platform variant by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformVariantByType(params *GetPlatformVariantByTypeParams) (*GetPlatformVariantByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformVariantByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPlatformVariantByType",
		Method:             "GET",
		PathPattern:        "/connectors/variants/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformVariantByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformVariantByTypeOK), nil
}

/*
GetPlatformVariants retrives available platform variants

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformVariants(params *GetPlatformVariantsParams) (*GetPlatformVariantsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformVariantsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPlatformVariants",
		Method:             "GET",
		PathPattern:        "/connectors/variants",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformVariantsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformVariantsOK), nil
}

/*
GetPlatforms retrives available platforms

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatforms(params *GetPlatformsParams) (*GetPlatformsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getPlatforms",
		Method:             "GET",
		PathPattern:        "/connectors",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformsOK), nil
}

/*
GetRegionAvByType retrives availability zones by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegionAvByType(params *GetRegionAvByTypeParams) (*GetRegionAvByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionAvByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRegionAvByType",
		Method:             "GET",
		PathPattern:        "/connectors/regions/av/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionAvByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionAvByTypeOK), nil
}

/*
GetRegionRByType retrives regions by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegionRByType(params *GetRegionRByTypeParams) (*GetRegionRByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionRByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRegionRByType",
		Method:             "GET",
		PathPattern:        "/connectors/regions/r/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionRByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionRByTypeOK), nil
}

/*
GetRegions retrives available regions

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegions(params *GetRegionsParams) (*GetRegionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getRegions",
		Method:             "GET",
		PathPattern:        "/connectors/connectors/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionsReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsOK), nil
}

/*
GetVMTypeByType retrives vm types by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetVMTypeByType(params *GetVMTypeByTypeParams) (*GetVMTypeByTypeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTypeByTypeParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getVmTypeByType",
		Method:             "GET",
		PathPattern:        "/connectors/vmtypes/{type}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVMTypeByTypeReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVMTypeByTypeOK), nil
}

/*
GetVMTypes retrives available vm types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetVMTypes(params *GetVMTypesParams) (*GetVMTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTypesParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "getVmTypes",
		Method:             "GET",
		PathPattern:        "/connectors/connectors/vmtypes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVMTypesReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVMTypesOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
