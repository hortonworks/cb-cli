package templates

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new templates API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for templates API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteTemplatesAccountName deletes public owned or private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeleteTemplatesAccountName(params *DeleteTemplatesAccountNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplatesAccountNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteTemplatesAccountName",
		Method:             "DELETE",
		PathPattern:        "/templates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplatesAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteTemplatesID deletes template by id

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeleteTemplatesID(params *DeleteTemplatesIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplatesIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteTemplatesID",
		Method:             "DELETE",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplatesIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteTemplatesUserName deletes private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) DeleteTemplatesUserName(params *DeleteTemplatesUserNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteTemplatesUserNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteTemplatesUserName",
		Method:             "DELETE",
		PathPattern:        "/templates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteTemplatesUserNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetTemplatesAccount retrieves public and private owned templates

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplatesAccount(params *GetTemplatesAccountParams) (*GetTemplatesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetTemplatesAccount",
		Method:             "GET",
		PathPattern:        "/templates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesAccountOK), nil
}

/*
GetTemplatesAccountName retrieves a public or private owned template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplatesAccountName(params *GetTemplatesAccountNameParams) (*GetTemplatesAccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesAccountNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetTemplatesAccountName",
		Method:             "GET",
		PathPattern:        "/templates/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesAccountNameOK), nil
}

/*
GetTemplatesID retrieves template by id

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplatesID(params *GetTemplatesIDParams) (*GetTemplatesIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetTemplatesID",
		Method:             "GET",
		PathPattern:        "/templates/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesIDOK), nil
}

/*
GetTemplatesUser retrieves private templates

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplatesUser(params *GetTemplatesUserParams) (*GetTemplatesUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetTemplatesUser",
		Method:             "GET",
		PathPattern:        "/templates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesUserOK), nil
}

/*
GetTemplatesUserName retrieves a private template by name

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) GetTemplatesUserName(params *GetTemplatesUserNameParams) (*GetTemplatesUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTemplatesUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetTemplatesUserName",
		Method:             "GET",
		PathPattern:        "/templates/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTemplatesUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTemplatesUserNameOK), nil
}

/*
PostTemplatesAccount creates template as public resource

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) PostTemplatesAccount(params *PostTemplatesAccountParams) (*PostTemplatesAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTemplatesAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostTemplatesAccount",
		Method:             "POST",
		PathPattern:        "/templates/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTemplatesAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTemplatesAccountOK), nil
}

/*
PostTemplatesUser creates template as private resource

A template gives developers and systems administrators an easy way to create and manage a collection of cloud infrastructure related resources, maintaining and updating them in an orderly and predictable fashion. Templates are cloud specific - and on top of the infrastructural setup they collect the information such as the used machine images, the datacenter location, instance types, and can capture and control region-specific infrastructure variations. We support heterogenous clusters - this one Hadoop cluster can be built by combining different templates.
*/
func (a *Client) PostTemplatesUser(params *PostTemplatesUserParams) (*PostTemplatesUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostTemplatesUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostTemplatesUser",
		Method:             "POST",
		PathPattern:        "/templates/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostTemplatesUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostTemplatesUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
