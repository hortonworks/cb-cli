// Code generated by go-swagger; DO NOT EDIT.

package v1users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EvictCurrentUserDetails removes current user from cache

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) EvictCurrentUserDetails(params *EvictCurrentUserDetailsParams) (*EvictCurrentUserDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvictCurrentUserDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "evictCurrentUserDetails",
		Method:             "DELETE",
		PathPattern:        "/v1/users/evict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EvictCurrentUserDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EvictCurrentUserDetailsOK), nil

}

/*
EvictUserDetails removes user from cache by username

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) EvictUserDetails(params *EvictUserDetailsParams) (*EvictUserDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvictUserDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "evictUserDetails",
		Method:             "PUT",
		PathPattern:        "/v1/users/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EvictUserDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EvictUserDetailsOK), nil

}

/*
GetAllUsers retrieves all users in the tenant

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) GetAllUsers(params *GetAllUsersParams) (*GetAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsers",
		Method:             "GET",
		PathPattern:        "/v1/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllUsersOK), nil

}

/*
GetUserProfile users related profile

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) GetUserProfile(params *GetUserProfileParams) (*GetUserProfileOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserProfileParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserProfile",
		Method:             "GET",
		PathPattern:        "/v1/users/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserProfileOK), nil

}

/*
ModifyProfile modifies user related profile

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, blueprints, credentials, clusters) can be shared across account users
*/
func (a *Client) ModifyProfile(params *ModifyProfileParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyProfileParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyProfile",
		Method:             "PUT",
		PathPattern:        "/v1/users/profile",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyProfileReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
