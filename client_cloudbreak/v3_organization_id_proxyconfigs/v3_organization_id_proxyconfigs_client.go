// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_proxyconfigs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id proxyconfigs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id proxyconfigs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateProxyconfigInOrganization creates proxy configuration in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) CreateProxyconfigInOrganization(params *CreateProxyconfigInOrganizationParams) (*CreateProxyconfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyconfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxyconfigInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/proxyconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProxyconfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProxyconfigInOrganizationOK), nil

}

/*
DeleteProxyconfigInOrganization deletes proxy configuration by name in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeleteProxyconfigInOrganization(params *DeleteProxyconfigInOrganizationParams) (*DeleteProxyconfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyconfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxyconfigInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/proxyconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProxyconfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProxyconfigInOrganizationOK), nil

}

/*
GetProxyconfigInOrganization gets proxy configuration by name in organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetProxyconfigInOrganization(params *GetProxyconfigInOrganizationParams) (*GetProxyconfigInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyconfigInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyconfigInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/proxyconfigs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProxyconfigInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxyconfigInOrganizationOK), nil

}

/*
ListProxyconfigsByOrganization lists proxy configurations for the given organization

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) ListProxyconfigsByOrganization(params *ListProxyconfigsByOrganizationParams) (*ListProxyconfigsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProxyconfigsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProxyconfigsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/proxyconfigs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProxyconfigsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProxyconfigsByOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
