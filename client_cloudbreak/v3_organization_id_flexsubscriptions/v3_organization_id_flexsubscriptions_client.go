// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_flexsubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id flexsubscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id flexsubscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateFlexSubscriptionInOrganization creates flex subscription in organization

Flex subscriptions could be configured.
*/
func (a *Client) CreateFlexSubscriptionInOrganization(params *CreateFlexSubscriptionInOrganizationParams) (*CreateFlexSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFlexSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFlexSubscriptionInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFlexSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFlexSubscriptionInOrganizationOK), nil

}

/*
DeleteFlexSubscriptionInOrganization deletes flex subscription by name in organization

Flex subscriptions could be configured.
*/
func (a *Client) DeleteFlexSubscriptionInOrganization(params *DeleteFlexSubscriptionInOrganizationParams) (*DeleteFlexSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlexSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlexSubscriptionInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFlexSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlexSubscriptionInOrganizationOK), nil

}

/*
GetFlexSubscriptionInOrganization gets flex subscription by name in organization

Flex subscriptions could be configured.
*/
func (a *Client) GetFlexSubscriptionInOrganization(params *GetFlexSubscriptionInOrganizationParams) (*GetFlexSubscriptionInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlexSubscriptionInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlexSubscriptionInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlexSubscriptionInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlexSubscriptionInOrganizationOK), nil

}

/*
ListFlexSubscriptionsByOrganization lists flex subscriptions for the given organization

Flex subscriptions could be configured.
*/
func (a *Client) ListFlexSubscriptionsByOrganization(params *ListFlexSubscriptionsByOrganizationParams) (*ListFlexSubscriptionsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFlexSubscriptionsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFlexSubscriptionsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFlexSubscriptionsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFlexSubscriptionsByOrganizationOK), nil

}

/*
PutDefaultFlexSubscriptionByNameInOrganization sets the organization default flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutDefaultFlexSubscriptionByNameInOrganization(params *PutDefaultFlexSubscriptionByNameInOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDefaultFlexSubscriptionByNameInOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDefaultFlexSubscriptionByNameInOrganization",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDefaultFlexSubscriptionByNameInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutUsedForControllerFlexSubscriptionByNameInOrganization sets the organization used for controller flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutUsedForControllerFlexSubscriptionByNameInOrganization(params *PutUsedForControllerFlexSubscriptionByNameInOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsedForControllerFlexSubscriptionByNameInOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUsedForControllerFlexSubscriptionByNameInOrganization",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/flexsubscriptions/setusedforcontroller/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUsedForControllerFlexSubscriptionByNameInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
