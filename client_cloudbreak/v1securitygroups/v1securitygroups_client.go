// Code generated by go-swagger; DO NOT EDIT.

package v1securitygroups

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1securitygroups API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1securitygroups API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePrivateSecurityGroup deletes private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeletePrivateSecurityGroup(params *DeletePrivateSecurityGroupParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateSecurityGroupParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/securitygroups/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePublicSecurityGroup deletes public owned or private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeletePublicSecurityGroup(params *DeletePublicSecurityGroupParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicSecurityGroupParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/securitygroups/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteSecurityGroup deletes security group by id

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) DeleteSecurityGroup(params *DeleteSecurityGroupParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSecurityGroupParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSecurityGroup",
		Method:             "DELETE",
		PathPattern:        "/v1/securitygroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetPrivateSecurityGroup retrieves a private security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetPrivateSecurityGroup(params *GetPrivateSecurityGroupParams) (*GetPrivateSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/securitygroups/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateSecurityGroupOK), nil

}

/*
GetPrivatesSecurityGroup retrieves private security groups

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetPrivatesSecurityGroup(params *GetPrivatesSecurityGroupParams) (*GetPrivatesSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivatesSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/securitygroups/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesSecurityGroupOK), nil

}

/*
GetPublicSecurityGroup retrieves a public or private owned security group by name

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetPublicSecurityGroup(params *GetPublicSecurityGroupParams) (*GetPublicSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/securitygroups/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicSecurityGroupOK), nil

}

/*
GetPublicsSecurityGroup retrieves public and private owned security groups

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetPublicsSecurityGroup(params *GetPublicsSecurityGroupParams) (*GetPublicsSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/securitygroups/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsSecurityGroupOK), nil

}

/*
GetSecurityGroup retrieves security group by id

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) GetSecurityGroup(params *GetSecurityGroupParams) (*GetSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSecurityGroup",
		Method:             "GET",
		PathPattern:        "/v1/securitygroups/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSecurityGroupOK), nil

}

/*
PostPrivateSecurityGroup creates security group as private resource

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) PostPrivateSecurityGroup(params *PostPrivateSecurityGroupParams) (*PostPrivateSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateSecurityGroup",
		Method:             "POST",
		PathPattern:        "/v1/securitygroups/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateSecurityGroupOK), nil

}

/*
PostPublicSecurityGroup creates security group as public resource

Different inbound security rules(group) could be configured by using SecurityGroup resources and a group could be assigned to any Stack(cluster).
*/
func (a *Client) PostPublicSecurityGroup(params *PostPublicSecurityGroupParams) (*PostPublicSecurityGroupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicSecurityGroupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicSecurityGroup",
		Method:             "POST",
		PathPattern:        "/v1/securitygroups/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicSecurityGroupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicSecurityGroupOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
