package sssd

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-swagger/go-swagger/client"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
)

// New creates a new sssd API client.
func New(transport client.Transport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for sssd API
*/
type Client struct {
	transport client.Transport
	formats   strfmt.Registry
}

/*
DeleteSssdAccountName deletes public owned or private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeleteSssdAccountName(params *DeleteSssdAccountNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSssdAccountNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSssdAccountName",
		Method:             "DELETE",
		PathPattern:        "/sssd/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSssdAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteSssdID deletes s s s d config by id

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeleteSssdID(params *DeleteSssdIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSssdIDParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSssdID",
		Method:             "DELETE",
		PathPattern:        "/sssd/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSssdIDReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
DeleteSssdUserName deletes private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) DeleteSssdUserName(params *DeleteSssdUserNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSssdUserNameParams()
	}

	_, err := a.transport.Submit(&client.Operation{
		ID:                 "DeleteSssdUserName",
		Method:             "DELETE",
		PathPattern:        "/sssd/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSssdUserNameReader{formats: a.formats},
	})
	if err != nil {
		return err
	}
	return nil
}

/*
GetSssdAccount retrieves public and private owned s s s d configs

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssdAccount(params *GetSssdAccountParams) (*GetSssdAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSssdAccount",
		Method:             "GET",
		PathPattern:        "/sssd/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdAccountOK), nil
}

/*
GetSssdAccountName retrieves a public or private owned s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssdAccountName(params *GetSssdAccountNameParams) (*GetSssdAccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdAccountNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSssdAccountName",
		Method:             "GET",
		PathPattern:        "/sssd/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdAccountNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdAccountNameOK), nil
}

/*
GetSssdID retrieves s s s d config by id

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssdID(params *GetSssdIDParams) (*GetSssdIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdIDParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSssdID",
		Method:             "GET",
		PathPattern:        "/sssd/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdIDReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdIDOK), nil
}

/*
GetSssdUser retrieves private s s s d configs

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssdUser(params *GetSssdUserParams) (*GetSssdUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSssdUser",
		Method:             "GET",
		PathPattern:        "/sssd/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdUserOK), nil
}

/*
GetSssdUserName retrieves a private s s s d config by name

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) GetSssdUserName(params *GetSssdUserNameParams) (*GetSssdUserNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSssdUserNameParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "GetSssdUserName",
		Method:             "GET",
		PathPattern:        "/sssd/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSssdUserNameReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSssdUserNameOK), nil
}

/*
PostSssdAccount creates s s s d config as public resource

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) PostSssdAccount(params *PostSssdAccountParams) (*PostSssdAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSssdAccountParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostSssdAccount",
		Method:             "POST",
		PathPattern:        "/sssd/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSssdAccountReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSssdAccountOK), nil
}

/*
PostSssdUser creates s s s d config as private resource

SSSD configs are defining external user database configuration for provisioned clusters.
*/
func (a *Client) PostSssdUser(params *PostSssdUserParams) (*PostSssdUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostSssdUserParams()
	}

	result, err := a.transport.Submit(&client.Operation{
		ID:                 "PostSssdUser",
		Method:             "POST",
		PathPattern:        "/sssd/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostSssdUserReader{formats: a.formats},
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostSssdUserOK), nil
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport client.Transport) {
	a.transport = transport
}
