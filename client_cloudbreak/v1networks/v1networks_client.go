// Code generated by go-swagger; DO NOT EDIT.

package v1networks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1networks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1networks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteNetwork deletes network by id

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) DeleteNetwork(params *DeleteNetworkParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNetworkParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePrivateNetwork deletes private network by name

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) DeletePrivateNetwork(params *DeletePrivateNetworkParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateNetworkParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/networks/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeletePublicNetwork deletes public owned or private network by name

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) DeletePublicNetwork(params *DeletePublicNetworkParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicNetworkParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicNetwork",
		Method:             "DELETE",
		PathPattern:        "/v1/networks/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetNetwork retrieves network by id

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) GetNetwork(params *GetNetworkParams) (*GetNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNetworkOK), nil

}

/*
GetPrivateNetwork retrieves a private network by name

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) GetPrivateNetwork(params *GetPrivateNetworkParams) (*GetPrivateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateNetworkOK), nil

}

/*
GetPrivatesNetwork retrieves private networks

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) GetPrivatesNetwork(params *GetPrivatesNetworkParams) (*GetPrivatesNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatesNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivatesNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivatesNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivatesNetworkOK), nil

}

/*
GetPublicNetwork retrieves a public or private owned network by name

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) GetPublicNetwork(params *GetPublicNetworkParams) (*GetPublicNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicNetworkOK), nil

}

/*
GetPublicsNetwork retrieves public and private owned networks

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) GetPublicsNetwork(params *GetPublicsNetworkParams) (*GetPublicsNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsNetwork",
		Method:             "GET",
		PathPattern:        "/v1/networks/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsNetworkOK), nil

}

/*
PostPrivateNetwork creates network as private resource

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) PostPrivateNetwork(params *PostPrivateNetworkParams) (*PostPrivateNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateNetwork",
		Method:             "POST",
		PathPattern:        "/v1/networks/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateNetworkOK), nil

}

/*
PostPublicNetwork creates network as public resource

Provider specific network settings could be configured by using Network resources.
*/
func (a *Client) PostPublicNetwork(params *PostPublicNetworkParams) (*PostPublicNetworkOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicNetworkParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicNetwork",
		Method:             "POST",
		PathPattern:        "/v1/networks/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicNetworkReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicNetworkOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
