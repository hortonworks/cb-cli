// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_imagecatalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id imagecatalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id imagecatalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateImageCatalogInOrganization creates image catalog in organization

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) CreateImageCatalogInOrganization(params *CreateImageCatalogInOrganizationParams) (*CreateImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createImageCatalogInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateImageCatalogInOrganizationOK), nil

}

/*
DeleteImageCatalogInOrganization deletes image catalog by name in organization

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) DeleteImageCatalogInOrganization(params *DeleteImageCatalogInOrganizationParams) (*DeleteImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteImageCatalogInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteImageCatalogInOrganizationOK), nil

}

/*
GetImageCatalogInOrganization gets image catalog by name in organization

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImageCatalogInOrganization(params *GetImageCatalogInOrganizationParams) (*GetImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageCatalogInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageCatalogInOrganizationOK), nil

}

/*
GetImageCatalogRequestFromNameInOrganization retrieves imagecatalog request by imagecatalog name

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImageCatalogRequestFromNameInOrganization(params *GetImageCatalogRequestFromNameInOrganizationParams) (*GetImageCatalogRequestFromNameInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageCatalogRequestFromNameInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageCatalogRequestFromNameInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageCatalogRequestFromNameInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageCatalogRequestFromNameInOrganizationOK), nil

}

/*
GetImagesByProviderAndCustomImageCatalogInOrganization determines available images for the cloudbreak version by the given provider and given image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImagesByProviderAndCustomImageCatalogInOrganization(params *GetImagesByProviderAndCustomImageCatalogInOrganizationParams) (*GetImagesByProviderAndCustomImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByProviderAndCustomImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByProviderAndCustomImageCatalogInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/{name}/platform/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByProviderAndCustomImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByProviderAndCustomImageCatalogInOrganizationOK), nil

}

/*
GetImagesByProviderInOrganization determines available images for the cloudbreak version by the given provider and default image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImagesByProviderInOrganization(params *GetImagesByProviderInOrganizationParams) (*GetImagesByProviderInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByProviderInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByProviderInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/platform/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByProviderInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByProviderInOrganizationOK), nil

}

/*
GetImagesByStackNameAndCustomImageCatalogInOrganization determines available images for the given stackfrom the given imagecatalog name

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndCustomImageCatalogInOrganization(params *GetImagesByStackNameAndCustomImageCatalogInOrganizationParams) (*GetImagesByStackNameAndCustomImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndCustomImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndCustomImageCatalogInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/upgrade/{stackName}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndCustomImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndCustomImageCatalogInOrganizationOK), nil

}

/*
GetImagesByStackNameAndDefaultImageCatalogInOrganization determines available images for the given stackfrom the default image catalog

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndDefaultImageCatalogInOrganization(params *GetImagesByStackNameAndDefaultImageCatalogInOrganizationParams) (*GetImagesByStackNameAndDefaultImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndDefaultImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndDefaultImageCatalogInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/upgrade/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndDefaultImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndDefaultImageCatalogInOrganizationOK), nil

}

/*
ListImageCatalogsByOrganization lists image catalogs for the given organization

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) ListImageCatalogsByOrganization(params *ListImageCatalogsByOrganizationParams) (*ListImageCatalogsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImageCatalogsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listImageCatalogsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListImageCatalogsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListImageCatalogsByOrganizationOK), nil

}

/*
PutPublicImageCatalogInOrganization updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutPublicImageCatalogInOrganization(params *PutPublicImageCatalogInOrganizationParams) (*PutPublicImageCatalogInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicImageCatalogInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPublicImageCatalogInOrganization",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicImageCatalogInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPublicImageCatalogInOrganizationOK), nil

}

/*
PutSetDefaultImageCatalogByNameInOrganization updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutSetDefaultImageCatalogByNameInOrganization(params *PutSetDefaultImageCatalogByNameInOrganizationParams) (*PutSetDefaultImageCatalogByNameInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSetDefaultImageCatalogByNameInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSetDefaultImageCatalogByNameInOrganization",
		Method:             "PUT",
		PathPattern:        "/v3/{organizationId}/imagecatalogs/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutSetDefaultImageCatalogByNameInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSetDefaultImageCatalogByNameInOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
