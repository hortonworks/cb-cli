// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_blueprints

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id blueprints API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id blueprints API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateBlueprintInOrganization creates blueprint in organization

Ambari Blueprints are a declarative definition of a Hadoop cluster. With a Blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) CreateBlueprintInOrganization(params *CreateBlueprintInOrganizationParams) (*CreateBlueprintInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateBlueprintInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createBlueprintInOrganization",
		Method:             "POST",
		PathPattern:        "/v3/{organizationId}/blueprints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateBlueprintInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateBlueprintInOrganizationOK), nil

}

/*
DeleteBlueprintInOrganization deletes blueprint by name in organization

Ambari Blueprints are a declarative definition of a Hadoop cluster. With a Blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) DeleteBlueprintInOrganization(params *DeleteBlueprintInOrganizationParams) (*DeleteBlueprintInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteBlueprintInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteBlueprintInOrganization",
		Method:             "DELETE",
		PathPattern:        "/v3/{organizationId}/blueprints/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteBlueprintInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteBlueprintInOrganizationOK), nil

}

/*
GetBlueprintCustomParameters returns custom parameters
*/
func (a *Client) GetBlueprintCustomParameters(params *GetBlueprintCustomParametersParams) (*GetBlueprintCustomParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintCustomParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintCustomParameters",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/blueprints/{name}/custom-parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlueprintCustomParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintCustomParametersOK), nil

}

/*
GetBlueprintInOrganization gets blueprint by name in organization

Ambari Blueprints are a declarative definition of a Hadoop cluster. With a Blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) GetBlueprintInOrganization(params *GetBlueprintInOrganizationParams) (*GetBlueprintInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/blueprints/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlueprintInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintInOrganizationOK), nil

}

/*
GetBlueprintRequestFromName retrieves validation request by blueprint name

Ambari Blueprints are a declarative definition of a Hadoop cluster. With a Blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) GetBlueprintRequestFromName(params *GetBlueprintRequestFromNameParams) (*GetBlueprintRequestFromNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetBlueprintRequestFromNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getBlueprintRequestFromName",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/blueprints/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetBlueprintRequestFromNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetBlueprintRequestFromNameOK), nil

}

/*
ListBlueprintsByOrganization lists blueprints for the given organization

Ambari Blueprints are a declarative definition of a Hadoop cluster. With a Blueprint, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in blueprints can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) ListBlueprintsByOrganization(params *ListBlueprintsByOrganizationParams) (*ListBlueprintsByOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListBlueprintsByOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listBlueprintsByOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/blueprints",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListBlueprintsByOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListBlueprintsByOrganizationOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
