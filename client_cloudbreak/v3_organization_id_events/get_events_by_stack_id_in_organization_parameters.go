// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEventsByStackIDInOrganizationParams creates a new GetEventsByStackIDInOrganizationParams object
// with the default values initialized.
func NewGetEventsByStackIDInOrganizationParams() *GetEventsByStackIDInOrganizationParams {
	var ()
	return &GetEventsByStackIDInOrganizationParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsByStackIDInOrganizationParamsWithTimeout creates a new GetEventsByStackIDInOrganizationParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventsByStackIDInOrganizationParamsWithTimeout(timeout time.Duration) *GetEventsByStackIDInOrganizationParams {
	var ()
	return &GetEventsByStackIDInOrganizationParams{

		timeout: timeout,
	}
}

// NewGetEventsByStackIDInOrganizationParamsWithContext creates a new GetEventsByStackIDInOrganizationParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEventsByStackIDInOrganizationParamsWithContext(ctx context.Context) *GetEventsByStackIDInOrganizationParams {
	var ()
	return &GetEventsByStackIDInOrganizationParams{

		Context: ctx,
	}
}

// NewGetEventsByStackIDInOrganizationParamsWithHTTPClient creates a new GetEventsByStackIDInOrganizationParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEventsByStackIDInOrganizationParamsWithHTTPClient(client *http.Client) *GetEventsByStackIDInOrganizationParams {
	var ()
	return &GetEventsByStackIDInOrganizationParams{
		HTTPClient: client,
	}
}

/*GetEventsByStackIDInOrganizationParams contains all the parameters to send to the API endpoint
for the get events by stack Id in organization operation typically these are written to a http.Request
*/
type GetEventsByStackIDInOrganizationParams struct {

	/*Name*/
	Name string
	/*OrganizationID*/
	OrganizationID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) WithTimeout(timeout time.Duration) *GetEventsByStackIDInOrganizationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) WithContext(ctx context.Context) *GetEventsByStackIDInOrganizationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) WithHTTPClient(client *http.Client) *GetEventsByStackIDInOrganizationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithName adds the name to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) WithName(name string) *GetEventsByStackIDInOrganizationParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) SetName(name string) {
	o.Name = name
}

// WithOrganizationID adds the organizationID to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) WithOrganizationID(organizationID int64) *GetEventsByStackIDInOrganizationParams {
	o.SetOrganizationID(organizationID)
	return o
}

// SetOrganizationID adds the organizationId to the get events by stack Id in organization params
func (o *GetEventsByStackIDInOrganizationParams) SetOrganizationID(organizationID int64) {
	o.OrganizationID = organizationID
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsByStackIDInOrganizationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param organizationId
	if err := r.SetPathParam("organizationId", swag.FormatInt64(o.OrganizationID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
