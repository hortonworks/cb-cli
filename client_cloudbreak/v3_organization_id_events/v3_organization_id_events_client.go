// Code generated by go-swagger; DO NOT EDIT.

package v3_organization_id_events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 organization id events API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 organization id events API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
NrGetStructuredEventsInOrganization retrieves events by name

Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
*/
func (a *Client) NrGetStructuredEventsInOrganization(params *NrGetStructuredEventsInOrganizationParams) (*GetStructuredEventsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewNrGetStructuredEventsInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 " getStructuredEventsInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/events/struct/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &NrGetStructuredEventsInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStructuredEventsInOrganizationOK), nil

}

/*
GetEventsByStackIDInOrganization retrieves events by name

Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
*/
func (a *Client) GetEventsByStackIDInOrganization(params *GetEventsByStackIDInOrganizationParams) (*GetEventsByStackIDInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsByStackIDInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsByStackIdInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/events/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEventsByStackIDInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsByStackIDInOrganizationOK), nil

}

/*
GetEventsInOrganization retrieves events by timestamp long

Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
*/
func (a *Client) GetEventsInOrganization(params *GetEventsInOrganizationParams) (*GetEventsInOrganizationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEventsInOrganizationParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEventsInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/events",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEventsInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEventsInOrganizationOK), nil

}

/*
GetStructuredEventsZipInOrganization retrieves events in zip by name

Events are used to track stack creation initiated by cloudbreak users. Events are generated by the backend when resources requested by the user become available or unavailable
*/
func (a *Client) GetStructuredEventsZipInOrganization(params *GetStructuredEventsZipInOrganizationParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStructuredEventsZipInOrganizationParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStructuredEventsZipInOrganization",
		Method:             "GET",
		PathPattern:        "/v3/{organizationId}/events/struct/zip/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStructuredEventsZipInOrganizationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
