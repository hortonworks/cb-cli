// Code generated by go-swagger; DO NOT EDIT.

package v3utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCloudStorageMatrixV3Params creates a new GetCloudStorageMatrixV3Params object
// with the default values initialized.
func NewGetCloudStorageMatrixV3Params() *GetCloudStorageMatrixV3Params {
	var ()
	return &GetCloudStorageMatrixV3Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudStorageMatrixV3ParamsWithTimeout creates a new GetCloudStorageMatrixV3Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCloudStorageMatrixV3ParamsWithTimeout(timeout time.Duration) *GetCloudStorageMatrixV3Params {
	var ()
	return &GetCloudStorageMatrixV3Params{

		timeout: timeout,
	}
}

// NewGetCloudStorageMatrixV3ParamsWithContext creates a new GetCloudStorageMatrixV3Params object
// with the default values initialized, and the ability to set a context for a request
func NewGetCloudStorageMatrixV3ParamsWithContext(ctx context.Context) *GetCloudStorageMatrixV3Params {
	var ()
	return &GetCloudStorageMatrixV3Params{

		Context: ctx,
	}
}

// NewGetCloudStorageMatrixV3ParamsWithHTTPClient creates a new GetCloudStorageMatrixV3Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCloudStorageMatrixV3ParamsWithHTTPClient(client *http.Client) *GetCloudStorageMatrixV3Params {
	var ()
	return &GetCloudStorageMatrixV3Params{
		HTTPClient: client,
	}
}

/*GetCloudStorageMatrixV3Params contains all the parameters to send to the API endpoint
for the get cloud storage matrix v3 operation typically these are written to a http.Request
*/
type GetCloudStorageMatrixV3Params struct {

	/*StackVersion*/
	StackVersion *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) WithTimeout(timeout time.Duration) *GetCloudStorageMatrixV3Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) WithContext(ctx context.Context) *GetCloudStorageMatrixV3Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) WithHTTPClient(client *http.Client) *GetCloudStorageMatrixV3Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithStackVersion adds the stackVersion to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) WithStackVersion(stackVersion *string) *GetCloudStorageMatrixV3Params {
	o.SetStackVersion(stackVersion)
	return o
}

// SetStackVersion adds the stackVersion to the get cloud storage matrix v3 params
func (o *GetCloudStorageMatrixV3Params) SetStackVersion(stackVersion *string) {
	o.StackVersion = stackVersion
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudStorageMatrixV3Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.StackVersion != nil {

		// query param stackVersion
		var qrStackVersion string
		if o.StackVersion != nil {
			qrStackVersion = *o.StackVersion
		}
		qStackVersion := qrStackVersion
		if qStackVersion != "" {
			if err := r.SetQueryParam("stackVersion", qStackVersion); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
