package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-swagger/go-swagger/strfmt"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*StackValidationRequest stack validation request

swagger:model StackValidationRequest
*/
type StackValidationRequest struct {

	/* blueprint for the cluster
	 */
	Blueprint *BlueprintRequest `json:"blueprint,omitempty"`

	/* blueprint id for the cluster
	 */
	BlueprintID *int64 `json:"blueprintId,omitempty"`

	/* credential resource id for the stack

	Required: true
	*/
	CredentialID int64 `json:"credentialId"`

	/* file system
	 */
	FileSystem *FileSystem `json:"fileSystem,omitempty"`

	/* collection of hostgroups

	Required: true
	Unique: true
	*/
	HostGroups []*HostGroupRequest `json:"hostGroups"`

	/* collection of instance groupst

	Required: true
	Unique: true
	*/
	InstanceGroups []*InstanceGroups `json:"instanceGroups"`

	/* stack related network
	 */
	Network *NetworkRequest `json:"network,omitempty"`

	/* network resource id for the stack
	 */
	NetworkID *int64 `json:"networkId,omitempty"`

	/* type of cloud provider

	Required: true
	*/
	Platform string `json:"platform"`
}

// Validate validates this stack validation request
func (m *StackValidationRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredentialID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHostGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackValidationRequest) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credentialId", "body", int64(m.CredentialID)); err != nil {
		return err
	}

	return nil
}

func (m *StackValidationRequest) validateHostGroups(formats strfmt.Registry) error {

	if err := validate.Required("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	if err := validate.UniqueItems("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.HostGroups); i++ {

		if m.HostGroups[i] != nil {

			if err := m.HostGroups[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *StackValidationRequest) validateInstanceGroups(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	if err := validate.UniqueItems("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceGroups); i++ {

		if m.InstanceGroups[i] != nil {

			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *StackValidationRequest) validatePlatform(formats strfmt.Registry) error {

	if err := validate.RequiredString("platform", "body", string(m.Platform)); err != nil {
		return err
	}

	return nil
}
