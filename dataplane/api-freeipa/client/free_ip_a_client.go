// Code generated by go-swagger; DO NOT EDIT.

package client

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/authorization"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/flow"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/flow_public"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1diagnostics"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1dns"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1events"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1freeipa"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1freeipatest"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1freeipauser"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1kerberos"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1kerberosmgmt"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1ldaps"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1operation"
	"github.com/hortonworks/cb-cli/dataplane/api-freeipa/client/v1structured_events"
)

// Default free IP a HTTP client.
var Default = NewHTTPClient(nil)

const (
	// DefaultHost is the default Host
	// found in Meta (info) section of spec file
	DefaultHost string = "localhost"
	// DefaultBasePath is the default BasePath
	// found in Meta (info) section of spec file
	DefaultBasePath string = "/api"
)

// DefaultSchemes are the default schemes found in Meta (info) section of spec file
var DefaultSchemes = []string{"http", "https"}

// NewHTTPClient creates a new free IP a HTTP client.
func NewHTTPClient(formats strfmt.Registry) *FreeIPA {
	return NewHTTPClientWithConfig(formats, nil)
}

// NewHTTPClientWithConfig creates a new free IP a HTTP client,
// using a customizable transport config.
func NewHTTPClientWithConfig(formats strfmt.Registry, cfg *TransportConfig) *FreeIPA {
	// ensure nullable parameters have default
	if cfg == nil {
		cfg = DefaultTransportConfig()
	}

	// create transport and client
	transport := httptransport.New(cfg.Host, cfg.BasePath, cfg.Schemes)
	return New(transport, formats)
}

// New creates a new free IP a client
func New(transport runtime.ClientTransport, formats strfmt.Registry) *FreeIPA {
	// ensure nullable parameters have default
	if formats == nil {
		formats = strfmt.Default
	}

	cli := new(FreeIPA)
	cli.Transport = transport

	cli.Authorization = authorization.New(transport, formats)

	cli.Flow = flow.New(transport, formats)

	cli.FlowPublic = flow_public.New(transport, formats)

	cli.V1diagnostics = v1diagnostics.New(transport, formats)

	cli.V1dns = v1dns.New(transport, formats)

	cli.V1events = v1events.New(transport, formats)

	cli.V1freeipa = v1freeipa.New(transport, formats)

	cli.V1freeipatest = v1freeipatest.New(transport, formats)

	cli.V1freeipauser = v1freeipauser.New(transport, formats)

	cli.V1kerberos = v1kerberos.New(transport, formats)

	cli.V1kerberosmgmt = v1kerberosmgmt.New(transport, formats)

	cli.V1ldaps = v1ldaps.New(transport, formats)

	cli.V1operation = v1operation.New(transport, formats)

	cli.V1structuredEvents = v1structured_events.New(transport, formats)

	return cli
}

// DefaultTransportConfig creates a TransportConfig with the
// default settings taken from the meta section of the spec file.
func DefaultTransportConfig() *TransportConfig {
	return &TransportConfig{
		Host:     DefaultHost,
		BasePath: DefaultBasePath,
		Schemes:  DefaultSchemes,
	}
}

// TransportConfig contains the transport related info,
// found in the meta section of the spec file.
type TransportConfig struct {
	Host     string
	BasePath string
	Schemes  []string
}

// WithHost overrides the default host,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithHost(host string) *TransportConfig {
	cfg.Host = host
	return cfg
}

// WithBasePath overrides the default basePath,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithBasePath(basePath string) *TransportConfig {
	cfg.BasePath = basePath
	return cfg
}

// WithSchemes overrides the default schemes,
// provided by the meta section of the spec file.
func (cfg *TransportConfig) WithSchemes(schemes []string) *TransportConfig {
	cfg.Schemes = schemes
	return cfg
}

// FreeIPA is a client for free IP a
type FreeIPA struct {
	Authorization *authorization.Client

	Flow *flow.Client

	FlowPublic *flow_public.Client

	V1diagnostics *v1diagnostics.Client

	V1dns *v1dns.Client

	V1events *v1events.Client

	V1freeipa *v1freeipa.Client

	V1freeipatest *v1freeipatest.Client

	V1freeipauser *v1freeipauser.Client

	V1kerberos *v1kerberos.Client

	V1kerberosmgmt *v1kerberosmgmt.Client

	V1ldaps *v1ldaps.Client

	V1operation *v1operation.Client

	V1structuredEvents *v1structured_events.Client

	Transport runtime.ClientTransport
}

// SetTransport changes the transport on the client and all its subresources
func (c *FreeIPA) SetTransport(transport runtime.ClientTransport) {
	c.Transport = transport

	c.Authorization.SetTransport(transport)

	c.Flow.SetTransport(transport)

	c.FlowPublic.SetTransport(transport)

	c.V1diagnostics.SetTransport(transport)

	c.V1dns.SetTransport(transport)

	c.V1events.SetTransport(transport)

	c.V1freeipa.SetTransport(transport)

	c.V1freeipatest.SetTransport(transport)

	c.V1freeipauser.SetTransport(transport)

	c.V1kerberos.SetTransport(transport)

	c.V1kerberosmgmt.SetTransport(transport)

	c.V1ldaps.SetTransport(transport)

	c.V1operation.SetTransport(transport)

	c.V1structuredEvents.SetTransport(transport)

}
