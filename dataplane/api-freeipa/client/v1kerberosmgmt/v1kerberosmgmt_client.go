// Code generated by go-swagger; DO NOT EDIT.

package v1kerberosmgmt

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1kerberosmgmt API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1kerberosmgmt API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CleanupClusterSecretsV1 cleanups the secrets associated with the cluster

Deletes all the secrets that are associated for the given cluster.
*/
func (a *Client) CleanupClusterSecretsV1(params *CleanupClusterSecretsV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanupClusterSecretsV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cleanupClusterSecretsV1",
		Method:             "DELETE",
		PathPattern:        "/v1/kerberosmgmt/cleanupClusterSecrets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CleanupClusterSecretsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteHostV1 deletes the host

Deletes the host and all the principals associated with the host in the FreeIPA. It also deletes vault secrets associated with the host.
*/
func (a *Client) DeleteHostV1(params *DeleteHostV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteHostV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteHostV1",
		Method:             "DELETE",
		PathPattern:        "/v1/kerberosmgmt/host",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteHostV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteServicePrinciapalV1 deletes the service principal

Deletes the principal from the FreeIPA. It also deletes vault secrets associated with the principal
*/
func (a *Client) DeleteServicePrinciapalV1(params *DeleteServicePrinciapalV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServicePrinciapalV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServicePrinciapalV1",
		Method:             "DELETE",
		PathPattern:        "/v1/kerberosmgmt/serviceprincipal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteServicePrinciapalV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GenerateServiceKeytabV1 creates the host and the service principal and then get the keytab for the provided service on a specific host

Creates the host if it doesn't exist and also creates the service principal for the given service before generating keytab for the principal. Resets the secret for the Kerberos principal redering all other keytabs for that principal invalid. Calling the API multiple times for the same principal renders the keytab already generated for that principal invalid. The keytab in the response is base64 encoded.
*/
func (a *Client) GenerateServiceKeytabV1(params *GenerateServiceKeytabV1Params) (*GenerateServiceKeytabV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateServiceKeytabV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateServiceKeytabV1",
		Method:             "POST",
		PathPattern:        "/v1/kerberosmgmt/servicekeytab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateServiceKeytabV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenerateServiceKeytabV1OK), nil

}

/*
GetServiceKeytabV1 gets the keytab for the provided service on a specific host

Retrieves the existing keytab for the service principal derived from the host and service provided. Gets the existing keytab without modification and not effecting the prior keytab. The keytab in the response is base64 encoded.
*/
func (a *Client) GetServiceKeytabV1(params *GetServiceKeytabV1Params) (*GetServiceKeytabV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceKeytabV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceKeytabV1",
		Method:             "GET",
		PathPattern:        "/v1/kerberosmgmt/servicekeytab",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetServiceKeytabV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetServiceKeytabV1OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
