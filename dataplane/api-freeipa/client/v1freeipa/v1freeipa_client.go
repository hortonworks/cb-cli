// Code generated by go-swagger; DO NOT EDIT.

package v1freeipa

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1freeipa API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1freeipa API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDNSZoneForSubnetIdsV1 creates reverse DNS zone entry for subnet ids

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSZoneForSubnetIdsV1(params *AddDNSZoneForSubnetIdsV1Params) (*AddDNSZoneForSubnetIdsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSZoneForSubnetIdsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsZoneForSubnetIdsV1",
		Method:             "POST",
		PathPattern:        "/v1/freeipa/dns/zone/id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSZoneForSubnetIdsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDNSZoneForSubnetIdsV1OK), nil

}

/*
AddDNSZoneForSubnetsV1 creates reverse DNS zone entry for subnets in c ID r format

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSZoneForSubnetsV1(params *AddDNSZoneForSubnetsV1Params) (*AddDNSZoneForSubnetsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSZoneForSubnetsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsZoneForSubnetsV1",
		Method:             "POST",
		PathPattern:        "/v1/freeipa/dns/zone/cidr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSZoneForSubnetsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDNSZoneForSubnetsV1OK), nil

}

/*
CleanupV1 cleans out users hosts and related DNS entries

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) CleanupV1(params *CleanupV1Params) (*CleanupV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCleanupV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cleanupV1",
		Method:             "POST",
		PathPattern:        "/v1/freeipa/cleanup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CleanupV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CleanupV1OK), nil

}

/*
CreateFreeIpaV1 creates free ipa stack

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) CreateFreeIpaV1(params *CreateFreeIpaV1Params) (*CreateFreeIpaV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateFreeIpaV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createFreeIpaV1",
		Method:             "POST",
		PathPattern:        "/v1/freeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateFreeIpaV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateFreeIpaV1OK), nil

}

/*
DeleteDNSZoneBySubnetIDV1 deletes reverse DNS zone entry by subnet ID

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSZoneBySubnetIDV1(params *DeleteDNSZoneBySubnetIDV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneBySubnetIDV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsZoneBySubnetIdV1",
		Method:             "DELETE",
		PathPattern:        "/v1/freeipa/dns/zone/id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSZoneBySubnetIDV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDNSZoneBySubnetV1 deletes reverse DNS zone entry by subnet c ID r

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSZoneBySubnetV1(params *DeleteDNSZoneBySubnetV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneBySubnetV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsZoneBySubnetV1",
		Method:             "DELETE",
		PathPattern:        "/v1/freeipa/dns/zone/cidr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSZoneBySubnetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteFreeIpaByEnvironmentV1 deletes free IP a stack by envid

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteFreeIpaByEnvironmentV1(params *DeleteFreeIpaByEnvironmentV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFreeIpaByEnvironmentV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFreeIpaByEnvironmentV1",
		Method:             "DELETE",
		PathPattern:        "/v1/freeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFreeIpaByEnvironmentV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetFreeIpaByEnvironmentV1 gets free IP a stack by envid

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) GetFreeIpaByEnvironmentV1(params *GetFreeIpaByEnvironmentV1Params) (*GetFreeIpaByEnvironmentV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreeIpaByEnvironmentV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFreeIpaByEnvironmentV1",
		Method:             "GET",
		PathPattern:        "/v1/freeipa",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFreeIpaByEnvironmentV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFreeIpaByEnvironmentV1OK), nil

}

/*
GetFreeIpaRootCertificateByEnvironmentV1 gets free IP a root certificate by envid

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) GetFreeIpaRootCertificateByEnvironmentV1(params *GetFreeIpaRootCertificateByEnvironmentV1Params) (*GetFreeIpaRootCertificateByEnvironmentV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFreeIpaRootCertificateByEnvironmentV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFreeIpaRootCertificateByEnvironmentV1",
		Method:             "GET",
		PathPattern:        "/v1/freeipa/ca.crt",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFreeIpaRootCertificateByEnvironmentV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFreeIpaRootCertificateByEnvironmentV1OK), nil

}

/*
ListDNSZonesV1 lists DNS zones available in free IP a

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) ListDNSZonesV1(params *ListDNSZonesV1Params) (*ListDNSZonesV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDNSZonesV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDnsZonesV1",
		Method:             "GET",
		PathPattern:        "/v1/freeipa/dns/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDNSZonesV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDNSZonesV1OK), nil

}

/*
ListFreeIpaClustersByAccountV1 lists all free IP a stacks by account

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) ListFreeIpaClustersByAccountV1(params *ListFreeIpaClustersByAccountV1Params) (*ListFreeIpaClustersByAccountV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListFreeIpaClustersByAccountV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listFreeIpaClustersByAccountV1",
		Method:             "GET",
		PathPattern:        "/v1/freeipa/list",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListFreeIpaClustersByAccountV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListFreeIpaClustersByAccountV1OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
