// Code generated by go-swagger; DO NOT EDIT.

package v1kerberos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1kerberos API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1kerberos API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateKerberosConfigForEnvironment creates kerberos config for the given environment

Kerberos config operations
*/
func (a *Client) CreateKerberosConfigForEnvironment(params *CreateKerberosConfigForEnvironmentParams) (*CreateKerberosConfigForEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKerberosConfigForEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKerberosConfigForEnvironment",
		Method:             "POST",
		PathPattern:        "/v1/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKerberosConfigForEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateKerberosConfigForEnvironmentOK), nil

}

/*
DeleteKerberosConfigForEnvironment deletes kerberos config of the given environment

Kerberos config operations
*/
func (a *Client) DeleteKerberosConfigForEnvironment(params *DeleteKerberosConfigForEnvironmentParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKerberosConfigForEnvironmentParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKerberosConfigForEnvironment",
		Method:             "DELETE",
		PathPattern:        "/v1/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKerberosConfigForEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCreateKerberosRequestForEnvironment gets create request of a kerberos config

Kerberos config operations
*/
func (a *Client) GetCreateKerberosRequestForEnvironment(params *GetCreateKerberosRequestForEnvironmentParams) (*GetCreateKerberosRequestForEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreateKerberosRequestForEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreateKerberosRequestForEnvironment",
		Method:             "GET",
		PathPattern:        "/v1/kerberos/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCreateKerberosRequestForEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreateKerberosRequestForEnvironmentOK), nil

}

/*
GetKerberosConfigForEnvironment describes kerberos config for the given environment

Kerberos config operations
*/
func (a *Client) GetKerberosConfigForEnvironment(params *GetKerberosConfigForEnvironmentParams) (*GetKerberosConfigForEnvironmentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKerberosConfigForEnvironmentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKerberosConfigForEnvironment",
		Method:             "GET",
		PathPattern:        "/v1/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKerberosConfigForEnvironmentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKerberosConfigForEnvironmentOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
