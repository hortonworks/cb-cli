// Code generated by go-swagger; DO NOT EDIT.

package v1ldaps

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1ldaps API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1ldaps API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateLdapConfigV1 creates l d a p config

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) CreateLdapConfigV1(params *CreateLdapConfigV1Params) (*CreateLdapConfigV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateLdapConfigV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createLdapConfigV1",
		Method:             "POST",
		PathPattern:        "/v1/ldaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateLdapConfigV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateLdapConfigV1OK), nil

}

/*
DeleteLdapConfigV1 deletes l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) DeleteLdapConfigV1(params *DeleteLdapConfigV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteLdapConfigV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteLdapConfigV1",
		Method:             "DELETE",
		PathPattern:        "/v1/ldaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteLdapConfigV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetLdapConfigV1 gets l d a p config by name

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapConfigV1(params *GetLdapConfigV1Params) (*GetLdapConfigV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapConfigV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLdapConfigV1",
		Method:             "GET",
		PathPattern:        "/v1/ldaps",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapConfigV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapConfigV1OK), nil

}

/*
GetLdapRequestByNameV1 gets request

LDAP server integration enables the user to provide a central place to store usernames and passwords for the users of his/her clusters.
*/
func (a *Client) GetLdapRequestByNameV1(params *GetLdapRequestByNameV1Params) (*GetLdapRequestByNameV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLdapRequestByNameV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLdapRequestByNameV1",
		Method:             "GET",
		PathPattern:        "/v1/ldaps/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLdapRequestByNameV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLdapRequestByNameV1OK), nil

}

/*
TestLdapConfigV1 tests that the connection could be established of an existing or new l d a p config
*/
func (a *Client) TestLdapConfigV1(params *TestLdapConfigV1Params) (*TestLdapConfigV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestLdapConfigV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testLdapConfigV1",
		Method:             "POST",
		PathPattern:        "/v1/ldaps/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestLdapConfigV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestLdapConfigV1OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
