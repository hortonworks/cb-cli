// Code generated by go-swagger; DO NOT EDIT.

package v1dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1dns API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1dns API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddDNSARecordV1 creates a DNS a record with the value in the defined zone if zone exists if zone not specified default zone will be used reverse pointer created if requested and reverse zone exists

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSARecordV1(params *AddDNSARecordV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSARecordV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsARecordV1",
		Method:             "POST",
		PathPattern:        "/v1/dns/record/a",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSARecordV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
AddDNSCnameRecordV1 creates a DNS a record with the value in the defined zone if zone exists if zone not specified default zone will be used reverse pointer created if requested and reverse zone exists

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSCnameRecordV1(params *AddDNSCnameRecordV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSCnameRecordV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsCnameRecordV1",
		Method:             "POST",
		PathPattern:        "/v1/dns/record/cname",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSCnameRecordV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
AddDNSZoneForSubnetIdsV1 creates reverse DNS zone entry for subnet ids

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSZoneForSubnetIdsV1(params *AddDNSZoneForSubnetIdsV1Params) (*AddDNSZoneForSubnetIdsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSZoneForSubnetIdsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsZoneForSubnetIdsV1",
		Method:             "POST",
		PathPattern:        "/v1/dns/zone/id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSZoneForSubnetIdsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDNSZoneForSubnetIdsV1OK), nil

}

/*
AddDNSZoneForSubnetsV1 creates reverse DNS zone entry for subnets in c ID r format

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) AddDNSZoneForSubnetsV1(params *AddDNSZoneForSubnetsV1Params) (*AddDNSZoneForSubnetsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddDNSZoneForSubnetsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addDnsZoneForSubnetsV1",
		Method:             "POST",
		PathPattern:        "/v1/dns/zone/cidr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddDNSZoneForSubnetsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddDNSZoneForSubnetsV1OK), nil

}

/*
DeleteDNSARecordV1 deletes the a record in DNS zone and tries to delete p t r if exists

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSARecordV1(params *DeleteDNSARecordV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSARecordV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsARecordV1",
		Method:             "DELETE",
		PathPattern:        "/v1/dns/record/a",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSARecordV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDNSCnameRecordV1 deletes the c n a m e record in DNS zone

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSCnameRecordV1(params *DeleteDNSCnameRecordV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSCnameRecordV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsCnameRecordV1",
		Method:             "DELETE",
		PathPattern:        "/v1/dns/record/cname",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSCnameRecordV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDNSRecordByFqdnV1 deletes all related a and p t r DNS record

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSRecordByFqdnV1(params *DeleteDNSRecordByFqdnV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSRecordByFqdnV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsRecordByFqdnV1",
		Method:             "DELETE",
		PathPattern:        "/v1/dns/record",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSRecordByFqdnV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDNSZoneBySubnetIDV1 deletes reverse DNS zone entry by subnet ID

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSZoneBySubnetIDV1(params *DeleteDNSZoneBySubnetIDV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneBySubnetIDV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsZoneBySubnetIdV1",
		Method:             "DELETE",
		PathPattern:        "/v1/dns/zone/id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSZoneBySubnetIDV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDNSZoneBySubnetV1 deletes reverse DNS zone entry by subnet c ID r

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) DeleteDNSZoneBySubnetV1(params *DeleteDNSZoneBySubnetV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDNSZoneBySubnetV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDnsZoneBySubnetV1",
		Method:             "DELETE",
		PathPattern:        "/v1/dns/zone/cidr",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDNSZoneBySubnetV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ListDNSZonesV1 lists DNS zones available in free IP a

FreeIPA is an integrated Identity and Authentication solution that can be used for any of CM, CDP services.
*/
func (a *Client) ListDNSZonesV1(params *ListDNSZonesV1Params) (*ListDNSZonesV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDNSZonesV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDnsZonesV1",
		Method:             "GET",
		PathPattern:        "/v1/dns/zone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDNSZonesV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDNSZonesV1OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
