// Code generated by go-swagger; DO NOT EDIT.

package v1dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDNSZoneBySubnetV1Params creates a new DeleteDNSZoneBySubnetV1Params object
// with the default values initialized.
func NewDeleteDNSZoneBySubnetV1Params() *DeleteDNSZoneBySubnetV1Params {
	var ()
	return &DeleteDNSZoneBySubnetV1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDNSZoneBySubnetV1ParamsWithTimeout creates a new DeleteDNSZoneBySubnetV1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDNSZoneBySubnetV1ParamsWithTimeout(timeout time.Duration) *DeleteDNSZoneBySubnetV1Params {
	var ()
	return &DeleteDNSZoneBySubnetV1Params{

		timeout: timeout,
	}
}

// NewDeleteDNSZoneBySubnetV1ParamsWithContext creates a new DeleteDNSZoneBySubnetV1Params object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDNSZoneBySubnetV1ParamsWithContext(ctx context.Context) *DeleteDNSZoneBySubnetV1Params {
	var ()
	return &DeleteDNSZoneBySubnetV1Params{

		Context: ctx,
	}
}

// NewDeleteDNSZoneBySubnetV1ParamsWithHTTPClient creates a new DeleteDNSZoneBySubnetV1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDNSZoneBySubnetV1ParamsWithHTTPClient(client *http.Client) *DeleteDNSZoneBySubnetV1Params {
	var ()
	return &DeleteDNSZoneBySubnetV1Params{
		HTTPClient: client,
	}
}

/*DeleteDNSZoneBySubnetV1Params contains all the parameters to send to the API endpoint
for the delete Dns zone by subnet v1 operation typically these are written to a http.Request
*/
type DeleteDNSZoneBySubnetV1Params struct {

	/*Environment*/
	Environment *string
	/*Subnet*/
	Subnet *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) WithTimeout(timeout time.Duration) *DeleteDNSZoneBySubnetV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) WithContext(ctx context.Context) *DeleteDNSZoneBySubnetV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) WithHTTPClient(client *http.Client) *DeleteDNSZoneBySubnetV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironment adds the environment to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) WithEnvironment(environment *string) *DeleteDNSZoneBySubnetV1Params {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithSubnet adds the subnet to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) WithSubnet(subnet *string) *DeleteDNSZoneBySubnetV1Params {
	o.SetSubnet(subnet)
	return o
}

// SetSubnet adds the subnet to the delete Dns zone by subnet v1 params
func (o *DeleteDNSZoneBySubnetV1Params) SetSubnet(subnet *string) {
	o.Subnet = subnet
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDNSZoneBySubnetV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.Subnet != nil {

		// query param subnet
		var qrSubnet string
		if o.Subnet != nil {
			qrSubnet = *o.Subnet
		}
		qSubnet := qrSubnet
		if qSubnet != "" {
			if err := r.SetQueryParam("subnet", qSubnet); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
