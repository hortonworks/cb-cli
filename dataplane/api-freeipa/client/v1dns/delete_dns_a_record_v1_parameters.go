// Code generated by go-swagger; DO NOT EDIT.

package v1dns

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDNSARecordV1Params creates a new DeleteDNSARecordV1Params object
// with the default values initialized.
func NewDeleteDNSARecordV1Params() *DeleteDNSARecordV1Params {
	var ()
	return &DeleteDNSARecordV1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDNSARecordV1ParamsWithTimeout creates a new DeleteDNSARecordV1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDNSARecordV1ParamsWithTimeout(timeout time.Duration) *DeleteDNSARecordV1Params {
	var ()
	return &DeleteDNSARecordV1Params{

		timeout: timeout,
	}
}

// NewDeleteDNSARecordV1ParamsWithContext creates a new DeleteDNSARecordV1Params object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDNSARecordV1ParamsWithContext(ctx context.Context) *DeleteDNSARecordV1Params {
	var ()
	return &DeleteDNSARecordV1Params{

		Context: ctx,
	}
}

// NewDeleteDNSARecordV1ParamsWithHTTPClient creates a new DeleteDNSARecordV1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDNSARecordV1ParamsWithHTTPClient(client *http.Client) *DeleteDNSARecordV1Params {
	var ()
	return &DeleteDNSARecordV1Params{
		HTTPClient: client,
	}
}

/*DeleteDNSARecordV1Params contains all the parameters to send to the API endpoint
for the delete Dns a record v1 operation typically these are written to a http.Request
*/
type DeleteDNSARecordV1Params struct {

	/*DNSZone*/
	DNSZone *string
	/*Environment*/
	Environment *string
	/*Hostname*/
	Hostname *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithTimeout(timeout time.Duration) *DeleteDNSARecordV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithContext(ctx context.Context) *DeleteDNSARecordV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithHTTPClient(client *http.Client) *DeleteDNSARecordV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDNSZone adds the dNSZone to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithDNSZone(dNSZone *string) *DeleteDNSARecordV1Params {
	o.SetDNSZone(dNSZone)
	return o
}

// SetDNSZone adds the dnsZone to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetDNSZone(dNSZone *string) {
	o.DNSZone = dNSZone
}

// WithEnvironment adds the environment to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithEnvironment(environment *string) *DeleteDNSARecordV1Params {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithHostname adds the hostname to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) WithHostname(hostname *string) *DeleteDNSARecordV1Params {
	o.SetHostname(hostname)
	return o
}

// SetHostname adds the hostname to the delete Dns a record v1 params
func (o *DeleteDNSARecordV1Params) SetHostname(hostname *string) {
	o.Hostname = hostname
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDNSARecordV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.DNSZone != nil {

		// query param dnsZone
		var qrDNSZone string
		if o.DNSZone != nil {
			qrDNSZone = *o.DNSZone
		}
		qDNSZone := qrDNSZone
		if qDNSZone != "" {
			if err := r.SetQueryParam("dnsZone", qDNSZone); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.Hostname != nil {

		// query param hostname
		var qrHostname string
		if o.Hostname != nil {
			qrHostname = *o.Hostname
		}
		qHostname := qrHostname
		if qHostname != "" {
			if err := r.SetQueryParam("hostname", qHostname); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
