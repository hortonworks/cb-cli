// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateFreeIpaV1Request create free ipa v1 request
// swagger:model CreateFreeIpaV1Request
type CreateFreeIpaV1Request struct {

	// freeipa stack related authentication
	// Required: true
	Authentication *StackAuthenticationV1Request `json:"authentication"`

	// CRN of the environment
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// settings for freeipa server
	// Required: true
	FreeIpa *FreeIpaServerV1Request `json:"freeIpa"`

	// port of the gateway secured proxy
	// Maximum: 65535
	// Minimum: 1025
	GatewayPort int32 `json:"gatewayPort,omitempty"`

	// settings for custom images
	Image *ImageSettingsV1Request `json:"image,omitempty"`

	// collection of instance groupst
	// Required: true
	InstanceGroups []*InstanceGroupV1Request `json:"instanceGroups"`

	// name of the freeipa stack
	// Required: true
	Name *string `json:"name"`

	// freeipa stack related network
	Network *NetworkV1Request `json:"network,omitempty"`

	// placement configuration parameters for a cluster (e.g. 'region', 'availabilityZone')
	// Required: true
	Placement *PlacementV1Request `json:"placement"`

	// Tags for freeipa server.
	Tags *TagsRequest `json:"tags,omitempty"`

	// telemetry setting for freeipa server
	Telemetry *TelemetryRequest `json:"telemetry,omitempty"`

	// Configuration that the connection going directly or with cluster proxy or with ccm and cluster proxy.
	// Enum: [DIRECT CCM CLUSTER_PROXY]
	Tunnel string `json:"tunnel,omitempty"`

	// whether to use CCM for communicating with the freeipa instance
	UseCcm bool `json:"useCcm,omitempty"`
}

// Validate validates this create free ipa v1 request
func (m *CreateFreeIpaV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFreeIpa(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGatewayPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlacement(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelemetry(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTunnel(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateFreeIpaV1Request) validateAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("authentication", "body", m.Authentication); err != nil {
		return err
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateFreeIpa(formats strfmt.Registry) error {

	if err := validate.Required("freeIpa", "body", m.FreeIpa); err != nil {
		return err
	}

	if m.FreeIpa != nil {
		if err := m.FreeIpa.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("freeIpa")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateGatewayPort(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayPort) { // not required
		return nil
	}

	if err := validate.MinimumInt("gatewayPort", "body", int64(m.GatewayPort), 1025, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("gatewayPort", "body", int64(m.GatewayPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateImage(formats strfmt.Registry) error {

	if swag.IsZero(m.Image) { // not required
		return nil
	}

	if m.Image != nil {
		if err := m.Image.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("image")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateInstanceGroups(formats strfmt.Registry) error {

	if err := validate.Required("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceGroups); i++ {
		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validatePlacement(formats strfmt.Registry) error {

	if err := validate.Required("placement", "body", m.Placement); err != nil {
		return err
	}

	if m.Placement != nil {
		if err := m.Placement.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("placement")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateTags(formats strfmt.Registry) error {

	if swag.IsZero(m.Tags) { // not required
		return nil
	}

	if m.Tags != nil {
		if err := m.Tags.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tags")
			}
			return err
		}
	}

	return nil
}

func (m *CreateFreeIpaV1Request) validateTelemetry(formats strfmt.Registry) error {

	if swag.IsZero(m.Telemetry) { // not required
		return nil
	}

	if m.Telemetry != nil {
		if err := m.Telemetry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("telemetry")
			}
			return err
		}
	}

	return nil
}

var createFreeIpaV1RequestTypeTunnelPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DIRECT","CCM","CLUSTER_PROXY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		createFreeIpaV1RequestTypeTunnelPropEnum = append(createFreeIpaV1RequestTypeTunnelPropEnum, v)
	}
}

const (

	// CreateFreeIpaV1RequestTunnelDIRECT captures enum value "DIRECT"
	CreateFreeIpaV1RequestTunnelDIRECT string = "DIRECT"

	// CreateFreeIpaV1RequestTunnelCCM captures enum value "CCM"
	CreateFreeIpaV1RequestTunnelCCM string = "CCM"

	// CreateFreeIpaV1RequestTunnelCLUSTERPROXY captures enum value "CLUSTER_PROXY"
	CreateFreeIpaV1RequestTunnelCLUSTERPROXY string = "CLUSTER_PROXY"
)

// prop value enum
func (m *CreateFreeIpaV1Request) validateTunnelEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, createFreeIpaV1RequestTypeTunnelPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CreateFreeIpaV1Request) validateTunnel(formats strfmt.Registry) error {

	if swag.IsZero(m.Tunnel) { // not required
		return nil
	}

	// value enum
	if err := m.validateTunnelEnum("tunnel", "body", m.Tunnel); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateFreeIpaV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateFreeIpaV1Request) UnmarshalBinary(b []byte) error {
	var res CreateFreeIpaV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
