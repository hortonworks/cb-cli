// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CleanupV1Request cleanup v1 request
// swagger:model CleanupV1Request
type CleanupV1Request struct {

	// cleanup steps to skip
	// Unique: true
	CleanupStepsToSkip []string `json:"cleanupStepsToSkip"`

	// cluster name
	ClusterName string `json:"clusterName,omitempty"`

	// CRN of the environment
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// hosts
	// Unique: true
	Hosts []string `json:"hosts"`

	// ips
	// Unique: true
	Ips []string `json:"ips"`

	// roles
	// Unique: true
	Roles []string `json:"roles"`

	// users
	// Unique: true
	Users []string `json:"users"`
}

// Validate validates this cleanup v1 request
func (m *CleanupV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCleanupStepsToSkip(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoles(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cleanupV1RequestCleanupStepsToSkipItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REVOKE_CERTS","REMOVE_HOSTS","REMOVE_DNS_ENTRIES","REMOVE_VAULT_ENTRIES","REMOVE_USERS","REMOVE_ROLES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cleanupV1RequestCleanupStepsToSkipItemsEnum = append(cleanupV1RequestCleanupStepsToSkipItemsEnum, v)
	}
}

func (m *CleanupV1Request) validateCleanupStepsToSkipItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cleanupV1RequestCleanupStepsToSkipItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *CleanupV1Request) validateCleanupStepsToSkip(formats strfmt.Registry) error {

	if swag.IsZero(m.CleanupStepsToSkip) { // not required
		return nil
	}

	if err := validate.UniqueItems("cleanupStepsToSkip", "body", m.CleanupStepsToSkip); err != nil {
		return err
	}

	for i := 0; i < len(m.CleanupStepsToSkip); i++ {

		// value enum
		if err := m.validateCleanupStepsToSkipItemsEnum("cleanupStepsToSkip"+"."+strconv.Itoa(i), "body", m.CleanupStepsToSkip[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *CleanupV1Request) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *CleanupV1Request) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	if err := validate.UniqueItems("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

func (m *CleanupV1Request) validateIps(formats strfmt.Registry) error {

	if swag.IsZero(m.Ips) { // not required
		return nil
	}

	if err := validate.UniqueItems("ips", "body", m.Ips); err != nil {
		return err
	}

	return nil
}

func (m *CleanupV1Request) validateRoles(formats strfmt.Registry) error {

	if swag.IsZero(m.Roles) { // not required
		return nil
	}

	if err := validate.UniqueItems("roles", "body", m.Roles); err != nil {
		return err
	}

	return nil
}

func (m *CleanupV1Request) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if err := validate.UniqueItems("users", "body", m.Users); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CleanupV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CleanupV1Request) UnmarshalBinary(b []byte) error {
	var res CleanupV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
