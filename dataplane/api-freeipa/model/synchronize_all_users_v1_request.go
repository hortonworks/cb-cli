// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SynchronizeAllUsersV1Request synchronize all users v1 request
// swagger:model SynchronizeAllUsersV1Request
type SynchronizeAllUsersV1Request struct {

	// The id of the account to run sync on
	AccountID string `json:"accountId,omitempty"`

	// Optional workload user name to be deleted. Currently only 1 deleted user is supported. When this is included, there should also be exactly 1 crn in the machineUsers or users set that corresponds to the deleted workload user.
	// Unique: true
	DeletedWorkloadUsers []string `json:"deletedWorkloadUsers"`

	// Optional environment crns to sync
	// Unique: true
	Environments []string `json:"environments"`

	// Optional machine user crns to sync
	// Unique: true
	MachineUsers []string `json:"machineUsers"`

	// Optional user crns to sync
	// Unique: true
	Users []string `json:"users"`
}

// Validate validates this synchronize all users v1 request
func (m *SynchronizeAllUsersV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeletedWorkloadUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMachineUsers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsers(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SynchronizeAllUsersV1Request) validateDeletedWorkloadUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.DeletedWorkloadUsers) { // not required
		return nil
	}

	if err := validate.UniqueItems("deletedWorkloadUsers", "body", m.DeletedWorkloadUsers); err != nil {
		return err
	}

	return nil
}

func (m *SynchronizeAllUsersV1Request) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	if err := validate.UniqueItems("environments", "body", m.Environments); err != nil {
		return err
	}

	return nil
}

func (m *SynchronizeAllUsersV1Request) validateMachineUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.MachineUsers) { // not required
		return nil
	}

	if err := validate.UniqueItems("machineUsers", "body", m.MachineUsers); err != nil {
		return err
	}

	return nil
}

func (m *SynchronizeAllUsersV1Request) validateUsers(formats strfmt.Registry) error {

	if swag.IsZero(m.Users) { // not required
		return nil
	}

	if err := validate.UniqueItems("users", "body", m.Users); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SynchronizeAllUsersV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SynchronizeAllUsersV1Request) UnmarshalBinary(b []byte) error {
	var res SynchronizeAllUsersV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
