// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OperationView operation view
// swagger:model OperationView
type OperationView struct {

	// operation Id
	OperationID string `json:"operationId,omitempty"`

	// operation resource
	// Enum: [UNKNOWN ENVIRONMENT FREEIPA DATALAKE DATAHUB REMOTEDB]
	OperationResource string `json:"operationResource,omitempty"`

	// operation type
	// Enum: [UNKNOWN PROVISION DIAGNOSTICS]
	OperationType string `json:"operationType,omitempty"`

	// operations
	Operations []*FlowProgressResponse `json:"operations"`

	// progress
	Progress int32 `json:"progress,omitempty"`

	// progress status
	// Enum: [UNKNOWN RUNNING FINISHED CANCELLED FAILED]
	ProgressStatus string `json:"progressStatus,omitempty"`

	// sub operation conditions
	SubOperationConditions map[string]string `json:"subOperationConditions,omitempty"`

	// sub operations
	SubOperations map[string]OperationView `json:"subOperations,omitempty"`
}

// Validate validates this operation view
func (m *OperationView) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOperationResource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperationType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProgressStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubOperationConditions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubOperations(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var operationViewTypeOperationResourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","ENVIRONMENT","FREEIPA","DATALAKE","DATAHUB","REMOTEDB"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationViewTypeOperationResourcePropEnum = append(operationViewTypeOperationResourcePropEnum, v)
	}
}

const (

	// OperationViewOperationResourceUNKNOWN captures enum value "UNKNOWN"
	OperationViewOperationResourceUNKNOWN string = "UNKNOWN"

	// OperationViewOperationResourceENVIRONMENT captures enum value "ENVIRONMENT"
	OperationViewOperationResourceENVIRONMENT string = "ENVIRONMENT"

	// OperationViewOperationResourceFREEIPA captures enum value "FREEIPA"
	OperationViewOperationResourceFREEIPA string = "FREEIPA"

	// OperationViewOperationResourceDATALAKE captures enum value "DATALAKE"
	OperationViewOperationResourceDATALAKE string = "DATALAKE"

	// OperationViewOperationResourceDATAHUB captures enum value "DATAHUB"
	OperationViewOperationResourceDATAHUB string = "DATAHUB"

	// OperationViewOperationResourceREMOTEDB captures enum value "REMOTEDB"
	OperationViewOperationResourceREMOTEDB string = "REMOTEDB"
)

// prop value enum
func (m *OperationView) validateOperationResourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, operationViewTypeOperationResourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OperationView) validateOperationResource(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationResource) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationResourceEnum("operationResource", "body", m.OperationResource); err != nil {
		return err
	}

	return nil
}

var operationViewTypeOperationTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","PROVISION","DIAGNOSTICS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationViewTypeOperationTypePropEnum = append(operationViewTypeOperationTypePropEnum, v)
	}
}

const (

	// OperationViewOperationTypeUNKNOWN captures enum value "UNKNOWN"
	OperationViewOperationTypeUNKNOWN string = "UNKNOWN"

	// OperationViewOperationTypePROVISION captures enum value "PROVISION"
	OperationViewOperationTypePROVISION string = "PROVISION"

	// OperationViewOperationTypeDIAGNOSTICS captures enum value "DIAGNOSTICS"
	OperationViewOperationTypeDIAGNOSTICS string = "DIAGNOSTICS"
)

// prop value enum
func (m *OperationView) validateOperationTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, operationViewTypeOperationTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OperationView) validateOperationType(formats strfmt.Registry) error {

	if swag.IsZero(m.OperationType) { // not required
		return nil
	}

	// value enum
	if err := m.validateOperationTypeEnum("operationType", "body", m.OperationType); err != nil {
		return err
	}

	return nil
}

func (m *OperationView) validateOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.Operations) { // not required
		return nil
	}

	for i := 0; i < len(m.Operations); i++ {
		if swag.IsZero(m.Operations[i]) { // not required
			continue
		}

		if m.Operations[i] != nil {
			if err := m.Operations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("operations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var operationViewTypeProgressStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","RUNNING","FINISHED","CANCELLED","FAILED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationViewTypeProgressStatusPropEnum = append(operationViewTypeProgressStatusPropEnum, v)
	}
}

const (

	// OperationViewProgressStatusUNKNOWN captures enum value "UNKNOWN"
	OperationViewProgressStatusUNKNOWN string = "UNKNOWN"

	// OperationViewProgressStatusRUNNING captures enum value "RUNNING"
	OperationViewProgressStatusRUNNING string = "RUNNING"

	// OperationViewProgressStatusFINISHED captures enum value "FINISHED"
	OperationViewProgressStatusFINISHED string = "FINISHED"

	// OperationViewProgressStatusCANCELLED captures enum value "CANCELLED"
	OperationViewProgressStatusCANCELLED string = "CANCELLED"

	// OperationViewProgressStatusFAILED captures enum value "FAILED"
	OperationViewProgressStatusFAILED string = "FAILED"
)

// prop value enum
func (m *OperationView) validateProgressStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, operationViewTypeProgressStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *OperationView) validateProgressStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ProgressStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateProgressStatusEnum("progressStatus", "body", m.ProgressStatus); err != nil {
		return err
	}

	return nil
}

// additional properties value enum
var operationViewSubOperationConditionsValueEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","REQUIRED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		operationViewSubOperationConditionsValueEnum = append(operationViewSubOperationConditionsValueEnum, v)
	}
}

func (m *OperationView) validateSubOperationConditionsValueEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, operationViewSubOperationConditionsValueEnum); err != nil {
		return err
	}
	return nil
}

func (m *OperationView) validateSubOperationConditions(formats strfmt.Registry) error {

	if swag.IsZero(m.SubOperationConditions) { // not required
		return nil
	}

	for k := range m.SubOperationConditions {

		// value enum
		if err := m.validateSubOperationConditionsValueEnum("subOperationConditions"+"."+k, "body", m.SubOperationConditions[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *OperationView) validateSubOperations(formats strfmt.Registry) error {

	if swag.IsZero(m.SubOperations) { // not required
		return nil
	}

	for k := range m.SubOperations {

		if err := validate.Required("subOperations"+"."+k, "body", m.SubOperations[k]); err != nil {
			return err
		}
		if val, ok := m.SubOperations[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OperationView) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OperationView) UnmarshalBinary(b []byte) error {
	var res OperationView
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
