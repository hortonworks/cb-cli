// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ServiceKeytabV1Request service keytab v1 request
// swagger:model ServiceKeytabV1Request
type ServiceKeytabV1Request struct {

	// If true existing keytab won't be overriden for service in normal scenario. Preserving the keytab is best effort, it may invalidate prior keytabs.
	DoNotRecreateKeytab bool `json:"doNotRecreateKeytab,omitempty"`

	// CRN of the environment
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Role request for adding roles and privileges to service
	RoleRequest *RoleV1Request `json:"roleRequest,omitempty"`

	// Hostname where the service is running
	// Required: true
	ServerHostName *string `json:"serverHostName"`

	// Service requesting keytab
	// Required: true
	ServiceName *string `json:"serviceName"`
}

// Validate validates this service keytab v1 request
func (m *ServiceKeytabV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRoleRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServerHostName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ServiceKeytabV1Request) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *ServiceKeytabV1Request) validateRoleRequest(formats strfmt.Registry) error {

	if swag.IsZero(m.RoleRequest) { // not required
		return nil
	}

	if m.RoleRequest != nil {
		if err := m.RoleRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("roleRequest")
			}
			return err
		}
	}

	return nil
}

func (m *ServiceKeytabV1Request) validateServerHostName(formats strfmt.Registry) error {

	if err := validate.Required("serverHostName", "body", m.ServerHostName); err != nil {
		return err
	}

	return nil
}

func (m *ServiceKeytabV1Request) validateServiceName(formats strfmt.Registry) error {

	if err := validate.Required("serviceName", "body", m.ServiceName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ServiceKeytabV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ServiceKeytabV1Request) UnmarshalBinary(b []byte) error {
	var res ServiceKeytabV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
