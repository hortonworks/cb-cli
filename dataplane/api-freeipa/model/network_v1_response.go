// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NetworkV1Response network v1 response
// swagger:model NetworkV1Response
type NetworkV1Response struct {

	// provider specific parameters of the specified network
	Aws *AwsNetworkV1Parameters `json:"aws,omitempty"`

	// provider specific parameters of the specified network
	Azure *AzureNetworkV1Parameters `json:"azure,omitempty"`

	// provider specific parameters of the specified network
	Gcp *GcpNetworkV1Parameters `json:"gcp,omitempty"`

	// mock
	Mock *MockNetworkV1Parameters `json:"mock,omitempty"`

	// the network cidrs which have to be reacheable from the instances
	NetworkCidrs []string `json:"networkCidrs"`

	// A flag to enable or disable the outbound internet traffic from the instances.
	// Enum: [ENABLED DISABLED]
	OutboundInternetTraffic string `json:"outboundInternetTraffic,omitempty"`
}

// Validate validates this network v1 response
func (m *NetworkV1Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundInternetTraffic(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NetworkV1Response) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkV1Response) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkV1Response) validateGcp(formats strfmt.Registry) error {

	if swag.IsZero(m.Gcp) { // not required
		return nil
	}

	if m.Gcp != nil {
		if err := m.Gcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *NetworkV1Response) validateMock(formats strfmt.Registry) error {

	if swag.IsZero(m.Mock) { // not required
		return nil
	}

	if m.Mock != nil {
		if err := m.Mock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mock")
			}
			return err
		}
	}

	return nil
}

var networkV1ResponseTypeOutboundInternetTrafficPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		networkV1ResponseTypeOutboundInternetTrafficPropEnum = append(networkV1ResponseTypeOutboundInternetTrafficPropEnum, v)
	}
}

const (

	// NetworkV1ResponseOutboundInternetTrafficENABLED captures enum value "ENABLED"
	NetworkV1ResponseOutboundInternetTrafficENABLED string = "ENABLED"

	// NetworkV1ResponseOutboundInternetTrafficDISABLED captures enum value "DISABLED"
	NetworkV1ResponseOutboundInternetTrafficDISABLED string = "DISABLED"
)

// prop value enum
func (m *NetworkV1Response) validateOutboundInternetTrafficEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, networkV1ResponseTypeOutboundInternetTrafficPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NetworkV1Response) validateOutboundInternetTraffic(formats strfmt.Registry) error {

	if swag.IsZero(m.OutboundInternetTraffic) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutboundInternetTrafficEnum("outboundInternetTraffic", "body", m.OutboundInternetTraffic); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NetworkV1Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NetworkV1Response) UnmarshalBinary(b []byte) error {
	var res NetworkV1Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
