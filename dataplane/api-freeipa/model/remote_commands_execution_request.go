// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RemoteCommandsExecutionRequest remote commands execution request
// swagger:model RemoteCommandsExecutionRequest
type RemoteCommandsExecutionRequest struct {

	// Command that will be executed on hosts remotely.
	Command string `json:"command,omitempty"`

	// Host groups (instance groups), used it to run remote commands only those hosts that are included the specific host groups.
	// Unique: true
	HostGroups []string `json:"hostGroups"`

	// Host (fqdn) filter, use it to run remote commands on only specific hosts.
	// Unique: true
	Hosts []string `json:"hosts"`
}

// Validate validates this remote commands execution request
func (m *RemoteCommandsExecutionRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHosts(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RemoteCommandsExecutionRequest) validateHostGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	return nil
}

func (m *RemoteCommandsExecutionRequest) validateHosts(formats strfmt.Registry) error {

	if swag.IsZero(m.Hosts) { // not required
		return nil
	}

	if err := validate.UniqueItems("hosts", "body", m.Hosts); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RemoteCommandsExecutionRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RemoteCommandsExecutionRequest) UnmarshalBinary(b []byte) error {
	var res RemoteCommandsExecutionRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
