// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NodeHealthDetails node health details
// swagger:model NodeHealthDetails
type NodeHealthDetails struct {

	// instance Id
	// Required: true
	InstanceID *string `json:"instanceId"`

	// issues
	// Required: true
	Issues []string `json:"issues"`

	// name
	// Required: true
	Name *string `json:"name"`

	// status
	// Required: true
	// Enum: [REQUESTED CREATE_IN_PROGRESS AVAILABLE STACK_AVAILABLE UPDATE_IN_PROGRESS UPDATE_REQUESTED UPDATE_FAILED CREATE_FAILED DELETE_IN_PROGRESS DELETE_FAILED DELETE_COMPLETED STOPPED STOP_REQUESTED START_REQUESTED STOP_IN_PROGRESS START_IN_PROGRESS START_FAILED STOP_FAILED WAIT_FOR_SYNC MAINTENANCE_MODE_ENABLED UNREACHABLE UNHEALTHY DELETED_ON_PROVIDER_SIDE UNKNOWN]
	Status *string `json:"status"`
}

// Validate validates this node health details
func (m *NodeHealthDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssues(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NodeHealthDetails) validateInstanceID(formats strfmt.Registry) error {

	if err := validate.Required("instanceId", "body", m.InstanceID); err != nil {
		return err
	}

	return nil
}

func (m *NodeHealthDetails) validateIssues(formats strfmt.Registry) error {

	if err := validate.Required("issues", "body", m.Issues); err != nil {
		return err
	}

	return nil
}

func (m *NodeHealthDetails) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var nodeHealthDetailsTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","STACK_AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC","MAINTENANCE_MODE_ENABLED","UNREACHABLE","UNHEALTHY","DELETED_ON_PROVIDER_SIDE","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		nodeHealthDetailsTypeStatusPropEnum = append(nodeHealthDetailsTypeStatusPropEnum, v)
	}
}

const (

	// NodeHealthDetailsStatusREQUESTED captures enum value "REQUESTED"
	NodeHealthDetailsStatusREQUESTED string = "REQUESTED"

	// NodeHealthDetailsStatusCREATEINPROGRESS captures enum value "CREATE_IN_PROGRESS"
	NodeHealthDetailsStatusCREATEINPROGRESS string = "CREATE_IN_PROGRESS"

	// NodeHealthDetailsStatusAVAILABLE captures enum value "AVAILABLE"
	NodeHealthDetailsStatusAVAILABLE string = "AVAILABLE"

	// NodeHealthDetailsStatusSTACKAVAILABLE captures enum value "STACK_AVAILABLE"
	NodeHealthDetailsStatusSTACKAVAILABLE string = "STACK_AVAILABLE"

	// NodeHealthDetailsStatusUPDATEINPROGRESS captures enum value "UPDATE_IN_PROGRESS"
	NodeHealthDetailsStatusUPDATEINPROGRESS string = "UPDATE_IN_PROGRESS"

	// NodeHealthDetailsStatusUPDATEREQUESTED captures enum value "UPDATE_REQUESTED"
	NodeHealthDetailsStatusUPDATEREQUESTED string = "UPDATE_REQUESTED"

	// NodeHealthDetailsStatusUPDATEFAILED captures enum value "UPDATE_FAILED"
	NodeHealthDetailsStatusUPDATEFAILED string = "UPDATE_FAILED"

	// NodeHealthDetailsStatusCREATEFAILED captures enum value "CREATE_FAILED"
	NodeHealthDetailsStatusCREATEFAILED string = "CREATE_FAILED"

	// NodeHealthDetailsStatusDELETEINPROGRESS captures enum value "DELETE_IN_PROGRESS"
	NodeHealthDetailsStatusDELETEINPROGRESS string = "DELETE_IN_PROGRESS"

	// NodeHealthDetailsStatusDELETEFAILED captures enum value "DELETE_FAILED"
	NodeHealthDetailsStatusDELETEFAILED string = "DELETE_FAILED"

	// NodeHealthDetailsStatusDELETECOMPLETED captures enum value "DELETE_COMPLETED"
	NodeHealthDetailsStatusDELETECOMPLETED string = "DELETE_COMPLETED"

	// NodeHealthDetailsStatusSTOPPED captures enum value "STOPPED"
	NodeHealthDetailsStatusSTOPPED string = "STOPPED"

	// NodeHealthDetailsStatusSTOPREQUESTED captures enum value "STOP_REQUESTED"
	NodeHealthDetailsStatusSTOPREQUESTED string = "STOP_REQUESTED"

	// NodeHealthDetailsStatusSTARTREQUESTED captures enum value "START_REQUESTED"
	NodeHealthDetailsStatusSTARTREQUESTED string = "START_REQUESTED"

	// NodeHealthDetailsStatusSTOPINPROGRESS captures enum value "STOP_IN_PROGRESS"
	NodeHealthDetailsStatusSTOPINPROGRESS string = "STOP_IN_PROGRESS"

	// NodeHealthDetailsStatusSTARTINPROGRESS captures enum value "START_IN_PROGRESS"
	NodeHealthDetailsStatusSTARTINPROGRESS string = "START_IN_PROGRESS"

	// NodeHealthDetailsStatusSTARTFAILED captures enum value "START_FAILED"
	NodeHealthDetailsStatusSTARTFAILED string = "START_FAILED"

	// NodeHealthDetailsStatusSTOPFAILED captures enum value "STOP_FAILED"
	NodeHealthDetailsStatusSTOPFAILED string = "STOP_FAILED"

	// NodeHealthDetailsStatusWAITFORSYNC captures enum value "WAIT_FOR_SYNC"
	NodeHealthDetailsStatusWAITFORSYNC string = "WAIT_FOR_SYNC"

	// NodeHealthDetailsStatusMAINTENANCEMODEENABLED captures enum value "MAINTENANCE_MODE_ENABLED"
	NodeHealthDetailsStatusMAINTENANCEMODEENABLED string = "MAINTENANCE_MODE_ENABLED"

	// NodeHealthDetailsStatusUNREACHABLE captures enum value "UNREACHABLE"
	NodeHealthDetailsStatusUNREACHABLE string = "UNREACHABLE"

	// NodeHealthDetailsStatusUNHEALTHY captures enum value "UNHEALTHY"
	NodeHealthDetailsStatusUNHEALTHY string = "UNHEALTHY"

	// NodeHealthDetailsStatusDELETEDONPROVIDERSIDE captures enum value "DELETED_ON_PROVIDER_SIDE"
	NodeHealthDetailsStatusDELETEDONPROVIDERSIDE string = "DELETED_ON_PROVIDER_SIDE"

	// NodeHealthDetailsStatusUNKNOWN captures enum value "UNKNOWN"
	NodeHealthDetailsStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *NodeHealthDetails) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, nodeHealthDetailsTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NodeHealthDetails) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NodeHealthDetails) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NodeHealthDetails) UnmarshalBinary(b []byte) error {
	var res NodeHealthDetails
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
