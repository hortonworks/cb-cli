// Code generated by go-swagger; DO NOT EDIT.

package sdx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewBackupDatalakeParams creates a new BackupDatalakeParams object
// with the default values initialized.
func NewBackupDatalakeParams() *BackupDatalakeParams {
	var ()
	return &BackupDatalakeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewBackupDatalakeParamsWithTimeout creates a new BackupDatalakeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewBackupDatalakeParamsWithTimeout(timeout time.Duration) *BackupDatalakeParams {
	var ()
	return &BackupDatalakeParams{

		timeout: timeout,
	}
}

// NewBackupDatalakeParamsWithContext creates a new BackupDatalakeParams object
// with the default values initialized, and the ability to set a context for a request
func NewBackupDatalakeParamsWithContext(ctx context.Context) *BackupDatalakeParams {
	var ()
	return &BackupDatalakeParams{

		Context: ctx,
	}
}

// NewBackupDatalakeParamsWithHTTPClient creates a new BackupDatalakeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewBackupDatalakeParamsWithHTTPClient(client *http.Client) *BackupDatalakeParams {
	var ()
	return &BackupDatalakeParams{
		HTTPClient: client,
	}
}

/*BackupDatalakeParams contains all the parameters to send to the API endpoint
for the backup datalake operation typically these are written to a http.Request
*/
type BackupDatalakeParams struct {

	/*BackupLocation*/
	BackupLocation *string
	/*BackupName*/
	BackupName *string
	/*Name*/
	Name string
	/*SkipAtlasMetadata*/
	SkipAtlasMetadata *bool
	/*SkipRangerAudits*/
	SkipRangerAudits *bool
	/*SkipRangerMetadata*/
	SkipRangerMetadata *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the backup datalake params
func (o *BackupDatalakeParams) WithTimeout(timeout time.Duration) *BackupDatalakeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the backup datalake params
func (o *BackupDatalakeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the backup datalake params
func (o *BackupDatalakeParams) WithContext(ctx context.Context) *BackupDatalakeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the backup datalake params
func (o *BackupDatalakeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the backup datalake params
func (o *BackupDatalakeParams) WithHTTPClient(client *http.Client) *BackupDatalakeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the backup datalake params
func (o *BackupDatalakeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupLocation adds the backupLocation to the backup datalake params
func (o *BackupDatalakeParams) WithBackupLocation(backupLocation *string) *BackupDatalakeParams {
	o.SetBackupLocation(backupLocation)
	return o
}

// SetBackupLocation adds the backupLocation to the backup datalake params
func (o *BackupDatalakeParams) SetBackupLocation(backupLocation *string) {
	o.BackupLocation = backupLocation
}

// WithBackupName adds the backupName to the backup datalake params
func (o *BackupDatalakeParams) WithBackupName(backupName *string) *BackupDatalakeParams {
	o.SetBackupName(backupName)
	return o
}

// SetBackupName adds the backupName to the backup datalake params
func (o *BackupDatalakeParams) SetBackupName(backupName *string) {
	o.BackupName = backupName
}

// WithName adds the name to the backup datalake params
func (o *BackupDatalakeParams) WithName(name string) *BackupDatalakeParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the backup datalake params
func (o *BackupDatalakeParams) SetName(name string) {
	o.Name = name
}

// WithSkipAtlasMetadata adds the skipAtlasMetadata to the backup datalake params
func (o *BackupDatalakeParams) WithSkipAtlasMetadata(skipAtlasMetadata *bool) *BackupDatalakeParams {
	o.SetSkipAtlasMetadata(skipAtlasMetadata)
	return o
}

// SetSkipAtlasMetadata adds the skipAtlasMetadata to the backup datalake params
func (o *BackupDatalakeParams) SetSkipAtlasMetadata(skipAtlasMetadata *bool) {
	o.SkipAtlasMetadata = skipAtlasMetadata
}

// WithSkipRangerAudits adds the skipRangerAudits to the backup datalake params
func (o *BackupDatalakeParams) WithSkipRangerAudits(skipRangerAudits *bool) *BackupDatalakeParams {
	o.SetSkipRangerAudits(skipRangerAudits)
	return o
}

// SetSkipRangerAudits adds the skipRangerAudits to the backup datalake params
func (o *BackupDatalakeParams) SetSkipRangerAudits(skipRangerAudits *bool) {
	o.SkipRangerAudits = skipRangerAudits
}

// WithSkipRangerMetadata adds the skipRangerMetadata to the backup datalake params
func (o *BackupDatalakeParams) WithSkipRangerMetadata(skipRangerMetadata *bool) *BackupDatalakeParams {
	o.SetSkipRangerMetadata(skipRangerMetadata)
	return o
}

// SetSkipRangerMetadata adds the skipRangerMetadata to the backup datalake params
func (o *BackupDatalakeParams) SetSkipRangerMetadata(skipRangerMetadata *bool) {
	o.SkipRangerMetadata = skipRangerMetadata
}

// WriteToRequest writes these params to a swagger request
func (o *BackupDatalakeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackupLocation != nil {

		// query param backupLocation
		var qrBackupLocation string
		if o.BackupLocation != nil {
			qrBackupLocation = *o.BackupLocation
		}
		qBackupLocation := qrBackupLocation
		if qBackupLocation != "" {
			if err := r.SetQueryParam("backupLocation", qBackupLocation); err != nil {
				return err
			}
		}

	}

	if o.BackupName != nil {

		// query param backupName
		var qrBackupName string
		if o.BackupName != nil {
			qrBackupName = *o.BackupName
		}
		qBackupName := qrBackupName
		if qBackupName != "" {
			if err := r.SetQueryParam("backupName", qBackupName); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.SkipAtlasMetadata != nil {

		// query param skipAtlasMetadata
		var qrSkipAtlasMetadata bool
		if o.SkipAtlasMetadata != nil {
			qrSkipAtlasMetadata = *o.SkipAtlasMetadata
		}
		qSkipAtlasMetadata := swag.FormatBool(qrSkipAtlasMetadata)
		if qSkipAtlasMetadata != "" {
			if err := r.SetQueryParam("skipAtlasMetadata", qSkipAtlasMetadata); err != nil {
				return err
			}
		}

	}

	if o.SkipRangerAudits != nil {

		// query param skipRangerAudits
		var qrSkipRangerAudits bool
		if o.SkipRangerAudits != nil {
			qrSkipRangerAudits = *o.SkipRangerAudits
		}
		qSkipRangerAudits := swag.FormatBool(qrSkipRangerAudits)
		if qSkipRangerAudits != "" {
			if err := r.SetQueryParam("skipRangerAudits", qSkipRangerAudits); err != nil {
				return err
			}
		}

	}

	if o.SkipRangerMetadata != nil {

		// query param skipRangerMetadata
		var qrSkipRangerMetadata bool
		if o.SkipRangerMetadata != nil {
			qrSkipRangerMetadata = *o.SkipRangerMetadata
		}
		qSkipRangerMetadata := swag.FormatBool(qrSkipRangerMetadata)
		if qSkipRangerMetadata != "" {
			if err := r.SetQueryParam("skipRangerMetadata", qSkipRangerMetadata); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
