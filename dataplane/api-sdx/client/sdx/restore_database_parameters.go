// Code generated by go-swagger; DO NOT EDIT.

package sdx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewRestoreDatabaseParams creates a new RestoreDatabaseParams object
// with the default values initialized.
func NewRestoreDatabaseParams() *RestoreDatabaseParams {
	var ()
	return &RestoreDatabaseParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRestoreDatabaseParamsWithTimeout creates a new RestoreDatabaseParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRestoreDatabaseParamsWithTimeout(timeout time.Duration) *RestoreDatabaseParams {
	var ()
	return &RestoreDatabaseParams{

		timeout: timeout,
	}
}

// NewRestoreDatabaseParamsWithContext creates a new RestoreDatabaseParams object
// with the default values initialized, and the ability to set a context for a request
func NewRestoreDatabaseParamsWithContext(ctx context.Context) *RestoreDatabaseParams {
	var ()
	return &RestoreDatabaseParams{

		Context: ctx,
	}
}

// NewRestoreDatabaseParamsWithHTTPClient creates a new RestoreDatabaseParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRestoreDatabaseParamsWithHTTPClient(client *http.Client) *RestoreDatabaseParams {
	var ()
	return &RestoreDatabaseParams{
		HTTPClient: client,
	}
}

/*
RestoreDatabaseParams contains all the parameters to send to the API endpoint
for the restore database operation typically these are written to a http.Request
*/
type RestoreDatabaseParams struct {

	/*BackupID*/
	BackupID *string
	/*BackupLocation*/
	BackupLocation *string
	/*Name*/
	Name string
	/*RestoreID*/
	RestoreID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the restore database params
func (o *RestoreDatabaseParams) WithTimeout(timeout time.Duration) *RestoreDatabaseParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the restore database params
func (o *RestoreDatabaseParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the restore database params
func (o *RestoreDatabaseParams) WithContext(ctx context.Context) *RestoreDatabaseParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the restore database params
func (o *RestoreDatabaseParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the restore database params
func (o *RestoreDatabaseParams) WithHTTPClient(client *http.Client) *RestoreDatabaseParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the restore database params
func (o *RestoreDatabaseParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBackupID adds the backupID to the restore database params
func (o *RestoreDatabaseParams) WithBackupID(backupID *string) *RestoreDatabaseParams {
	o.SetBackupID(backupID)
	return o
}

// SetBackupID adds the backupId to the restore database params
func (o *RestoreDatabaseParams) SetBackupID(backupID *string) {
	o.BackupID = backupID
}

// WithBackupLocation adds the backupLocation to the restore database params
func (o *RestoreDatabaseParams) WithBackupLocation(backupLocation *string) *RestoreDatabaseParams {
	o.SetBackupLocation(backupLocation)
	return o
}

// SetBackupLocation adds the backupLocation to the restore database params
func (o *RestoreDatabaseParams) SetBackupLocation(backupLocation *string) {
	o.BackupLocation = backupLocation
}

// WithName adds the name to the restore database params
func (o *RestoreDatabaseParams) WithName(name string) *RestoreDatabaseParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the restore database params
func (o *RestoreDatabaseParams) SetName(name string) {
	o.Name = name
}

// WithRestoreID adds the restoreID to the restore database params
func (o *RestoreDatabaseParams) WithRestoreID(restoreID *string) *RestoreDatabaseParams {
	o.SetRestoreID(restoreID)
	return o
}

// SetRestoreID adds the restoreId to the restore database params
func (o *RestoreDatabaseParams) SetRestoreID(restoreID *string) {
	o.RestoreID = restoreID
}

// WriteToRequest writes these params to a swagger request
func (o *RestoreDatabaseParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.BackupID != nil {

		// query param backupId
		var qrBackupID string
		if o.BackupID != nil {
			qrBackupID = *o.BackupID
		}
		qBackupID := qrBackupID
		if qBackupID != "" {
			if err := r.SetQueryParam("backupId", qBackupID); err != nil {
				return err
			}
		}

	}

	if o.BackupLocation != nil {

		// query param backupLocation
		var qrBackupLocation string
		if o.BackupLocation != nil {
			qrBackupLocation = *o.BackupLocation
		}
		qBackupLocation := qrBackupLocation
		if qBackupLocation != "" {
			if err := r.SetQueryParam("backupLocation", qBackupLocation); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.RestoreID != nil {

		// query param restoreId
		var qrRestoreID string
		if o.RestoreID != nil {
			qrRestoreID = *o.RestoreID
		}
		qRestoreID := qrRestoreID
		if qRestoreID != "" {
			if err := r.SetQueryParam("restoreId", qRestoreID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
