// Code generated by go-swagger; DO NOT EDIT.

package sdx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetSdxDetailByCrnParams creates a new GetSdxDetailByCrnParams object
// with the default values initialized.
func NewGetSdxDetailByCrnParams() *GetSdxDetailByCrnParams {
	var ()
	return &GetSdxDetailByCrnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetSdxDetailByCrnParamsWithTimeout creates a new GetSdxDetailByCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetSdxDetailByCrnParamsWithTimeout(timeout time.Duration) *GetSdxDetailByCrnParams {
	var ()
	return &GetSdxDetailByCrnParams{

		timeout: timeout,
	}
}

// NewGetSdxDetailByCrnParamsWithContext creates a new GetSdxDetailByCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetSdxDetailByCrnParamsWithContext(ctx context.Context) *GetSdxDetailByCrnParams {
	var ()
	return &GetSdxDetailByCrnParams{

		Context: ctx,
	}
}

// NewGetSdxDetailByCrnParamsWithHTTPClient creates a new GetSdxDetailByCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetSdxDetailByCrnParamsWithHTTPClient(client *http.Client) *GetSdxDetailByCrnParams {
	var ()
	return &GetSdxDetailByCrnParams{
		HTTPClient: client,
	}
}

/*GetSdxDetailByCrnParams contains all the parameters to send to the API endpoint
for the get sdx detail by crn operation typically these are written to a http.Request
*/
type GetSdxDetailByCrnParams struct {

	/*ClusterCrn*/
	ClusterCrn string
	/*Entries*/
	Entries []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) WithTimeout(timeout time.Duration) *GetSdxDetailByCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) WithContext(ctx context.Context) *GetSdxDetailByCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) WithHTTPClient(client *http.Client) *GetSdxDetailByCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithClusterCrn adds the clusterCrn to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) WithClusterCrn(clusterCrn string) *GetSdxDetailByCrnParams {
	o.SetClusterCrn(clusterCrn)
	return o
}

// SetClusterCrn adds the clusterCrn to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) SetClusterCrn(clusterCrn string) {
	o.ClusterCrn = clusterCrn
}

// WithEntries adds the entries to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) WithEntries(entries []string) *GetSdxDetailByCrnParams {
	o.SetEntries(entries)
	return o
}

// SetEntries adds the entries to the get sdx detail by crn params
func (o *GetSdxDetailByCrnParams) SetEntries(entries []string) {
	o.Entries = entries
}

// WriteToRequest writes these params to a swagger request
func (o *GetSdxDetailByCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param clusterCrn
	if err := r.SetPathParam("clusterCrn", o.ClusterCrn); err != nil {
		return err
	}

	valuesEntries := o.Entries

	joinedEntries := swag.JoinByFormat(valuesEntries, "multi")
	// query array param entries
	if err := r.SetQueryParam("entries", joinedEntries...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
