// Code generated by go-swagger; DO NOT EDIT.

package internalsdx

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new internalsdx API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for internalsdx API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInternalSdx creates internal s d x cluster
*/
func (a *Client) CreateInternalSdx(params *CreateInternalSdxParams) (*CreateInternalSdxOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInternalSdxParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInternalSdx",
		Method:             "POST",
		PathPattern:        "/internal/sdx/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateInternalSdxReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateInternalSdxOK), nil

}

/*
RenewInternalSdxCertificate triggers a certificate renewal on the desired cluster which is identified via crn

Trigger a certificate renewal on the specified cluster.
*/
func (a *Client) RenewInternalSdxCertificate(params *RenewInternalSdxCertificateParams) (*RenewInternalSdxCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewInternalSdxCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renewInternalSdxCertificate",
		Method:             "POST",
		PathPattern:        "/internal/sdx/crn/{crn}/renew_certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RenewInternalSdxCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenewInternalSdxCertificateOK), nil

}

/*
UpdateDbEngineVersion updates the db engine version in the service db
*/
func (a *Client) UpdateDbEngineVersion(params *UpdateDbEngineVersionParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateDbEngineVersionParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateDbEngineVersion",
		Method:             "PUT",
		PathPattern:        "/internal/sdx/crn/{crn}/updateDbEngineVersion",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateDbEngineVersionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
