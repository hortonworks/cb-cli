// Code generated by go-swagger; DO NOT EDIT.

package diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	model "github.com/hortonworks/cb-cli/dataplane/api-sdx/model"
)

// NewCollectSdxCmBasedDiagnosticsParams creates a new CollectSdxCmBasedDiagnosticsParams object
// with the default values initialized.
func NewCollectSdxCmBasedDiagnosticsParams() *CollectSdxCmBasedDiagnosticsParams {
	var ()
	return &CollectSdxCmBasedDiagnosticsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewCollectSdxCmBasedDiagnosticsParamsWithTimeout creates a new CollectSdxCmBasedDiagnosticsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewCollectSdxCmBasedDiagnosticsParamsWithTimeout(timeout time.Duration) *CollectSdxCmBasedDiagnosticsParams {
	var ()
	return &CollectSdxCmBasedDiagnosticsParams{

		timeout: timeout,
	}
}

// NewCollectSdxCmBasedDiagnosticsParamsWithContext creates a new CollectSdxCmBasedDiagnosticsParams object
// with the default values initialized, and the ability to set a context for a request
func NewCollectSdxCmBasedDiagnosticsParamsWithContext(ctx context.Context) *CollectSdxCmBasedDiagnosticsParams {
	var ()
	return &CollectSdxCmBasedDiagnosticsParams{

		Context: ctx,
	}
}

// NewCollectSdxCmBasedDiagnosticsParamsWithHTTPClient creates a new CollectSdxCmBasedDiagnosticsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewCollectSdxCmBasedDiagnosticsParamsWithHTTPClient(client *http.Client) *CollectSdxCmBasedDiagnosticsParams {
	var ()
	return &CollectSdxCmBasedDiagnosticsParams{
		HTTPClient: client,
	}
}

/*
CollectSdxCmBasedDiagnosticsParams contains all the parameters to send to the API endpoint
for the collect sdx cm based diagnostics operation typically these are written to a http.Request
*/
type CollectSdxCmBasedDiagnosticsParams struct {

	/*Body*/
	Body *model.CmDiagnosticsCollectionRequest

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) WithTimeout(timeout time.Duration) *CollectSdxCmBasedDiagnosticsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) WithContext(ctx context.Context) *CollectSdxCmBasedDiagnosticsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) WithHTTPClient(client *http.Client) *CollectSdxCmBasedDiagnosticsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) WithBody(body *model.CmDiagnosticsCollectionRequest) *CollectSdxCmBasedDiagnosticsParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the collect sdx cm based diagnostics params
func (o *CollectSdxCmBasedDiagnosticsParams) SetBody(body *model.CmDiagnosticsCollectionRequest) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *CollectSdxCmBasedDiagnosticsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
