// Code generated by go-swagger; DO NOT EDIT.

package diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new diagnostics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for diagnostics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelSdxDiagnosticsCollections cancels the not finished diagnostics collections
*/
func (a *Client) CancelSdxDiagnosticsCollections(params *CancelSdxDiagnosticsCollectionsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelSdxDiagnosticsCollectionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelSdxDiagnosticsCollections",
		Method:             "POST",
		PathPattern:        "/diagnostics/{crn}/collections/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelSdxDiagnosticsCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CollectSdxCmBasedDiagnostics initiates the collection of diagnostical data through c m API requires a running c m server
*/
func (a *Client) CollectSdxCmBasedDiagnostics(params *CollectSdxCmBasedDiagnosticsParams) (*CollectSdxCmBasedDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectSdxCmBasedDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectSdxCmBasedDiagnostics",
		Method:             "POST",
		PathPattern:        "/diagnostics/cm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectSdxCmBasedDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectSdxCmBasedDiagnosticsOK), nil

}

/*
CollectSdxCmDiagnostics initiates the collection of diagnostical data on the hosts of the s d x
*/
func (a *Client) CollectSdxCmDiagnostics(params *CollectSdxCmDiagnosticsParams) (*CollectSdxCmDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectSdxCmDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectSdxCmDiagnostics",
		Method:             "POST",
		PathPattern:        "/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectSdxCmDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectSdxCmDiagnosticsOK), nil

}

/*
GetSdxCmRoles returns a list of c m roles that can be used for filtering the diagnostics results roles are immutable based on the deployment details
*/
func (a *Client) GetSdxCmRoles(params *GetSdxCmRolesParams) (*GetSdxCmRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSdxCmRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSdxCmRoles",
		Method:             "GET",
		PathPattern:        "/diagnostics/cm/{stackCrn}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSdxCmRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSdxCmRolesOK), nil

}

/*
GetSdxCmVMLogs returns a list of log paths on the hosts of the s d x
*/
func (a *Client) GetSdxCmVMLogs(params *GetSdxCmVMLogsParams) (*GetSdxCmVMLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSdxCmVMLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSdxCmVmLogs",
		Method:             "GET",
		PathPattern:        "/diagnostics/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSdxCmVMLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSdxCmVMLogsOK), nil

}

/*
ListSdxDiagnosticsCollections returns a list of the recent diagnostics collections
*/
func (a *Client) ListSdxDiagnosticsCollections(params *ListSdxDiagnosticsCollectionsParams) (*ListSdxDiagnosticsCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSdxDiagnosticsCollectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSdxDiagnosticsCollections",
		Method:             "GET",
		PathPattern:        "/diagnostics/{crn}/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSdxDiagnosticsCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSdxDiagnosticsCollectionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
