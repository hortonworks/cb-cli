// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TargetGroupResponse target group response
// swagger:model TargetGroupResponse
type TargetGroupResponse struct {

	// The AWS listener and target group resource ids.
	AwsResourceIds *AwsTargetGroupResponse `json:"awsResourceIds,omitempty"`

	// The Azure target availability set information.
	AzureResourceID *AzureTargetGroupResponse `json:"azureResourceId,omitempty"`

	// The port where the load balancer receives traffic and forward it to the associated targets.
	// Required: true
	Port *int64 `json:"port"`

	// Ids for the target instances receiving traffic from the load balancer on the defined port.
	// Required: true
	// Unique: true
	TargetInstances []string `json:"targetInstances"`
}

// Validate validates this target group response
func (m *TargetGroupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsResourceIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzureResourceID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetInstances(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TargetGroupResponse) validateAwsResourceIds(formats strfmt.Registry) error {

	if swag.IsZero(m.AwsResourceIds) { // not required
		return nil
	}

	if m.AwsResourceIds != nil {
		if err := m.AwsResourceIds.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("awsResourceIds")
			}
			return err
		}
	}

	return nil
}

func (m *TargetGroupResponse) validateAzureResourceID(formats strfmt.Registry) error {

	if swag.IsZero(m.AzureResourceID) { // not required
		return nil
	}

	if m.AzureResourceID != nil {
		if err := m.AzureResourceID.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azureResourceId")
			}
			return err
		}
	}

	return nil
}

func (m *TargetGroupResponse) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

func (m *TargetGroupResponse) validateTargetInstances(formats strfmt.Registry) error {

	if err := validate.Required("targetInstances", "body", m.TargetInstances); err != nil {
		return err
	}

	if err := validate.UniqueItems("targetInstances", "body", m.TargetInstances); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TargetGroupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TargetGroupResponse) UnmarshalBinary(b []byte) error {
	var res TargetGroupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
