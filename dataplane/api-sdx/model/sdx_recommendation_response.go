// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdxRecommendationResponse sdx recommendation response
// swagger:model SdxRecommendationResponse
type SdxRecommendationResponse struct {

	// Collection of available vm types
	AvailableVMTypesByInstanceGroup map[string][]VMTypeResponse `json:"availableVmTypesByInstanceGroup,omitempty"`

	// Template details.
	Template *StackV4Request `json:"template,omitempty"`
}

// Validate validates this sdx recommendation response
func (m *SdxRecommendationResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAvailableVMTypesByInstanceGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdxRecommendationResponse) validateAvailableVMTypesByInstanceGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.AvailableVMTypesByInstanceGroup) { // not required
		return nil
	}

	for k := range m.AvailableVMTypesByInstanceGroup {

		if err := validate.Required("availableVmTypesByInstanceGroup"+"."+k, "body", m.AvailableVMTypesByInstanceGroup[k]); err != nil {
			return err
		}

		for i := 0; i < len(m.AvailableVMTypesByInstanceGroup[k]); i++ {

			if err := m.AvailableVMTypesByInstanceGroup[k][i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("availableVmTypesByInstanceGroup" + "." + k + "." + strconv.Itoa(i))
				}
				return err
			}

		}

	}

	return nil
}

func (m *SdxRecommendationResponse) validateTemplate(formats strfmt.Registry) error {

	if swag.IsZero(m.Template) { // not required
		return nil
	}

	if m.Template != nil {
		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdxRecommendationResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdxRecommendationResponse) UnmarshalBinary(b []byte) error {
	var res SdxRecommendationResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
