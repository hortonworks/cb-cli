// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SecurityRuleV4Request security rule v4 request
// swagger:model SecurityRuleV4Request
type SecurityRuleV4Request struct {

	// flag for making the rule modifiable
	Modifiable bool `json:"modifiable,omitempty"`

	// list of accessible ports
	// Required: true
	Ports []string `json:"ports"`

	// protocol of the rule
	// Required: true
	Protocol *string `json:"protocol"`

	// definition of allowed subnet in CIDR format
	// Required: true
	Subnet *string `json:"subnet"`
}

// Validate validates this security rule v4 request
func (m *SecurityRuleV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePorts(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProtocol(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnet(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SecurityRuleV4Request) validatePorts(formats strfmt.Registry) error {

	if err := validate.Required("ports", "body", m.Ports); err != nil {
		return err
	}

	return nil
}

func (m *SecurityRuleV4Request) validateProtocol(formats strfmt.Registry) error {

	if err := validate.Required("protocol", "body", m.Protocol); err != nil {
		return err
	}

	return nil
}

func (m *SecurityRuleV4Request) validateSubnet(formats strfmt.Registry) error {

	if err := validate.Required("subnet", "body", m.Subnet); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SecurityRuleV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SecurityRuleV4Request) UnmarshalBinary(b []byte) error {
	var res SecurityRuleV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
