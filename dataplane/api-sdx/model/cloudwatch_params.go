// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudwatchParams cloudwatch params
// swagger:model CloudwatchParams
type CloudwatchParams struct {

	// instance profile
	// Required: true
	InstanceProfile *string `json:"instanceProfile"`

	// telemetry - CloudWatch related AWS region (should be used only outside of AWS platform)
	Region string `json:"region,omitempty"`

	// telemetry - CloudWatch releated parameters
	// Enum: [HOSTNAME COMPONENT]
	StreamKey string `json:"streamKey,omitempty"`
}

// Validate validates this cloudwatch params
func (m *CloudwatchParams) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceProfile(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStreamKey(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudwatchParams) validateInstanceProfile(formats strfmt.Registry) error {

	if err := validate.Required("instanceProfile", "body", m.InstanceProfile); err != nil {
		return err
	}

	return nil
}

var cloudwatchParamsTypeStreamKeyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["HOSTNAME","COMPONENT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudwatchParamsTypeStreamKeyPropEnum = append(cloudwatchParamsTypeStreamKeyPropEnum, v)
	}
}

const (

	// CloudwatchParamsStreamKeyHOSTNAME captures enum value "HOSTNAME"
	CloudwatchParamsStreamKeyHOSTNAME string = "HOSTNAME"

	// CloudwatchParamsStreamKeyCOMPONENT captures enum value "COMPONENT"
	CloudwatchParamsStreamKeyCOMPONENT string = "COMPONENT"
)

// prop value enum
func (m *CloudwatchParams) validateStreamKeyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudwatchParamsTypeStreamKeyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudwatchParams) validateStreamKey(formats strfmt.Registry) error {

	if swag.IsZero(m.StreamKey) { // not required
		return nil
	}

	// value enum
	if err := m.validateStreamKeyEnum("streamKey", "body", m.StreamKey); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudwatchParams) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudwatchParams) UnmarshalBinary(b []byte) error {
	var res CloudwatchParams
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
