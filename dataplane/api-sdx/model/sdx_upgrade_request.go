// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdxUpgradeRequest sdx upgrade request
// swagger:model SdxUpgradeRequest
type SdxUpgradeRequest struct {

	// dry run
	DryRun bool `json:"dryRun,omitempty"`

	// image Id
	ImageID string `json:"imageId,omitempty"`

	// lock components
	LockComponents bool `json:"lockComponents,omitempty"`

	// replace vms
	// Enum: [ENABLED DISABLED]
	ReplaceVms string `json:"replaceVms,omitempty"`

	// runtime
	Runtime string `json:"runtime,omitempty"`

	// show available images
	// Enum: [SHOW LATEST_ONLY DO_NOT_SHOW]
	ShowAvailableImages string `json:"showAvailableImages,omitempty"`
}

// Validate validates this sdx upgrade request
func (m *SdxUpgradeRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReplaceVms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateShowAvailableImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sdxUpgradeRequestTypeReplaceVmsPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdxUpgradeRequestTypeReplaceVmsPropEnum = append(sdxUpgradeRequestTypeReplaceVmsPropEnum, v)
	}
}

const (

	// SdxUpgradeRequestReplaceVmsENABLED captures enum value "ENABLED"
	SdxUpgradeRequestReplaceVmsENABLED string = "ENABLED"

	// SdxUpgradeRequestReplaceVmsDISABLED captures enum value "DISABLED"
	SdxUpgradeRequestReplaceVmsDISABLED string = "DISABLED"
)

// prop value enum
func (m *SdxUpgradeRequest) validateReplaceVmsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdxUpgradeRequestTypeReplaceVmsPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdxUpgradeRequest) validateReplaceVms(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplaceVms) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplaceVmsEnum("replaceVms", "body", m.ReplaceVms); err != nil {
		return err
	}

	return nil
}

var sdxUpgradeRequestTypeShowAvailableImagesPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SHOW","LATEST_ONLY","DO_NOT_SHOW"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdxUpgradeRequestTypeShowAvailableImagesPropEnum = append(sdxUpgradeRequestTypeShowAvailableImagesPropEnum, v)
	}
}

const (

	// SdxUpgradeRequestShowAvailableImagesSHOW captures enum value "SHOW"
	SdxUpgradeRequestShowAvailableImagesSHOW string = "SHOW"

	// SdxUpgradeRequestShowAvailableImagesLATESTONLY captures enum value "LATEST_ONLY"
	SdxUpgradeRequestShowAvailableImagesLATESTONLY string = "LATEST_ONLY"

	// SdxUpgradeRequestShowAvailableImagesDONOTSHOW captures enum value "DO_NOT_SHOW"
	SdxUpgradeRequestShowAvailableImagesDONOTSHOW string = "DO_NOT_SHOW"
)

// prop value enum
func (m *SdxUpgradeRequest) validateShowAvailableImagesEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdxUpgradeRequestTypeShowAvailableImagesPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdxUpgradeRequest) validateShowAvailableImages(formats strfmt.Registry) error {

	if swag.IsZero(m.ShowAvailableImages) { // not required
		return nil
	}

	// value enum
	if err := m.validateShowAvailableImagesEnum("showAvailableImages", "body", m.ShowAvailableImages); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdxUpgradeRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdxUpgradeRequest) UnmarshalBinary(b []byte) error {
	var res SdxUpgradeRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
