// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdxValidateCloudStorageRequest sdx validate cloud storage request
// swagger:model SdxValidateCloudStorageRequest
type SdxValidateCloudStorageRequest struct {

	// The name of the cluster template used for Data Lake creation.
	// Required: true
	BlueprintName *string `json:"blueprintName"`

	// The crn of the credential used for the cloud provider.
	// Required: true
	CredentialCrn *string `json:"credentialCrn"`

	// The role used for cloud storage access.
	// Required: true
	DataAccessRole *string `json:"dataAccessRole"`

	// The role used by Ranger for cloud storage access.
	// Required: true
	RangerAuditRole *string `json:"rangerAuditRole"`

	// Details about the cloud storage type and location.
	// Required: true
	SdxCloudStorageRequest *SdxCloudStorageRequest `json:"sdxCloudStorageRequest"`
}

// Validate validates this sdx validate cloud storage request
func (m *SdxValidateCloudStorageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDataAccessRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRangerAuditRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSdxCloudStorageRequest(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdxValidateCloudStorageRequest) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

func (m *SdxValidateCloudStorageRequest) validateCredentialCrn(formats strfmt.Registry) error {

	if err := validate.Required("credentialCrn", "body", m.CredentialCrn); err != nil {
		return err
	}

	return nil
}

func (m *SdxValidateCloudStorageRequest) validateDataAccessRole(formats strfmt.Registry) error {

	if err := validate.Required("dataAccessRole", "body", m.DataAccessRole); err != nil {
		return err
	}

	return nil
}

func (m *SdxValidateCloudStorageRequest) validateRangerAuditRole(formats strfmt.Registry) error {

	if err := validate.Required("rangerAuditRole", "body", m.RangerAuditRole); err != nil {
		return err
	}

	return nil
}

func (m *SdxValidateCloudStorageRequest) validateSdxCloudStorageRequest(formats strfmt.Registry) error {

	if err := validate.Required("sdxCloudStorageRequest", "body", m.SdxCloudStorageRequest); err != nil {
		return err
	}

	if m.SdxCloudStorageRequest != nil {
		if err := m.SdxCloudStorageRequest.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sdxCloudStorageRequest")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdxValidateCloudStorageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdxValidateCloudStorageRequest) UnmarshalBinary(b []byte) error {
	var res SdxValidateCloudStorageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
