// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SdxCloudStorageRequest sdx cloud storage request
// swagger:model SdxCloudStorageRequest
type SdxCloudStorageRequest struct {

	// adls
	Adls *AdlsCloudStorageV4Parameters `json:"adls,omitempty"`

	// adls gen2
	AdlsGen2 *AdlsGen2CloudStorageV4Parameters `json:"adlsGen2,omitempty"`

	// base location
	BaseLocation string `json:"baseLocation,omitempty"`

	// file system type
	// Enum: [WASB_INTEGRATED GCS WASB ADLS ADLS_GEN_2 S3]
	FileSystemType string `json:"fileSystemType,omitempty"`

	// gcs
	Gcs *GcsCloudStorageV4Parameters `json:"gcs,omitempty"`

	// s3
	S3 *S3CloudStorageV4Parameters `json:"s3,omitempty"`

	// wasb
	Wasb *WasbCloudStorageV4Parameters `json:"wasb,omitempty"`
}

// Validate validates this sdx cloud storage request
func (m *SdxCloudStorageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAdlsGen2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFileSystemType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateS3(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWasb(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SdxCloudStorageRequest) validateAdls(formats strfmt.Registry) error {

	if swag.IsZero(m.Adls) { // not required
		return nil
	}

	if m.Adls != nil {
		if err := m.Adls.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adls")
			}
			return err
		}
	}

	return nil
}

func (m *SdxCloudStorageRequest) validateAdlsGen2(formats strfmt.Registry) error {

	if swag.IsZero(m.AdlsGen2) { // not required
		return nil
	}

	if m.AdlsGen2 != nil {
		if err := m.AdlsGen2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("adlsGen2")
			}
			return err
		}
	}

	return nil
}

var sdxCloudStorageRequestTypeFileSystemTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["WASB_INTEGRATED","GCS","WASB","ADLS","ADLS_GEN_2","S3"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sdxCloudStorageRequestTypeFileSystemTypePropEnum = append(sdxCloudStorageRequestTypeFileSystemTypePropEnum, v)
	}
}

const (

	// SdxCloudStorageRequestFileSystemTypeWASBINTEGRATED captures enum value "WASB_INTEGRATED"
	SdxCloudStorageRequestFileSystemTypeWASBINTEGRATED string = "WASB_INTEGRATED"

	// SdxCloudStorageRequestFileSystemTypeGCS captures enum value "GCS"
	SdxCloudStorageRequestFileSystemTypeGCS string = "GCS"

	// SdxCloudStorageRequestFileSystemTypeWASB captures enum value "WASB"
	SdxCloudStorageRequestFileSystemTypeWASB string = "WASB"

	// SdxCloudStorageRequestFileSystemTypeADLS captures enum value "ADLS"
	SdxCloudStorageRequestFileSystemTypeADLS string = "ADLS"

	// SdxCloudStorageRequestFileSystemTypeADLSGEN2 captures enum value "ADLS_GEN_2"
	SdxCloudStorageRequestFileSystemTypeADLSGEN2 string = "ADLS_GEN_2"

	// SdxCloudStorageRequestFileSystemTypeS3 captures enum value "S3"
	SdxCloudStorageRequestFileSystemTypeS3 string = "S3"
)

// prop value enum
func (m *SdxCloudStorageRequest) validateFileSystemTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sdxCloudStorageRequestTypeFileSystemTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SdxCloudStorageRequest) validateFileSystemType(formats strfmt.Registry) error {

	if swag.IsZero(m.FileSystemType) { // not required
		return nil
	}

	// value enum
	if err := m.validateFileSystemTypeEnum("fileSystemType", "body", m.FileSystemType); err != nil {
		return err
	}

	return nil
}

func (m *SdxCloudStorageRequest) validateGcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Gcs) { // not required
		return nil
	}

	if m.Gcs != nil {
		if err := m.Gcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcs")
			}
			return err
		}
	}

	return nil
}

func (m *SdxCloudStorageRequest) validateS3(formats strfmt.Registry) error {

	if swag.IsZero(m.S3) { // not required
		return nil
	}

	if m.S3 != nil {
		if err := m.S3.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("s3")
			}
			return err
		}
	}

	return nil
}

func (m *SdxCloudStorageRequest) validateWasb(formats strfmt.Registry) error {

	if swag.IsZero(m.Wasb) { // not required
		return nil
	}

	if m.Wasb != nil {
		if err := m.Wasb.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("wasb")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SdxCloudStorageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SdxCloudStorageRequest) UnmarshalBinary(b []byte) error {
	var res SdxCloudStorageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
