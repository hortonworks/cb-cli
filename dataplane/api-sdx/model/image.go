// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// Image image
// swagger:model Image
type Image struct {

	// advertised
	// Read Only: true
	Advertised *bool `json:"advertised,omitempty"`

	// build number
	// Read Only: true
	BuildNumber string `json:"build-number,omitempty"`

	// created
	// Read Only: true
	Created int64 `json:"created,omitempty"`

	// date
	// Read Only: true
	Date string `json:"date,omitempty"`

	// description
	// Read Only: true
	Description string `json:"description,omitempty"`

	// images
	// Read Only: true
	Images map[string]map[string]string `json:"images,omitempty"`

	// os
	// Read Only: true
	Os string `json:"os,omitempty"`

	// os type
	// Read Only: true
	OsType string `json:"os_type,omitempty"`

	// package versions
	// Read Only: true
	PackageVersions map[string]string `json:"package-versions,omitempty"`

	// pre warm csd
	// Read Only: true
	PreWarmCsd []string `json:"pre_warm_csd"`

	// pre warm parcels
	// Read Only: true
	PreWarmParcels [][]string `json:"pre_warm_parcels"`

	// published
	// Read Only: true
	Published int64 `json:"published,omitempty"`

	// repo
	// Read Only: true
	Repo map[string]string `json:"repo,omitempty"`

	// stack details
	// Read Only: true
	StackDetails *ImageStackDetails `json:"stack-details,omitempty"`

	// uuid
	// Read Only: true
	UUID string `json:"uuid,omitempty"`

	// version
	// Read Only: true
	Version string `json:"version,omitempty"`
}

// Validate validates this image
func (m *Image) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStackDetails(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Image) validateStackDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.StackDetails) { // not required
		return nil
	}

	if m.StackDetails != nil {
		if err := m.StackDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack-details")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Image) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Image) UnmarshalBinary(b []byte) error {
	var res Image
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
