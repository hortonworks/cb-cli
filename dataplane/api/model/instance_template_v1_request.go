// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InstanceTemplateV1Request instance template v1 request
// swagger:model InstanceTemplateV1Request
type InstanceTemplateV1Request struct {

	// attached volumes
	// Unique: true
	AttachedVolumes []*VolumeV1Request `json:"attachedVolumes"`

	// aws specific parameters for template
	Aws *AwsInstanceTemplateV1Parameters `json:"aws,omitempty"`

	// azure specific parameters for template
	Azure *AzureInstanceTemplateV1Parameters `json:"azure,omitempty"`

	// cloud platform
	// Enum: [AWS GCP AZURE OPENSTACK YARN MOCK]
	CloudPlatform string `json:"cloudPlatform,omitempty"`

	// ephemeral volume
	EphemeralVolume *VolumeV1Request `json:"ephemeralVolume,omitempty"`

	// gcp specific parameters for template
	Gcp GcpInstanceTemplateV1Parameters `json:"gcp,omitempty"`

	// type of the instance
	InstanceType string `json:"instanceType,omitempty"`

	// root volume
	RootVolume *RootVolumeV1Request `json:"rootVolume,omitempty"`

	// yarn specific parameters for template
	Yarn *YarnInstanceTemplateV1Parameters `json:"yarn,omitempty"`
}

// Validate validates this instance template v1 request
func (m *InstanceTemplateV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAttachedVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeralVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRootVolume(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYarn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InstanceTemplateV1Request) validateAttachedVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.AttachedVolumes) { // not required
		return nil
	}

	if err := validate.UniqueItems("attachedVolumes", "body", m.AttachedVolumes); err != nil {
		return err
	}

	for i := 0; i < len(m.AttachedVolumes); i++ {
		if swag.IsZero(m.AttachedVolumes[i]) { // not required
			continue
		}

		if m.AttachedVolumes[i] != nil {
			if err := m.AttachedVolumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("attachedVolumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InstanceTemplateV1Request) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceTemplateV1Request) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

var instanceTemplateV1RequestTypeCloudPlatformPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["AWS","GCP","AZURE","OPENSTACK","YARN","MOCK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		instanceTemplateV1RequestTypeCloudPlatformPropEnum = append(instanceTemplateV1RequestTypeCloudPlatformPropEnum, v)
	}
}

const (

	// InstanceTemplateV1RequestCloudPlatformAWS captures enum value "AWS"
	InstanceTemplateV1RequestCloudPlatformAWS string = "AWS"

	// InstanceTemplateV1RequestCloudPlatformGCP captures enum value "GCP"
	InstanceTemplateV1RequestCloudPlatformGCP string = "GCP"

	// InstanceTemplateV1RequestCloudPlatformAZURE captures enum value "AZURE"
	InstanceTemplateV1RequestCloudPlatformAZURE string = "AZURE"

	// InstanceTemplateV1RequestCloudPlatformOPENSTACK captures enum value "OPENSTACK"
	InstanceTemplateV1RequestCloudPlatformOPENSTACK string = "OPENSTACK"

	// InstanceTemplateV1RequestCloudPlatformYARN captures enum value "YARN"
	InstanceTemplateV1RequestCloudPlatformYARN string = "YARN"

	// InstanceTemplateV1RequestCloudPlatformMOCK captures enum value "MOCK"
	InstanceTemplateV1RequestCloudPlatformMOCK string = "MOCK"
)

// prop value enum
func (m *InstanceTemplateV1Request) validateCloudPlatformEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, instanceTemplateV1RequestTypeCloudPlatformPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InstanceTemplateV1Request) validateCloudPlatform(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudPlatform) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudPlatformEnum("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

func (m *InstanceTemplateV1Request) validateEphemeralVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.EphemeralVolume) { // not required
		return nil
	}

	if m.EphemeralVolume != nil {
		if err := m.EphemeralVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ephemeralVolume")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceTemplateV1Request) validateRootVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.RootVolume) { // not required
		return nil
	}

	if m.RootVolume != nil {
		if err := m.RootVolume.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("rootVolume")
			}
			return err
		}
	}

	return nil
}

func (m *InstanceTemplateV1Request) validateYarn(formats strfmt.Registry) error {

	if swag.IsZero(m.Yarn) { // not required
		return nil
	}

	if m.Yarn != nil {
		if err := m.Yarn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yarn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InstanceTemplateV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InstanceTemplateV1Request) UnmarshalBinary(b []byte) error {
	var res InstanceTemplateV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
