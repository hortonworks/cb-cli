// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpEncryptionV4Parameters gcp encryption v4 parameters
// swagger:model GcpEncryptionV4Parameters
type GcpEncryptionV4Parameters struct {

	// encryption key for vm
	Key string `json:"key,omitempty"`

	// encryption method for the key (RAW|RSA)
	// Enum: [RAW RSA KMS]
	KeyEncryptionMethod string `json:"keyEncryptionMethod,omitempty"`

	// encryption type for vm (DEFAULT|CUSTOM|NONE)
	// Enum: [DEFAULT NONE CUSTOM]
	Type string `json:"type,omitempty"`
}

// Validate validates this gcp encryption v4 parameters
func (m *GcpEncryptionV4Parameters) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKeyEncryptionMethod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gcpEncryptionV4ParametersTypeKeyEncryptionMethodPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["RAW","RSA","KMS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpEncryptionV4ParametersTypeKeyEncryptionMethodPropEnum = append(gcpEncryptionV4ParametersTypeKeyEncryptionMethodPropEnum, v)
	}
}

const (

	// GcpEncryptionV4ParametersKeyEncryptionMethodRAW captures enum value "RAW"
	GcpEncryptionV4ParametersKeyEncryptionMethodRAW string = "RAW"

	// GcpEncryptionV4ParametersKeyEncryptionMethodRSA captures enum value "RSA"
	GcpEncryptionV4ParametersKeyEncryptionMethodRSA string = "RSA"

	// GcpEncryptionV4ParametersKeyEncryptionMethodKMS captures enum value "KMS"
	GcpEncryptionV4ParametersKeyEncryptionMethodKMS string = "KMS"
)

// prop value enum
func (m *GcpEncryptionV4Parameters) validateKeyEncryptionMethodEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gcpEncryptionV4ParametersTypeKeyEncryptionMethodPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GcpEncryptionV4Parameters) validateKeyEncryptionMethod(formats strfmt.Registry) error {

	if swag.IsZero(m.KeyEncryptionMethod) { // not required
		return nil
	}

	// value enum
	if err := m.validateKeyEncryptionMethodEnum("keyEncryptionMethod", "body", m.KeyEncryptionMethod); err != nil {
		return err
	}

	return nil
}

var gcpEncryptionV4ParametersTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DEFAULT","NONE","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gcpEncryptionV4ParametersTypeTypePropEnum = append(gcpEncryptionV4ParametersTypeTypePropEnum, v)
	}
}

const (

	// GcpEncryptionV4ParametersTypeDEFAULT captures enum value "DEFAULT"
	GcpEncryptionV4ParametersTypeDEFAULT string = "DEFAULT"

	// GcpEncryptionV4ParametersTypeNONE captures enum value "NONE"
	GcpEncryptionV4ParametersTypeNONE string = "NONE"

	// GcpEncryptionV4ParametersTypeCUSTOM captures enum value "CUSTOM"
	GcpEncryptionV4ParametersTypeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *GcpEncryptionV4Parameters) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gcpEncryptionV4ParametersTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GcpEncryptionV4Parameters) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpEncryptionV4Parameters) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpEncryptionV4Parameters) UnmarshalBinary(b []byte) error {
	var res GcpEncryptionV4Parameters
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
