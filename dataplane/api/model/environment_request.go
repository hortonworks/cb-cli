// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentRequest environment request
// swagger:model EnvironmentRequest
type EnvironmentRequest struct {

	// If credentialName is not specified, the credential is used to create the new credential for the environment.
	Credential *CredentialRequest `json:"credential,omitempty"`

	// Name of the credential of the environment. If the name is given, the detailed credential is ignored in the request.
	CredentialName string `json:"credentialName,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// Name of Kerberos configs to be attached to the environment.
	// Unique: true
	KerberosConfigs []string `json:"kerberosConfigs"`

	// Name of the Kubernetes configurations to be attached to the environment.
	// Unique: true
	KubernetesConfigs []string `json:"kubernetesConfigs"`

	// Name of the LDAP configurations to be attached to the environment.
	// Unique: true
	LdapConfigs []string `json:"ldapConfigs"`

	// Location of the environment.
	// Required: true
	Location *LocationRequest `json:"location"`

	// name of the resource
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// Name of the proxy configurations to be attached to the environment.
	// Unique: true
	ProxyConfigs []string `json:"proxyConfigs"`

	// Name of the RDS configurations to be attached to the environment.
	// Unique: true
	RdsConfigs []string `json:"rdsConfigs"`

	// Regions of the environment.
	// Unique: true
	Regions []string `json:"regions"`
}

// Validate validates this environment request
func (m *EnvironmentRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKerberosConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKubernetesConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentRequest) validateCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateKerberosConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.KerberosConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("kerberosConfigs", "body", m.KerberosConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateKubernetesConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.KubernetesConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("kubernetesConfigs", "body", m.KubernetesConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateLdapConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("ldapConfigs", "body", m.LdapConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateLocation(formats strfmt.Registry) error {

	if err := validate.Required("location", "body", m.Location); err != nil {
		return err
	}

	if m.Location != nil {
		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateProxyConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("proxyConfigs", "body", m.ProxyConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateRdsConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigs", "body", m.RdsConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentRequest) validateRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	if err := validate.UniqueItems("regions", "body", m.Regions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentRequest) UnmarshalBinary(b []byte) error {
	var res EnvironmentRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
