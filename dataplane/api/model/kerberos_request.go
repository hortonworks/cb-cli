// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KerberosRequest kerberos request
// swagger:model KerberosRequest
type KerberosRequest struct {

	// kerberos admin user
	// Max Length: 15
	// Min Length: 5
	Admin string `json:"admin,omitempty"`

	// kerberos admin server URL
	AdminURL string `json:"adminUrl,omitempty"`

	// container dn
	ContainerDn string `json:"containerDn,omitempty"`

	// Ambari kerberos descriptor
	Descriptor string `json:"descriptor,omitempty"`

	// cluster instances will set this as the domain part of their hostname
	Domain string `json:"domain,omitempty"`

	// Ambari kerberos krb5.conf template
	Krb5Conf string `json:"krb5Conf,omitempty"`

	// ldap Url
	LdapURL string `json:"ldapUrl,omitempty"`

	// kerberos master key
	// Max Length: 50
	// Min Length: 3
	MasterKey string `json:"masterKey,omitempty"`

	// comma separated list of nameservers' IP address which will be used by cluster instances
	// Pattern: (^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(,((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$)
	NameServers string `json:"nameServers,omitempty"`

	// kerberos admin password
	// Max Length: 50
	// Min Length: 5
	Password string `json:"password,omitempty"`

	// kerberos principal
	Principal string `json:"principal,omitempty"`

	// realm
	Realm string `json:"realm,omitempty"`

	// tcp allowed
	TCPAllowed *bool `json:"tcpAllowed,omitempty"`

	// type
	// Required: true
	// Enum: [CB_MANAGED EXISTING_AD EXISTING_MIT EXISTING_FREEIPA CUSTOM]
	Type *string `json:"type"`

	// kerberos KDC server URL
	URL string `json:"url,omitempty"`

	// Allows to select either a trusting SSL connection or a validating (non-trusting) SSL connection to KDC
	VerifyKdcTrust *bool `json:"verifyKdcTrust,omitempty"`
}

// Validate validates this kerberos request
func (m *KerberosRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMasterKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosRequest) validateAdmin(formats strfmt.Registry) error {

	if swag.IsZero(m.Admin) { // not required
		return nil
	}

	if err := validate.MinLength("admin", "body", string(m.Admin), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("admin", "body", string(m.Admin), 15); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validateMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.MasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("masterKey", "body", string(m.MasterKey), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("masterKey", "body", string(m.MasterKey), 50); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validateNameServers(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	if err := validate.Pattern("nameServers", "body", string(m.NameServers), `(^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(,((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$)`); err != nil {
		return err
	}

	return nil
}

func (m *KerberosRequest) validatePassword(formats strfmt.Registry) error {

	if swag.IsZero(m.Password) { // not required
		return nil
	}

	if err := validate.MinLength("password", "body", string(m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(m.Password), 50); err != nil {
		return err
	}

	return nil
}

var kerberosRequestTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CB_MANAGED","EXISTING_AD","EXISTING_MIT","EXISTING_FREEIPA","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kerberosRequestTypeTypePropEnum = append(kerberosRequestTypeTypePropEnum, v)
	}
}

const (

	// KerberosRequestTypeCBMANAGED captures enum value "CB_MANAGED"
	KerberosRequestTypeCBMANAGED string = "CB_MANAGED"

	// KerberosRequestTypeEXISTINGAD captures enum value "EXISTING_AD"
	KerberosRequestTypeEXISTINGAD string = "EXISTING_AD"

	// KerberosRequestTypeEXISTINGMIT captures enum value "EXISTING_MIT"
	KerberosRequestTypeEXISTINGMIT string = "EXISTING_MIT"

	// KerberosRequestTypeEXISTINGFREEIPA captures enum value "EXISTING_FREEIPA"
	KerberosRequestTypeEXISTINGFREEIPA string = "EXISTING_FREEIPA"

	// KerberosRequestTypeCUSTOM captures enum value "CUSTOM"
	KerberosRequestTypeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *KerberosRequest) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, kerberosRequestTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *KerberosRequest) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosRequest) UnmarshalBinary(b []byte) error {
	var res KerberosRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
