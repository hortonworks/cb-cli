// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DurationV4Response duration v4 response
// swagger:model DurationV4Response
type DurationV4Response struct {

	// days
	// Minimum: 0
	Days *int32 `json:"days,omitempty"`

	// hours
	// Maximum: 23
	// Minimum: 0
	Hours *int32 `json:"hours,omitempty"`

	// minutes
	// Maximum: 59
	// Minimum: 0
	Minutes *int32 `json:"minutes,omitempty"`
}

// Validate validates this duration v4 response
func (m *DurationV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDays(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHours(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinutes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DurationV4Response) validateDays(formats strfmt.Registry) error {

	if swag.IsZero(m.Days) { // not required
		return nil
	}

	if err := validate.MinimumInt("days", "body", int64(*m.Days), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *DurationV4Response) validateHours(formats strfmt.Registry) error {

	if swag.IsZero(m.Hours) { // not required
		return nil
	}

	if err := validate.MinimumInt("hours", "body", int64(*m.Hours), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("hours", "body", int64(*m.Hours), 23, false); err != nil {
		return err
	}

	return nil
}

func (m *DurationV4Response) validateMinutes(formats strfmt.Registry) error {

	if swag.IsZero(m.Minutes) { // not required
		return nil
	}

	if err := validate.MinimumInt("minutes", "body", int64(*m.Minutes), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("minutes", "body", int64(*m.Minutes), 59, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DurationV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DurationV4Response) UnmarshalBinary(b []byte) error {
	var res DurationV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
