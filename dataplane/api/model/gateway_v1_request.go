// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GatewayV1Request gateway v1 request
// swagger:model GatewayV1Request
type GatewayV1Request struct {

	// exposed Knox services - those services that should be accessible through Knox gateway.
	ExposedServices []string `json:"exposedServices"`

	// Knox gateway type
	// Enum: [CENTRAL INDIVIDUAL]
	GatewayType string `json:"gatewayType,omitempty"`

	// Knox SSO type
	// Enum: [SSO_PROVIDER NONE]
	SsoType string `json:"ssoType,omitempty"`

	// SSO Provider certificate
	TokenCert string `json:"tokenCert,omitempty"`
}

// Validate validates this gateway v1 request
func (m *GatewayV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGatewayType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSsoType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var gatewayV1RequestTypeGatewayTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CENTRAL","INDIVIDUAL"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayV1RequestTypeGatewayTypePropEnum = append(gatewayV1RequestTypeGatewayTypePropEnum, v)
	}
}

const (

	// GatewayV1RequestGatewayTypeCENTRAL captures enum value "CENTRAL"
	GatewayV1RequestGatewayTypeCENTRAL string = "CENTRAL"

	// GatewayV1RequestGatewayTypeINDIVIDUAL captures enum value "INDIVIDUAL"
	GatewayV1RequestGatewayTypeINDIVIDUAL string = "INDIVIDUAL"
)

// prop value enum
func (m *GatewayV1Request) validateGatewayTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayV1RequestTypeGatewayTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayV1Request) validateGatewayType(formats strfmt.Registry) error {

	if swag.IsZero(m.GatewayType) { // not required
		return nil
	}

	// value enum
	if err := m.validateGatewayTypeEnum("gatewayType", "body", m.GatewayType); err != nil {
		return err
	}

	return nil
}

var gatewayV1RequestTypeSsoTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SSO_PROVIDER","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		gatewayV1RequestTypeSsoTypePropEnum = append(gatewayV1RequestTypeSsoTypePropEnum, v)
	}
}

const (

	// GatewayV1RequestSsoTypeSSOPROVIDER captures enum value "SSO_PROVIDER"
	GatewayV1RequestSsoTypeSSOPROVIDER string = "SSO_PROVIDER"

	// GatewayV1RequestSsoTypeNONE captures enum value "NONE"
	GatewayV1RequestSsoTypeNONE string = "NONE"
)

// prop value enum
func (m *GatewayV1Request) validateSsoTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, gatewayV1RequestTypeSsoTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *GatewayV1Request) validateSsoType(formats strfmt.Registry) error {

	if swag.IsZero(m.SsoType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSsoTypeEnum("ssoType", "body", m.SsoType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GatewayV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GatewayV1Request) UnmarshalBinary(b []byte) error {
	var res GatewayV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
