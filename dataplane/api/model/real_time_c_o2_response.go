// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RealTimeCO2Response real time c o2 response
// swagger:model RealTimeCO2Response
type RealTimeCO2Response struct {

	// co2
	Co2 map[string]RealTimeCO2 `json:"co2,omitempty"`
}

// Validate validates this real time c o2 response
func (m *RealTimeCO2Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCo2(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RealTimeCO2Response) validateCo2(formats strfmt.Registry) error {

	if swag.IsZero(m.Co2) { // not required
		return nil
	}

	for k := range m.Co2 {

		if err := validate.Required("co2"+"."+k, "body", m.Co2[k]); err != nil {
			return err
		}
		if val, ok := m.Co2[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RealTimeCO2Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RealTimeCO2Response) UnmarshalBinary(b []byte) error {
	var res RealTimeCO2Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
