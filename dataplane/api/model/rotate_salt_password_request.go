// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RotateSaltPasswordRequest rotate salt password request
// swagger:model RotateSaltPasswordRequest
type RotateSaltPasswordRequest struct {

	// Indicates why the salt password rotation was started
	// Enum: [UNSET MANUAL EXPIRED UNAUTHORIZED]
	Reason string `json:"reason,omitempty"`
}

// Validate validates this rotate salt password request
func (m *RotateSaltPasswordRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var rotateSaltPasswordRequestTypeReasonPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNSET","MANUAL","EXPIRED","UNAUTHORIZED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		rotateSaltPasswordRequestTypeReasonPropEnum = append(rotateSaltPasswordRequestTypeReasonPropEnum, v)
	}
}

const (

	// RotateSaltPasswordRequestReasonUNSET captures enum value "UNSET"
	RotateSaltPasswordRequestReasonUNSET string = "UNSET"

	// RotateSaltPasswordRequestReasonMANUAL captures enum value "MANUAL"
	RotateSaltPasswordRequestReasonMANUAL string = "MANUAL"

	// RotateSaltPasswordRequestReasonEXPIRED captures enum value "EXPIRED"
	RotateSaltPasswordRequestReasonEXPIRED string = "EXPIRED"

	// RotateSaltPasswordRequestReasonUNAUTHORIZED captures enum value "UNAUTHORIZED"
	RotateSaltPasswordRequestReasonUNAUTHORIZED string = "UNAUTHORIZED"
)

// prop value enum
func (m *RotateSaltPasswordRequest) validateReasonEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, rotateSaltPasswordRequestTypeReasonPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *RotateSaltPasswordRequest) validateReason(formats strfmt.Registry) error {

	if swag.IsZero(m.Reason) { // not required
		return nil
	}

	// value enum
	if err := m.validateReasonEnum("reason", "body", m.Reason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RotateSaltPasswordRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RotateSaltPasswordRequest) UnmarshalBinary(b []byte) error {
	var res RotateSaltPasswordRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
