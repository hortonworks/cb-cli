// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ImageComponentVersions image component versions
// swagger:model ImageComponentVersions
type ImageComponentVersions struct {

	// cdp
	Cdp string `json:"cdp,omitempty"`

	// cdp g b n
	CdpGBN string `json:"cdpGBN,omitempty"`

	// cm
	Cm string `json:"cm,omitempty"`

	// cm g b n
	CmGBN string `json:"cmGBN,omitempty"`

	// os
	Os string `json:"os,omitempty"`

	// os patch level
	OsPatchLevel string `json:"osPatchLevel,omitempty"`

	// parcel info response list
	ParcelInfoResponseList []*ParcelInfoResponse `json:"parcelInfoResponseList"`
}

// Validate validates this image component versions
func (m *ImageComponentVersions) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateParcelInfoResponseList(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageComponentVersions) validateParcelInfoResponseList(formats strfmt.Registry) error {

	if swag.IsZero(m.ParcelInfoResponseList) { // not required
		return nil
	}

	for i := 0; i < len(m.ParcelInfoResponseList); i++ {
		if swag.IsZero(m.ParcelInfoResponseList[i]) { // not required
			continue
		}

		if m.ParcelInfoResponseList[i] != nil {
			if err := m.ParcelInfoResponseList[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("parcelInfoResponseList" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageComponentVersions) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageComponentVersions) UnmarshalBinary(b []byte) error {
	var res ImageComponentVersions
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
