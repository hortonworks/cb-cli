// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackRepositoryV4Request stack repository v4 request
// swagger:model StackRepositoryV4Request
type StackRepositoryV4Request struct {

	// enable gpl repository
	EnableGplRepo *bool `json:"enableGplRepo,omitempty"`

	// url the MPACK that needs to be installed before HDF installation
	// Pattern: ^http[s]?://.*
	MpackURL string `json:"mpackUrl,omitempty"`

	// Management packs which are needed for the HDP / HDF clusters
	Mpacks []*ManagementPackDetailsV4Request `json:"mpacks"`

	// operating system for the stack, like redhat6
	Os string `json:"os,omitempty"`

	// operating system type for the stack, like centos6
	OsType string `json:"osType,omitempty"`

	// id of the stack repository
	RepoID string `json:"repoId,omitempty"`

	// repository
	Repository *RepositoryV4Request `json:"repository,omitempty"`

	// name of the stack, like HDP
	// Required: true
	Stack *string `json:"stack"`

	// url of the stack utils repository
	UtilsBaseURL string `json:"utilsBaseURL,omitempty"`

	// id of the stack utils repository
	UtilsRepoID string `json:"utilsRepoId,omitempty"`

	// whether to verify or not the repo url
	Verify *bool `json:"verify,omitempty"`

	// version of the stack
	// Required: true
	// Pattern: (^[0-9]+\.[0-9]+$)
	Version *string `json:"version"`

	// local path on the Ambari server or URL that point to the desired VDF file
	VersionDefinitionFileURL string `json:"versionDefinitionFileUrl,omitempty"`
}

// Validate validates this stack repository v4 request
func (m *StackRepositoryV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMpackURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMpacks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackRepositoryV4Request) validateMpackURL(formats strfmt.Registry) error {

	if swag.IsZero(m.MpackURL) { // not required
		return nil
	}

	if err := validate.Pattern("mpackUrl", "body", string(m.MpackURL), `^http[s]?://.*`); err != nil {
		return err
	}

	return nil
}

func (m *StackRepositoryV4Request) validateMpacks(formats strfmt.Registry) error {

	if swag.IsZero(m.Mpacks) { // not required
		return nil
	}

	for i := 0; i < len(m.Mpacks); i++ {
		if swag.IsZero(m.Mpacks[i]) { // not required
			continue
		}

		if m.Mpacks[i] != nil {
			if err := m.Mpacks[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("mpacks" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *StackRepositoryV4Request) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *StackRepositoryV4Request) validateStack(formats strfmt.Registry) error {

	if err := validate.Required("stack", "body", m.Stack); err != nil {
		return err
	}

	return nil
}

func (m *StackRepositoryV4Request) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.Pattern("version", "body", string(*m.Version), `(^[0-9]+\.[0-9]+$)`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StackRepositoryV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackRepositoryV4Request) UnmarshalBinary(b []byte) error {
	var res StackRepositoryV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
