// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentAttachV4Request environment attach v4 request
// swagger:model EnvironmentAttachV4Request
type EnvironmentAttachV4Request struct {

	// Name of the Kubernetes configurations to be attached to the environment.
	// Unique: true
	Kubernetes []string `json:"kubernetes"`

	// Name of the LDAP configurations to be attached to the environment.
	// Unique: true
	Ldaps []string `json:"ldaps"`

	// Name of the proxy configurations to be attached to the environment.
	// Unique: true
	Proxies []string `json:"proxies"`
}

// Validate validates this environment attach v4 request
func (m *EnvironmentAttachV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdaps(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxies(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentAttachV4Request) validateKubernetes(formats strfmt.Registry) error {

	if swag.IsZero(m.Kubernetes) { // not required
		return nil
	}

	if err := validate.UniqueItems("kubernetes", "body", m.Kubernetes); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentAttachV4Request) validateLdaps(formats strfmt.Registry) error {

	if swag.IsZero(m.Ldaps) { // not required
		return nil
	}

	if err := validate.UniqueItems("ldaps", "body", m.Ldaps); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentAttachV4Request) validateProxies(formats strfmt.Registry) error {

	if swag.IsZero(m.Proxies) { // not required
		return nil
	}

	if err := validate.UniqueItems("proxies", "body", m.Proxies); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentAttachV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentAttachV4Request) UnmarshalBinary(b []byte) error {
	var res EnvironmentAttachV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
