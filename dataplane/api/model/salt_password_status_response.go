// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SaltPasswordStatusResponse salt password status response
// swagger:model SaltPasswordStatusResponse
type SaltPasswordStatusResponse struct {

	// status
	// Enum: [OK INVALID EXPIRES FAILED_TO_CHECK]
	Status string `json:"status,omitempty"`
}

// Validate validates this salt password status response
func (m *SaltPasswordStatusResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var saltPasswordStatusResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["OK","INVALID","EXPIRES","FAILED_TO_CHECK"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		saltPasswordStatusResponseTypeStatusPropEnum = append(saltPasswordStatusResponseTypeStatusPropEnum, v)
	}
}

const (

	// SaltPasswordStatusResponseStatusOK captures enum value "OK"
	SaltPasswordStatusResponseStatusOK string = "OK"

	// SaltPasswordStatusResponseStatusINVALID captures enum value "INVALID"
	SaltPasswordStatusResponseStatusINVALID string = "INVALID"

	// SaltPasswordStatusResponseStatusEXPIRES captures enum value "EXPIRES"
	SaltPasswordStatusResponseStatusEXPIRES string = "EXPIRES"

	// SaltPasswordStatusResponseStatusFAILEDTOCHECK captures enum value "FAILED_TO_CHECK"
	SaltPasswordStatusResponseStatusFAILEDTOCHECK string = "FAILED_TO_CHECK"
)

// prop value enum
func (m *SaltPasswordStatusResponse) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, saltPasswordStatusResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SaltPasswordStatusResponse) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SaltPasswordStatusResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SaltPasswordStatusResponse) UnmarshalBinary(b []byte) error {
	var res SaltPasswordStatusResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
