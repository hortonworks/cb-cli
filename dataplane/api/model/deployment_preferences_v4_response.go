// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DeploymentPreferencesV4Response deployment preferences v4 response
// swagger:model DeploymentPreferencesV4Response
type DeploymentPreferencesV4Response struct {

	// feature switch v4s
	// Unique: true
	FeatureSwitchV4s []string `json:"featureSwitchV4s"`

	// platform enablement
	PlatformEnablement map[string]bool `json:"platformEnablement,omitempty"`

	// platform selection disabled
	PlatformSelectionDisabled *bool `json:"platformSelectionDisabled,omitempty"`

	// supported external databases
	// Unique: true
	SupportedExternalDatabases []*SupportedExternalDatabaseServiceEntryV4Response `json:"supportedExternalDatabases"`
}

// Validate validates this deployment preferences v4 response
func (m *DeploymentPreferencesV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFeatureSwitchV4s(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSupportedExternalDatabases(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var deploymentPreferencesV4ResponseFeatureSwitchV4sItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["DISABLE_SHOW_CLI","DISABLE_SHOW_BLUEPRINT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		deploymentPreferencesV4ResponseFeatureSwitchV4sItemsEnum = append(deploymentPreferencesV4ResponseFeatureSwitchV4sItemsEnum, v)
	}
}

func (m *DeploymentPreferencesV4Response) validateFeatureSwitchV4sItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, deploymentPreferencesV4ResponseFeatureSwitchV4sItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *DeploymentPreferencesV4Response) validateFeatureSwitchV4s(formats strfmt.Registry) error {

	if swag.IsZero(m.FeatureSwitchV4s) { // not required
		return nil
	}

	if err := validate.UniqueItems("featureSwitchV4s", "body", m.FeatureSwitchV4s); err != nil {
		return err
	}

	for i := 0; i < len(m.FeatureSwitchV4s); i++ {

		// value enum
		if err := m.validateFeatureSwitchV4sItemsEnum("featureSwitchV4s"+"."+strconv.Itoa(i), "body", m.FeatureSwitchV4s[i]); err != nil {
			return err
		}

	}

	return nil
}

func (m *DeploymentPreferencesV4Response) validateSupportedExternalDatabases(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedExternalDatabases) { // not required
		return nil
	}

	if err := validate.UniqueItems("supportedExternalDatabases", "body", m.SupportedExternalDatabases); err != nil {
		return err
	}

	for i := 0; i < len(m.SupportedExternalDatabases); i++ {
		if swag.IsZero(m.SupportedExternalDatabases[i]) { // not required
			continue
		}

		if m.SupportedExternalDatabases[i] != nil {
			if err := m.SupportedExternalDatabases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("supportedExternalDatabases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DeploymentPreferencesV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DeploymentPreferencesV4Response) UnmarshalBinary(b []byte) error {
	var res DeploymentPreferencesV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
