// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackScaleV4Request stack scale v4 request
// swagger:model StackScaleV4Request
type StackScaleV4Request struct {

	// scaling adjustment type
	// Enum: [EXACT PERCENTAGE BEST_EFFORT]
	AdjustmentType string `json:"adjustmentType,omitempty"`

	// scaling adjustment of the instance groups
	// Required: true
	DesiredCount *int32 `json:"desiredCount"`

	// Force remove instance
	Forced bool `json:"forced,omitempty"`

	// name of the instance group
	// Required: true
	Group *string `json:"group"`

	// stack network scale v4 request
	StackNetworkScaleV4Request *NetworkScaleV4Request `json:"stackNetworkScaleV4Request,omitempty"`

	// scaling threshold
	Threshold int64 `json:"threshold,omitempty"`
}

// Validate validates this stack scale v4 request
func (m *StackScaleV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDesiredCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroup(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackNetworkScaleV4Request(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var stackScaleV4RequestTypeAdjustmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["EXACT","PERCENTAGE","BEST_EFFORT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stackScaleV4RequestTypeAdjustmentTypePropEnum = append(stackScaleV4RequestTypeAdjustmentTypePropEnum, v)
	}
}

const (

	// StackScaleV4RequestAdjustmentTypeEXACT captures enum value "EXACT"
	StackScaleV4RequestAdjustmentTypeEXACT string = "EXACT"

	// StackScaleV4RequestAdjustmentTypePERCENTAGE captures enum value "PERCENTAGE"
	StackScaleV4RequestAdjustmentTypePERCENTAGE string = "PERCENTAGE"

	// StackScaleV4RequestAdjustmentTypeBESTEFFORT captures enum value "BEST_EFFORT"
	StackScaleV4RequestAdjustmentTypeBESTEFFORT string = "BEST_EFFORT"
)

// prop value enum
func (m *StackScaleV4Request) validateAdjustmentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, stackScaleV4RequestTypeAdjustmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *StackScaleV4Request) validateAdjustmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdjustmentTypeEnum("adjustmentType", "body", m.AdjustmentType); err != nil {
		return err
	}

	return nil
}

func (m *StackScaleV4Request) validateDesiredCount(formats strfmt.Registry) error {

	if err := validate.Required("desiredCount", "body", m.DesiredCount); err != nil {
		return err
	}

	return nil
}

func (m *StackScaleV4Request) validateGroup(formats strfmt.Registry) error {

	if err := validate.Required("group", "body", m.Group); err != nil {
		return err
	}

	return nil
}

func (m *StackScaleV4Request) validateStackNetworkScaleV4Request(formats strfmt.Registry) error {

	if swag.IsZero(m.StackNetworkScaleV4Request) { // not required
		return nil
	}

	if m.StackNetworkScaleV4Request != nil {
		if err := m.StackNetworkScaleV4Request.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stackNetworkScaleV4Request")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StackScaleV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackScaleV4Request) UnmarshalBinary(b []byte) error {
	var res StackScaleV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
