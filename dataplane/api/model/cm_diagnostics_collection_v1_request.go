// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CmDiagnosticsCollectionV1Request cm diagnostics collection v1 request
// swagger:model CmDiagnosticsCollectionV1Request
type CmDiagnosticsCollectionV1Request struct {

	// The maximum approximate bundle size of the output file for CM based diagnostics collection.
	BundleSizeBytes float64 `json:"bundleSizeBytes,omitempty"`

	// Comments to include with this CM based data collection.
	Comments string `json:"comments,omitempty"`

	// Destination for the diagnostic collection request.
	// Required: true
	// Enum: [LOCAL CLOUD_STORAGE SUPPORT ENG]
	Destination *string `json:"destination"`

	// Flag to enable collection of metrics for chart display in CM based diagnostics collection.
	EnableMonitorMetricsCollection bool `json:"enableMonitorMetricsCollection,omitempty"`

	// END time for the time interval of the diagnostic collection request.
	// Format: date-time
	EndTime strfmt.DateTime `json:"endTime,omitempty"`

	// List of roles for which to get logs and metrics. If set, this restricts the roles for log and metrics collection to the list specified. If empty, the default is to get logs for all roles.
	Roles []string `json:"roles"`

	// Skip cloud storage write operation testing or databus connection check (depends on the destination) during init stage.
	SkipValidation bool `json:"skipValidation,omitempty"`

	// the unique crn of the resource
	// Required: true
	StackCrn *string `json:"stackCrn"`

	// Start time for the time interval of the diagnostic collection request.
	// Format: date-time
	StartTime strfmt.DateTime `json:"startTime,omitempty"`

	// Optional ticket or case number for Cloudera Manager based diagnostic collection request.
	Ticket string `json:"ticket,omitempty"`

	// Upgrade or install required telemetry cli tool on the nodes (works only with network)
	UpdatePackage bool `json:"updatePackage,omitempty"`
}

// Validate validates this cm diagnostics collection v1 request
func (m *CmDiagnosticsCollectionV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDestination(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEndTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cmDiagnosticsCollectionV1RequestTypeDestinationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LOCAL","CLOUD_STORAGE","SUPPORT","ENG"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cmDiagnosticsCollectionV1RequestTypeDestinationPropEnum = append(cmDiagnosticsCollectionV1RequestTypeDestinationPropEnum, v)
	}
}

const (

	// CmDiagnosticsCollectionV1RequestDestinationLOCAL captures enum value "LOCAL"
	CmDiagnosticsCollectionV1RequestDestinationLOCAL string = "LOCAL"

	// CmDiagnosticsCollectionV1RequestDestinationCLOUDSTORAGE captures enum value "CLOUD_STORAGE"
	CmDiagnosticsCollectionV1RequestDestinationCLOUDSTORAGE string = "CLOUD_STORAGE"

	// CmDiagnosticsCollectionV1RequestDestinationSUPPORT captures enum value "SUPPORT"
	CmDiagnosticsCollectionV1RequestDestinationSUPPORT string = "SUPPORT"

	// CmDiagnosticsCollectionV1RequestDestinationENG captures enum value "ENG"
	CmDiagnosticsCollectionV1RequestDestinationENG string = "ENG"
)

// prop value enum
func (m *CmDiagnosticsCollectionV1Request) validateDestinationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cmDiagnosticsCollectionV1RequestTypeDestinationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CmDiagnosticsCollectionV1Request) validateDestination(formats strfmt.Registry) error {

	if err := validate.Required("destination", "body", m.Destination); err != nil {
		return err
	}

	// value enum
	if err := m.validateDestinationEnum("destination", "body", *m.Destination); err != nil {
		return err
	}

	return nil
}

func (m *CmDiagnosticsCollectionV1Request) validateEndTime(formats strfmt.Registry) error {

	if swag.IsZero(m.EndTime) { // not required
		return nil
	}

	if err := validate.FormatOf("endTime", "body", "date-time", m.EndTime.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *CmDiagnosticsCollectionV1Request) validateStackCrn(formats strfmt.Registry) error {

	if err := validate.Required("stackCrn", "body", m.StackCrn); err != nil {
		return err
	}

	return nil
}

func (m *CmDiagnosticsCollectionV1Request) validateStartTime(formats strfmt.Registry) error {

	if swag.IsZero(m.StartTime) { // not required
		return nil
	}

	if err := validate.FormatOf("startTime", "body", "date-time", m.StartTime.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CmDiagnosticsCollectionV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CmDiagnosticsCollectionV1Request) UnmarshalBinary(b []byte) error {
	var res CmDiagnosticsCollectionV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
