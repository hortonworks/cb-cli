// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/swag"
)

// RepoConfigValidationV4Request repo config validation v4 request
// swagger:model RepoConfigValidationV4Request
type RepoConfigValidationV4Request struct {

	// url of the Ambari repository
	AmbariBaseURL string `json:"ambariBaseUrl,omitempty"`

	// gpg key of the Ambari repository
	AmbariGpgKeyURL string `json:"ambariGpgKeyUrl,omitempty"`

	// url the MPACK that needs to be installed before HDF installation
	MpackURL string `json:"mpackUrl,omitempty"`

	// url of the stack repository
	StackBaseURL string `json:"stackBaseURL,omitempty"`

	// url of the stack utils repository
	UtilsBaseURL string `json:"utilsBaseURL,omitempty"`

	// local path on the Ambari server or URL that point to the desired VDF file
	VersionDefinitionFileURL string `json:"versionDefinitionFileUrl,omitempty"`
}

// Validate validates this repo config validation v4 request
func (m *RepoConfigValidationV4Request) Validate(formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *RepoConfigValidationV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RepoConfigValidationV4Request) UnmarshalBinary(b []byte) error {
	var res RepoConfigValidationV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
