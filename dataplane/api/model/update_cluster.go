// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateCluster update cluster
// swagger:model UpdateCluster
type UpdateCluster struct {

	// details of the Ambari stack
	AmbariStackDetails *AmbariStackDetails `json:"ambariStackDetails,omitempty"`

	// blueprint id for the cluster
	BlueprintID int64 `json:"blueprintId,omitempty"`

	// host group adjustment
	HostGroupAdjustment *HostGroupAdjustment `json:"hostGroupAdjustment,omitempty"`

	// collection of hostgroups
	// Unique: true
	Hostgroups []*HostGroupRequest `json:"hostgroups"`

	// kerberos admin password
	// Max Length: 50
	// Min Length: 5
	KerberosPassword string `json:"kerberosPassword,omitempty"`

	// kerberos principal
	KerberosPrincipal string `json:"kerberosPrincipal,omitempty"`

	// request status
	// Enum: [SYNC FULL_SYNC REPAIR_FAILED_NODES STOPPED STARTED]
	Status string `json:"status,omitempty"`

	// user details
	UserNamePasswordJSON *UserNamePassword `json:"userNamePasswordJson,omitempty"`

	// blueprint validation
	ValidateBlueprint *bool `json:"validateBlueprint,omitempty"`
}

// Validate validates this update cluster
func (m *UpdateCluster) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbariStackDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostGroupAdjustment(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHostgroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKerberosPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserNamePasswordJSON(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateCluster) validateAmbariStackDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariStackDetails) { // not required
		return nil
	}

	if m.AmbariStackDetails != nil {
		if err := m.AmbariStackDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariStackDetails")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCluster) validateHostGroupAdjustment(formats strfmt.Registry) error {

	if swag.IsZero(m.HostGroupAdjustment) { // not required
		return nil
	}

	if m.HostGroupAdjustment != nil {
		if err := m.HostGroupAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("hostGroupAdjustment")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateCluster) validateHostgroups(formats strfmt.Registry) error {

	if swag.IsZero(m.Hostgroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("hostgroups", "body", m.Hostgroups); err != nil {
		return err
	}

	for i := 0; i < len(m.Hostgroups); i++ {
		if swag.IsZero(m.Hostgroups[i]) { // not required
			continue
		}

		if m.Hostgroups[i] != nil {
			if err := m.Hostgroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hostgroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateCluster) validateKerberosPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.KerberosPassword) { // not required
		return nil
	}

	if err := validate.MinLength("kerberosPassword", "body", string(m.KerberosPassword), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("kerberosPassword", "body", string(m.KerberosPassword), 50); err != nil {
		return err
	}

	return nil
}

var updateClusterTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYNC","FULL_SYNC","REPAIR_FAILED_NODES","STOPPED","STARTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateClusterTypeStatusPropEnum = append(updateClusterTypeStatusPropEnum, v)
	}
}

const (

	// UpdateClusterStatusSYNC captures enum value "SYNC"
	UpdateClusterStatusSYNC string = "SYNC"

	// UpdateClusterStatusFULLSYNC captures enum value "FULL_SYNC"
	UpdateClusterStatusFULLSYNC string = "FULL_SYNC"

	// UpdateClusterStatusREPAIRFAILEDNODES captures enum value "REPAIR_FAILED_NODES"
	UpdateClusterStatusREPAIRFAILEDNODES string = "REPAIR_FAILED_NODES"

	// UpdateClusterStatusSTOPPED captures enum value "STOPPED"
	UpdateClusterStatusSTOPPED string = "STOPPED"

	// UpdateClusterStatusSTARTED captures enum value "STARTED"
	UpdateClusterStatusSTARTED string = "STARTED"
)

// prop value enum
func (m *UpdateCluster) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateClusterTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateCluster) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *UpdateCluster) validateUserNamePasswordJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.UserNamePasswordJSON) { // not required
		return nil
	}

	if m.UserNamePasswordJSON != nil {
		if err := m.UserNamePasswordJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("userNamePasswordJson")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateCluster) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateCluster) UnmarshalBinary(b []byte) error {
	var res UpdateCluster
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
