// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomConfigurationsV4Request custom configurations v4 request
// swagger:model CustomConfigurationsV4Request
type CustomConfigurationsV4Request struct {

	// list of properties
	// Required: true
	// Unique: true
	Configurations []*CustomConfigurationPropertyParameters `json:"configurations"`

	// unique name of the custom configs
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[^;\/%]*$
	Name *string `json:"name"`

	// Runtime version that custom configs point to
	RuntimeVersion string `json:"runtimeVersion,omitempty"`
}

// Validate validates this custom configurations v4 request
func (m *CustomConfigurationsV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigurations(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomConfigurationsV4Request) validateConfigurations(formats strfmt.Registry) error {

	if err := validate.Required("configurations", "body", m.Configurations); err != nil {
		return err
	}

	if err := validate.UniqueItems("configurations", "body", m.Configurations); err != nil {
		return err
	}

	for i := 0; i < len(m.Configurations); i++ {
		if swag.IsZero(m.Configurations[i]) { // not required
			continue
		}

		if m.Configurations[i] != nil {
			if err := m.Configurations[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("configurations" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CustomConfigurationsV4Request) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[^;\/%]*$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomConfigurationsV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomConfigurationsV4Request) UnmarshalBinary(b []byte) error {
	var res CustomConfigurationsV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
