// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HardwareInfoGroupResponse hardware info group response
// swagger:model HardwareInfoGroupResponse
type HardwareInfoGroupResponse struct {

	// Metadata of instances.
	// Unique: true
	HardwareInfos []*HardwareInfoResponse `json:"hardwareInfos"`

	// name
	Name string `json:"name,omitempty"`

	// recovery mode of the hostgroup's nodes
	// Enum: [MANUAL AUTO]
	RecoveryMode string `json:"recoveryMode,omitempty"`
}

// Validate validates this hardware info group response
func (m *HardwareInfoGroupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHardwareInfos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRecoveryMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *HardwareInfoGroupResponse) validateHardwareInfos(formats strfmt.Registry) error {

	if swag.IsZero(m.HardwareInfos) { // not required
		return nil
	}

	if err := validate.UniqueItems("hardwareInfos", "body", m.HardwareInfos); err != nil {
		return err
	}

	for i := 0; i < len(m.HardwareInfos); i++ {
		if swag.IsZero(m.HardwareInfos[i]) { // not required
			continue
		}

		if m.HardwareInfos[i] != nil {
			if err := m.HardwareInfos[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hardwareInfos" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var hardwareInfoGroupResponseTypeRecoveryModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MANUAL","AUTO"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		hardwareInfoGroupResponseTypeRecoveryModePropEnum = append(hardwareInfoGroupResponseTypeRecoveryModePropEnum, v)
	}
}

const (

	// HardwareInfoGroupResponseRecoveryModeMANUAL captures enum value "MANUAL"
	HardwareInfoGroupResponseRecoveryModeMANUAL string = "MANUAL"

	// HardwareInfoGroupResponseRecoveryModeAUTO captures enum value "AUTO"
	HardwareInfoGroupResponseRecoveryModeAUTO string = "AUTO"
)

// prop value enum
func (m *HardwareInfoGroupResponse) validateRecoveryModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, hardwareInfoGroupResponseTypeRecoveryModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HardwareInfoGroupResponse) validateRecoveryMode(formats strfmt.Registry) error {

	if swag.IsZero(m.RecoveryMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateRecoveryModeEnum("recoveryMode", "body", m.RecoveryMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HardwareInfoGroupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HardwareInfoGroupResponse) UnmarshalBinary(b []byte) error {
	var res HardwareInfoGroupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
