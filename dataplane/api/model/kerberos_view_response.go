// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// KerberosViewResponse kerberos view response
// swagger:model KerberosViewResponse
type KerberosViewResponse struct {

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// environments
	// Unique: true
	Environments []string `json:"environments"`

	// id of the resource
	ID int64 `json:"id,omitempty"`

	// name of the resource
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// type
	// Enum: [ACTIVE_DIRECTORY MIT FREEIPA CUSTOM]
	Type string `json:"type,omitempty"`
}

// Validate validates this kerberos view response
func (m *KerberosViewResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *KerberosViewResponse) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *KerberosViewResponse) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	if err := validate.UniqueItems("environments", "body", m.Environments); err != nil {
		return err
	}

	return nil
}

func (m *KerberosViewResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

var kerberosViewResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ACTIVE_DIRECTORY","MIT","FREEIPA","CUSTOM"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kerberosViewResponseTypeTypePropEnum = append(kerberosViewResponseTypeTypePropEnum, v)
	}
}

const (

	// KerberosViewResponseTypeACTIVEDIRECTORY captures enum value "ACTIVE_DIRECTORY"
	KerberosViewResponseTypeACTIVEDIRECTORY string = "ACTIVE_DIRECTORY"

	// KerberosViewResponseTypeMIT captures enum value "MIT"
	KerberosViewResponseTypeMIT string = "MIT"

	// KerberosViewResponseTypeFREEIPA captures enum value "FREEIPA"
	KerberosViewResponseTypeFREEIPA string = "FREEIPA"

	// KerberosViewResponseTypeCUSTOM captures enum value "CUSTOM"
	KerberosViewResponseTypeCUSTOM string = "CUSTOM"
)

// prop value enum
func (m *KerberosViewResponse) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, kerberosViewResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *KerberosViewResponse) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *KerberosViewResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *KerberosViewResponse) UnmarshalBinary(b []byte) error {
	var res KerberosViewResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
