// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StackFromTemplateRequest stack from template request
// swagger:model StackFromTemplateRequest
type StackFromTemplateRequest struct {

	// ambari password
	// Required: true
	// Max Length: 100
	// Min Length: 5
	AmbariPassword *string `json:"ambariPassword"`

	// ambari username
	// Required: true
	// Max Length: 15
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	AmbariUserName *string `json:"ambariUserName"`

	// general configuration parameters for a cluster (e.g. 'name', 'credentialname')
	// Required: true
	General *GeneralSettings `json:"general"`

	// stack related authentication
	// Required: true
	StackAuthentication *StackAuthentication `json:"stackAuthentication"`
}

// Validate validates this stack from template request
func (m *StackFromTemplateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbariPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbariUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGeneral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StackFromTemplateRequest) validateAmbariPassword(formats strfmt.Registry) error {

	if err := validate.Required("ambariPassword", "body", m.AmbariPassword); err != nil {
		return err
	}

	if err := validate.MinLength("ambariPassword", "body", string(*m.AmbariPassword), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ambariPassword", "body", string(*m.AmbariPassword), 100); err != nil {
		return err
	}

	return nil
}

func (m *StackFromTemplateRequest) validateAmbariUserName(formats strfmt.Registry) error {

	if err := validate.Required("ambariUserName", "body", m.AmbariUserName); err != nil {
		return err
	}

	if err := validate.MinLength("ambariUserName", "body", string(*m.AmbariUserName), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ambariUserName", "body", string(*m.AmbariUserName), 15); err != nil {
		return err
	}

	if err := validate.Pattern("ambariUserName", "body", string(*m.AmbariUserName), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *StackFromTemplateRequest) validateGeneral(formats strfmt.Registry) error {

	if err := validate.Required("general", "body", m.General); err != nil {
		return err
	}

	if m.General != nil {
		if err := m.General.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("general")
			}
			return err
		}
	}

	return nil
}

func (m *StackFromTemplateRequest) validateStackAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("stackAuthentication", "body", m.StackAuthentication); err != nil {
		return err
	}

	if m.StackAuthentication != nil {
		if err := m.StackAuthentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stackAuthentication")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StackFromTemplateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StackFromTemplateRequest) UnmarshalBinary(b []byte) error {
	var res StackFromTemplateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
