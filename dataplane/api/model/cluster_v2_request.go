// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ClusterV2Request cluster v2 request
// swagger:model ClusterV2Request

type ClusterV2Request struct {

	// ambari specific requests
	Ambari *AmbariV2Request `json:"ambari,omitempty"`

	// external cloud storage configuration
	CloudStorage *CloudStorageRequest `json:"cloudStorage,omitempty"`

	// executor type of cluster
	ExecutorType string `json:"executorType,omitempty"`

	// LDAP config name for the cluster
	LdapConfigName string `json:"ldapConfigName,omitempty"`

	// proxy configuration name for the cluster
	ProxyName string `json:"proxyName,omitempty"`

	// RDS configuration names for the cluster
	// Unique: true
	RdsConfigNames []string `json:"rdsConfigNames"`

	// Shared service request
	SharedService *SharedService `json:"sharedService,omitempty"`
}

/* polymorph ClusterV2Request ambari false */

/* polymorph ClusterV2Request cloudStorage false */

/* polymorph ClusterV2Request executorType false */

/* polymorph ClusterV2Request ldapConfigName false */

/* polymorph ClusterV2Request proxyName false */

/* polymorph ClusterV2Request rdsConfigNames false */

/* polymorph ClusterV2Request sharedService false */

// Validate validates this cluster v2 request
func (m *ClusterV2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbari(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateCloudStorage(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateExecutorType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRdsConfigNames(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSharedService(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterV2Request) validateAmbari(formats strfmt.Registry) error {

	if swag.IsZero(m.Ambari) { // not required
		return nil
	}

	if m.Ambari != nil {

		if err := m.Ambari.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambari")
			}
			return err
		}
	}

	return nil
}

func (m *ClusterV2Request) validateCloudStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudStorage) { // not required
		return nil
	}

	if m.CloudStorage != nil {

		if err := m.CloudStorage.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloudStorage")
			}
			return err
		}
	}

	return nil
}

var clusterV2RequestTypeExecutorTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CONTAINER","DEFAULT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		clusterV2RequestTypeExecutorTypePropEnum = append(clusterV2RequestTypeExecutorTypePropEnum, v)
	}
}

const (
	// ClusterV2RequestExecutorTypeCONTAINER captures enum value "CONTAINER"
	ClusterV2RequestExecutorTypeCONTAINER string = "CONTAINER"
	// ClusterV2RequestExecutorTypeDEFAULT captures enum value "DEFAULT"
	ClusterV2RequestExecutorTypeDEFAULT string = "DEFAULT"
)

// prop value enum
func (m *ClusterV2Request) validateExecutorTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, clusterV2RequestTypeExecutorTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ClusterV2Request) validateExecutorType(formats strfmt.Registry) error {

	if swag.IsZero(m.ExecutorType) { // not required
		return nil
	}

	// value enum
	if err := m.validateExecutorTypeEnum("executorType", "body", m.ExecutorType); err != nil {
		return err
	}

	return nil
}

func (m *ClusterV2Request) validateRdsConfigNames(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigNames", "body", m.RdsConfigNames); err != nil {
		return err
	}

	return nil
}

func (m *ClusterV2Request) validateSharedService(formats strfmt.Registry) error {

	if swag.IsZero(m.SharedService) { // not required
		return nil
	}

	if m.SharedService != nil {

		if err := m.SharedService.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sharedService")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterV2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterV2Request) UnmarshalBinary(b []byte) error {
	var res ClusterV2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
