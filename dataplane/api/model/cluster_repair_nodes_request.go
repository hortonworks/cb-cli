// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// ClusterRepairNodesRequest cluster repair nodes request
// swagger:model ClusterRepairNodesRequest

type ClusterRepairNodesRequest struct {

	// If true, delete volumes, otherwise reattaches them to a newly created node instance.
	DeleteVolumes *bool `json:"deleteVolumes,omitempty"`

	// Node ID list of nodes that need replacement.
	Ids []string `json:"ids"`
}

/* polymorph ClusterRepairNodesRequest deleteVolumes false */

/* polymorph ClusterRepairNodesRequest ids false */

// Validate validates this cluster repair nodes request
func (m *ClusterRepairNodesRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIds(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ClusterRepairNodesRequest) validateIds(formats strfmt.Registry) error {

	if swag.IsZero(m.Ids) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ClusterRepairNodesRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ClusterRepairNodesRequest) UnmarshalBinary(b []byte) error {
	var res ClusterRepairNodesRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
