// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImageEntryV4Request image entry v4 request
// swagger:model ImageEntryV4Request
type ImageEntryV4Request struct {

	// id of the image
	// Required: true
	// Max Length: 48
	// Min Length: 32
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	ID *string `json:"id"`

	// type of the image - datalake, datahub or freeipa
	ImageType string `json:"imageType,omitempty"`

	// custom base url for parcels in case of a customized image
	ParcelBaseURL string `json:"parcelBaseUrl,omitempty"`

	// id of the source image serving as the base of the customized image
	// Required: true
	// Max Length: 48
	// Min Length: 32
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	SourceID *string `json:"sourceId"`

	// VM image references mapped to cloud regions
	VmsToRegions map[string]string `json:"vmsToRegions,omitempty"`
}

// Validate validates this image entry v4 request
func (m *ImageEntryV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImageEntryV4Request) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinLength("id", "body", string(*m.ID), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("id", "body", string(*m.ID), 48); err != nil {
		return err
	}

	if err := validate.Pattern("id", "body", string(*m.ID), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *ImageEntryV4Request) validateSourceID(formats strfmt.Registry) error {

	if err := validate.Required("sourceId", "body", m.SourceID); err != nil {
		return err
	}

	if err := validate.MinLength("sourceId", "body", string(*m.SourceID), 32); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceId", "body", string(*m.SourceID), 48); err != nil {
		return err
	}

	if err := validate.Pattern("sourceId", "body", string(*m.SourceID), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImageEntryV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImageEntryV4Request) UnmarshalBinary(b []byte) error {
	var res ImageEntryV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
