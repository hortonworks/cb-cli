// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatalakePrerequisiteRequest datalake prerequisite request
// swagger:model DatalakePrerequisiteRequest
type DatalakePrerequisiteRequest struct {

	// gathered from blueprintName field from the blueprint JSON
	// Required: true
	BlueprintName *string `json:"blueprintName"`

	// Kerberos config request
	// Required: true
	KerberosConfig *KerberosRequest `json:"kerberosConfig"`

	// LDAP config request
	// Required: true
	LdapConfig *LdapConfigRequest `json:"ldapConfig"`

	// RDS config request
	// Required: true
	// Unique: true
	RdsConfigs []*RdsConfig `json:"rdsConfigs"`
}

// Validate validates this datalake prerequisite request
func (m *DatalakePrerequisiteRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKerberosConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapConfig(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatalakePrerequisiteRequest) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

func (m *DatalakePrerequisiteRequest) validateKerberosConfig(formats strfmt.Registry) error {

	if err := validate.Required("kerberosConfig", "body", m.KerberosConfig); err != nil {
		return err
	}

	if m.KerberosConfig != nil {
		if err := m.KerberosConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kerberosConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DatalakePrerequisiteRequest) validateLdapConfig(formats strfmt.Registry) error {

	if err := validate.Required("ldapConfig", "body", m.LdapConfig); err != nil {
		return err
	}

	if m.LdapConfig != nil {
		if err := m.LdapConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldapConfig")
			}
			return err
		}
	}

	return nil
}

func (m *DatalakePrerequisiteRequest) validateRdsConfigs(formats strfmt.Registry) error {

	if err := validate.Required("rdsConfigs", "body", m.RdsConfigs); err != nil {
		return err
	}

	if err := validate.UniqueItems("rdsConfigs", "body", m.RdsConfigs); err != nil {
		return err
	}

	for i := 0; i < len(m.RdsConfigs); i++ {
		if swag.IsZero(m.RdsConfigs[i]) { // not required
			continue
		}

		if m.RdsConfigs[i] != nil {
			if err := m.RdsConfigs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rdsConfigs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatalakePrerequisiteRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatalakePrerequisiteRequest) UnmarshalBinary(b []byte) error {
	var res DatalakePrerequisiteRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
