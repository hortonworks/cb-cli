// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateStack update stack
// swagger:model UpdateStack

type UpdateStack struct {

	// instance group adjustment
	InstanceGroupAdjustment *InstanceGroupAdjustment `json:"instanceGroupAdjustment,omitempty"`

	// status of the scale request
	Status string `json:"status,omitempty"`

	// on stack update, update cluster too
	WithClusterEvent *bool `json:"withClusterEvent,omitempty"`
}

/* polymorph UpdateStack instanceGroupAdjustment false */

/* polymorph UpdateStack status false */

/* polymorph UpdateStack withClusterEvent false */

// Validate validates this update stack
func (m *UpdateStack) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstanceGroupAdjustment(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateStack) validateInstanceGroupAdjustment(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceGroupAdjustment) { // not required
		return nil
	}

	if m.InstanceGroupAdjustment != nil {

		if err := m.InstanceGroupAdjustment.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instanceGroupAdjustment")
			}
			return err
		}
	}

	return nil
}

var updateStackTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["SYNC","FULL_SYNC","REPAIR_FAILED_NODES","STOPPED","STARTED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateStackTypeStatusPropEnum = append(updateStackTypeStatusPropEnum, v)
	}
}

const (
	// UpdateStackStatusSYNC captures enum value "SYNC"
	UpdateStackStatusSYNC string = "SYNC"
	// UpdateStackStatusFULLSYNC captures enum value "FULL_SYNC"
	UpdateStackStatusFULLSYNC string = "FULL_SYNC"
	// UpdateStackStatusREPAIRFAILEDNODES captures enum value "REPAIR_FAILED_NODES"
	UpdateStackStatusREPAIRFAILEDNODES string = "REPAIR_FAILED_NODES"
	// UpdateStackStatusSTOPPED captures enum value "STOPPED"
	UpdateStackStatusSTOPPED string = "STOPPED"
	// UpdateStackStatusSTARTED captures enum value "STARTED"
	UpdateStackStatusSTARTED string = "STARTED"
)

// prop value enum
func (m *UpdateStack) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, updateStackTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *UpdateStack) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateStack) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateStack) UnmarshalBinary(b []byte) error {
	var res UpdateStack
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
