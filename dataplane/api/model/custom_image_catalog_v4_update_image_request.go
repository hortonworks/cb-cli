// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CustomImageCatalogV4UpdateImageRequest custom image catalog v4 update image request
// swagger:model CustomImageCatalogV4UpdateImageRequest
type CustomImageCatalogV4UpdateImageRequest struct {

	// base url of of parcels in the image
	// Max Length: 255
	// Min Length: 0
	BaseParcelURL *string `json:"baseParcelUrl,omitempty"`

	// type of the image - datalake, datahub or freeipa
	ImageType string `json:"imageType,omitempty"`

	// id of the source image serving as the base of the customized image
	// Max Length: 255
	// Min Length: 0
	// Pattern: (^[a-z0-9][-a-z0-9]*[a-z0-9]$)
	SourceImageID *string `json:"sourceImageId,omitempty"`

	// image references of the custom image in different regions
	// Unique: true
	VMImages []*CustomImageCatalogV4VMImageRequest `json:"vmImages"`
}

// Validate validates this custom image catalog v4 update image request
func (m *CustomImageCatalogV4UpdateImageRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseParcelURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSourceImageID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVMImages(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CustomImageCatalogV4UpdateImageRequest) validateBaseParcelURL(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseParcelURL) { // not required
		return nil
	}

	if err := validate.MinLength("baseParcelUrl", "body", string(*m.BaseParcelURL), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("baseParcelUrl", "body", string(*m.BaseParcelURL), 255); err != nil {
		return err
	}

	return nil
}

func (m *CustomImageCatalogV4UpdateImageRequest) validateSourceImageID(formats strfmt.Registry) error {

	if swag.IsZero(m.SourceImageID) { // not required
		return nil
	}

	if err := validate.MinLength("sourceImageId", "body", string(*m.SourceImageID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("sourceImageId", "body", string(*m.SourceImageID), 255); err != nil {
		return err
	}

	if err := validate.Pattern("sourceImageId", "body", string(*m.SourceImageID), `(^[a-z0-9][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *CustomImageCatalogV4UpdateImageRequest) validateVMImages(formats strfmt.Registry) error {

	if swag.IsZero(m.VMImages) { // not required
		return nil
	}

	if err := validate.UniqueItems("vmImages", "body", m.VMImages); err != nil {
		return err
	}

	for i := 0; i < len(m.VMImages); i++ {
		if swag.IsZero(m.VMImages[i]) { // not required
			continue
		}

		if m.VMImages[i] != nil {
			if err := m.VMImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vmImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CustomImageCatalogV4UpdateImageRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CustomImageCatalogV4UpdateImageRequest) UnmarshalBinary(b []byte) error {
	var res CustomImageCatalogV4UpdateImageRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
