// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DistroXRepairV1Request distro x repair v1 request
// swagger:model DistroXRepairV1Request
type DistroXRepairV1Request struct {

	// List of hostgroups where the failed nodes will be repaired
	// Required: true
	HostGroups []string `json:"hostGroups"`

	// Object consisting of deleteVolumes flag and a list of node IDs which will be repaired specifically. The existing disk volumes on the nodes will be re-created if the deleteVolumes flag is true.
	Nodes *DistroXRepairNodesV1Request `json:"nodes,omitempty"`

	// If true, the failed nodes will only be removed, otherwise the failed nodes will be removed and new nodes will be started.
	RemoveOnly bool `json:"removeOnly,omitempty"`
}

// Validate validates this distro x repair v1 request
func (m *DistroXRepairV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHostGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNodes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DistroXRepairV1Request) validateHostGroups(formats strfmt.Registry) error {

	if err := validate.Required("hostGroups", "body", m.HostGroups); err != nil {
		return err
	}

	return nil
}

func (m *DistroXRepairV1Request) validateNodes(formats strfmt.Registry) error {

	if swag.IsZero(m.Nodes) { // not required
		return nil
	}

	if m.Nodes != nil {
		if err := m.Nodes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("nodes")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DistroXRepairV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DistroXRepairV1Request) UnmarshalBinary(b []byte) error {
	var res DistroXRepairV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
