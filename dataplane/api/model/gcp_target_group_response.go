// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GcpTargetGroupResponse gcp target group response
// swagger:model GcpTargetGroupResponse
type GcpTargetGroupResponse struct {

	// The backend service that assigns this instance group to the load balancer
	// Required: true
	GcpBackendServiceName *string `json:"gcpBackendServiceName"`

	// The instances listed belong to any group receiving traffic from the loadbalancer for this port
	// Required: true
	GcpInstanceGroupName *string `json:"gcpInstanceGroupName"`
}

// Validate validates this gcp target group response
func (m *GcpTargetGroupResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGcpBackendServiceName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcpInstanceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GcpTargetGroupResponse) validateGcpBackendServiceName(formats strfmt.Registry) error {

	if err := validate.Required("gcpBackendServiceName", "body", m.GcpBackendServiceName); err != nil {
		return err
	}

	return nil
}

func (m *GcpTargetGroupResponse) validateGcpInstanceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("gcpInstanceGroupName", "body", m.GcpInstanceGroupName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GcpTargetGroupResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GcpTargetGroupResponse) UnmarshalBinary(b []byte) error {
	var res GcpTargetGroupResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
