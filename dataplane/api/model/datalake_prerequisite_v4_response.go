// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatalakePrerequisiteV4Response datalake prerequisite v4 response
// swagger:model DatalakePrerequisiteV4Response
type DatalakePrerequisiteV4Response struct {

	// RDS config response
	// Unique: true
	Databases []*DatabaseV4Response `json:"databases"`

	// Kerberos config response
	// Required: true
	Kerberos *KerberosV4Response `json:"kerberos"`

	// LDAP config response
	// Required: true
	Ldap *LdapV4Response `json:"ldap"`
}

// Validate validates this datalake prerequisite v4 response
func (m *DatalakePrerequisiteV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabases(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKerberos(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdap(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatalakePrerequisiteV4Response) validateDatabases(formats strfmt.Registry) error {

	if swag.IsZero(m.Databases) { // not required
		return nil
	}

	if err := validate.UniqueItems("databases", "body", m.Databases); err != nil {
		return err
	}

	for i := 0; i < len(m.Databases); i++ {
		if swag.IsZero(m.Databases[i]) { // not required
			continue
		}

		if m.Databases[i] != nil {
			if err := m.Databases[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("databases" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *DatalakePrerequisiteV4Response) validateKerberos(formats strfmt.Registry) error {

	if err := validate.Required("kerberos", "body", m.Kerberos); err != nil {
		return err
	}

	if m.Kerberos != nil {
		if err := m.Kerberos.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("kerberos")
			}
			return err
		}
	}

	return nil
}

func (m *DatalakePrerequisiteV4Response) validateLdap(formats strfmt.Registry) error {

	if err := validate.Required("ldap", "body", m.Ldap); err != nil {
		return err
	}

	if m.Ldap != nil {
		if err := m.Ldap.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ldap")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatalakePrerequisiteV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatalakePrerequisiteV4Response) UnmarshalBinary(b []byte) error {
	var res DatalakePrerequisiteV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
