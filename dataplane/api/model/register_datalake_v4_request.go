// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RegisterDatalakeV4Request register datalake v4 request
// swagger:model RegisterDatalakeV4Request
type RegisterDatalakeV4Request struct {

	// RDS configuration names for the cluster
	// Unique: true
	DatabaseNames []string `json:"databaseNames"`

	// Kerberos config name for the cluster
	KerberosName string `json:"kerberosName,omitempty"`

	// LDAP config name for the cluster
	LdapName string `json:"ldapName,omitempty"`

	// ranger admin password
	RangerAdminPassword string `json:"rangerAdminPassword,omitempty"`
}

// Validate validates this register datalake v4 request
func (m *RegisterDatalakeV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseNames(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RegisterDatalakeV4Request) validateDatabaseNames(formats strfmt.Registry) error {

	if swag.IsZero(m.DatabaseNames) { // not required
		return nil
	}

	if err := validate.UniqueItems("databaseNames", "body", m.DatabaseNames); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *RegisterDatalakeV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RegisterDatalakeV4Request) UnmarshalBinary(b []byte) error {
	var res RegisterDatalakeV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
