// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentDetachRequest environment detach request
// swagger:model EnvironmentDetachRequest
type EnvironmentDetachRequest struct {

	// Name of the Kubernetes configurations to be attached to the environment.
	// Unique: true
	KubernetesConfigs []string `json:"kubernetesConfigs"`

	// Name of the LDAP configurations to be attached to the environment.
	// Unique: true
	LdapConfigs []string `json:"ldapConfigs"`

	// Name of the proxy configurations to be attached to the environment.
	// Unique: true
	ProxyConfigs []string `json:"proxyConfigs"`

	// Name of the RDS configurations to be attached to the environment.
	// Unique: true
	RdsConfigs []string `json:"rdsConfigs"`
}

// Validate validates this environment detach request
func (m *EnvironmentDetachRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateKubernetesConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLdapConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProxyConfigs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRdsConfigs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentDetachRequest) validateKubernetesConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.KubernetesConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("kubernetesConfigs", "body", m.KubernetesConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentDetachRequest) validateLdapConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("ldapConfigs", "body", m.LdapConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentDetachRequest) validateProxyConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("proxyConfigs", "body", m.ProxyConfigs); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentDetachRequest) validateRdsConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigs", "body", m.RdsConfigs); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentDetachRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentDetachRequest) UnmarshalBinary(b []byte) error {
	var res EnvironmentDetachRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
