// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AmbariV2Request ambari v2 request
// swagger:model AmbariV2Request
type AmbariV2Request struct {

	// [DEPRECATED] use RdsConfig instead! details of the external Ambari database
	AmbariDatabaseDetails *AmbariDatabaseDetails `json:"ambariDatabaseDetails,omitempty"`

	// details of the Ambari package repository
	AmbariRepoDetailsJSON *AmbariRepoDetails `json:"ambariRepoDetailsJson,omitempty"`

	// a master key for encrypting the passwords in Ambari
	// Max Length: 100
	// Min Length: 5
	AmbariSecurityMasterKey string `json:"ambariSecurityMasterKey,omitempty"`

	// details of the Ambari stack
	AmbariStackDetails *AmbariStackDetails `json:"ambariStackDetails,omitempty"`

	// blueprint id for the cluster
	BlueprintID int64 `json:"blueprintId,omitempty"`

	// blueprint name for the cluster
	BlueprintName string `json:"blueprintName,omitempty"`

	// config recommendation strategy
	// Enum: [NEVER_APPLY ONLY_STACK_DEFAULTS_APPLY ALWAYS_APPLY ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES]
	ConfigStrategy string `json:"configStrategy,omitempty"`

	// cluster can connect to a datalake you can define the parameters here
	ConnectedCluster *ConnectedClusterRequest `json:"connectedCluster,omitempty"`

	// gateway
	Gateway *GatewayJSON `json:"gateway,omitempty"`

	// kerberos config name
	KerberosConfigName string `json:"kerberosConfigName,omitempty"`

	// ambari password
	// Required: true
	// Max Length: 100
	// Min Length: 5
	Password *string `json:"password"`

	// ambari username
	// Required: true
	// Max Length: 15
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	UserName *string `json:"userName"`

	// blueprint validation
	ValidateBlueprint *bool `json:"validateBlueprint,omitempty"`

	// ambari and stack repository validation
	ValidateRepositories *bool `json:"validateRepositories,omitempty"`
}

// Validate validates this ambari v2 request
func (m *AmbariV2Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmbariDatabaseDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbariRepoDetailsJSON(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbariSecurityMasterKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmbariStackDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectedCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUserName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AmbariV2Request) validateAmbariDatabaseDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariDatabaseDetails) { // not required
		return nil
	}

	if m.AmbariDatabaseDetails != nil {
		if err := m.AmbariDatabaseDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariDatabaseDetails")
			}
			return err
		}
	}

	return nil
}

func (m *AmbariV2Request) validateAmbariRepoDetailsJSON(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariRepoDetailsJSON) { // not required
		return nil
	}

	if m.AmbariRepoDetailsJSON != nil {
		if err := m.AmbariRepoDetailsJSON.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariRepoDetailsJson")
			}
			return err
		}
	}

	return nil
}

func (m *AmbariV2Request) validateAmbariSecurityMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariSecurityMasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("ambariSecurityMasterKey", "body", string(m.AmbariSecurityMasterKey), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("ambariSecurityMasterKey", "body", string(m.AmbariSecurityMasterKey), 100); err != nil {
		return err
	}

	return nil
}

func (m *AmbariV2Request) validateAmbariStackDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.AmbariStackDetails) { // not required
		return nil
	}

	if m.AmbariStackDetails != nil {
		if err := m.AmbariStackDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ambariStackDetails")
			}
			return err
		}
	}

	return nil
}

var ambariV2RequestTypeConfigStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEVER_APPLY","ONLY_STACK_DEFAULTS_APPLY","ALWAYS_APPLY","ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ambariV2RequestTypeConfigStrategyPropEnum = append(ambariV2RequestTypeConfigStrategyPropEnum, v)
	}
}

const (

	// AmbariV2RequestConfigStrategyNEVERAPPLY captures enum value "NEVER_APPLY"
	AmbariV2RequestConfigStrategyNEVERAPPLY string = "NEVER_APPLY"

	// AmbariV2RequestConfigStrategyONLYSTACKDEFAULTSAPPLY captures enum value "ONLY_STACK_DEFAULTS_APPLY"
	AmbariV2RequestConfigStrategyONLYSTACKDEFAULTSAPPLY string = "ONLY_STACK_DEFAULTS_APPLY"

	// AmbariV2RequestConfigStrategyALWAYSAPPLY captures enum value "ALWAYS_APPLY"
	AmbariV2RequestConfigStrategyALWAYSAPPLY string = "ALWAYS_APPLY"

	// AmbariV2RequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES captures enum value "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
	AmbariV2RequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES string = "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
)

// prop value enum
func (m *AmbariV2Request) validateConfigStrategyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ambariV2RequestTypeConfigStrategyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AmbariV2Request) validateConfigStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigStrategyEnum("configStrategy", "body", m.ConfigStrategy); err != nil {
		return err
	}

	return nil
}

func (m *AmbariV2Request) validateConnectedCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectedCluster) { // not required
		return nil
	}

	if m.ConnectedCluster != nil {
		if err := m.ConnectedCluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectedCluster")
			}
			return err
		}
	}

	return nil
}

func (m *AmbariV2Request) validateGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.Gateway) { // not required
		return nil
	}

	if m.Gateway != nil {
		if err := m.Gateway.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gateway")
			}
			return err
		}
	}

	return nil
}

func (m *AmbariV2Request) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 100); err != nil {
		return err
	}

	return nil
}

func (m *AmbariV2Request) validateUserName(formats strfmt.Registry) error {

	if err := validate.Required("userName", "body", m.UserName); err != nil {
		return err
	}

	if err := validate.MinLength("userName", "body", string(*m.UserName), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("userName", "body", string(*m.UserName), 15); err != nil {
		return err
	}

	if err := validate.Pattern("userName", "body", string(*m.UserName), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AmbariV2Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmbariV2Request) UnmarshalBinary(b []byte) error {
	var res AmbariV2Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
