// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ReinstallV4Request reinstall v4 request
// swagger:model ReinstallV4Request
type ReinstallV4Request struct {

	// blueprint name for the cluster
	// Required: true
	BlueprintName *string `json:"blueprintName"`

	// collection of instance groupst
	// Unique: true
	InstanceGroups []*InstanceGroupV4Request `json:"instanceGroups"`

	// kerberos admin password
	// Max Length: 50
	// Min Length: 5
	KerberosPassword string `json:"kerberosPassword,omitempty"`

	// kerberos principal
	KerberosPrincipal string `json:"kerberosPrincipal,omitempty"`

	// details of the Ambari stack
	StackRepository *StackRepositoryV4Request `json:"stackRepository,omitempty"`
}

// Validate validates this reinstall v4 request
func (m *ReinstallV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBlueprintName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstanceGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKerberosPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ReinstallV4Request) validateBlueprintName(formats strfmt.Registry) error {

	if err := validate.Required("blueprintName", "body", m.BlueprintName); err != nil {
		return err
	}

	return nil
}

func (m *ReinstallV4Request) validateInstanceGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.InstanceGroups) { // not required
		return nil
	}

	if err := validate.UniqueItems("instanceGroups", "body", m.InstanceGroups); err != nil {
		return err
	}

	for i := 0; i < len(m.InstanceGroups); i++ {
		if swag.IsZero(m.InstanceGroups[i]) { // not required
			continue
		}

		if m.InstanceGroups[i] != nil {
			if err := m.InstanceGroups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("instanceGroups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ReinstallV4Request) validateKerberosPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.KerberosPassword) { // not required
		return nil
	}

	if err := validate.MinLength("kerberosPassword", "body", string(m.KerberosPassword), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("kerberosPassword", "body", string(m.KerberosPassword), 50); err != nil {
		return err
	}

	return nil
}

func (m *ReinstallV4Request) validateStackRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.StackRepository) { // not required
		return nil
	}

	if m.StackRepository != nil {
		if err := m.StackRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stackRepository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ReinstallV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ReinstallV4Request) UnmarshalBinary(b []byte) error {
	var res ReinstallV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
