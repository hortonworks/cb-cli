// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FreeIPAKerberosDescriptor free IP a kerberos descriptor
// swagger:model FreeIPAKerberosDescriptor
type FreeIPAKerberosDescriptor struct {

	// kerberos admin user
	Admin string `json:"admin,omitempty"`

	// kerberos admin server URL
	// Required: true
	AdminURL *string `json:"adminUrl"`

	// cluster instances will set this as the domain part of their hostname
	Domain string `json:"domain,omitempty"`

	// comma separated list of nameservers' IP address which will be used by cluster instances
	// Pattern: (^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(,((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$)
	NameServers string `json:"nameServers,omitempty"`

	// kerberos admin password
	// Required: true
	// Max Length: 50
	// Min Length: 5
	Password *string `json:"password"`

	// kerberos principal
	// Required: true
	Principal *string `json:"principal"`

	// kerberos realm
	// Required: true
	Realm *string `json:"realm"`

	// kerberos configuration name
	// Required: true
	TCPAllowed *bool `json:"tcpAllowed"`

	// kerberos KDC server URL
	// Required: true
	URL *string `json:"url"`

	// Allows to select either a trusting SSL connection or a validating (non-trusting) SSL connection to KDC
	VerifyKdcTrust bool `json:"verifyKdcTrust,omitempty"`
}

// Validate validates this free IP a kerberos descriptor
func (m *FreeIPAKerberosDescriptor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdminURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNameServers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrincipal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRealm(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTCPAllowed(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FreeIPAKerberosDescriptor) validateAdminURL(formats strfmt.Registry) error {

	if err := validate.Required("adminUrl", "body", m.AdminURL); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validateNameServers(formats strfmt.Registry) error {

	if swag.IsZero(m.NameServers) { // not required
		return nil
	}

	if err := validate.Pattern("nameServers", "body", string(m.NameServers), `(^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)(,((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?))*$)`); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", string(*m.Password), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("password", "body", string(*m.Password), 50); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validatePrincipal(formats strfmt.Registry) error {

	if err := validate.Required("principal", "body", m.Principal); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validateRealm(formats strfmt.Registry) error {

	if err := validate.Required("realm", "body", m.Realm); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validateTCPAllowed(formats strfmt.Registry) error {

	if err := validate.Required("tcpAllowed", "body", m.TCPAllowed); err != nil {
		return err
	}

	return nil
}

func (m *FreeIPAKerberosDescriptor) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FreeIPAKerberosDescriptor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FreeIPAKerberosDescriptor) UnmarshalBinary(b []byte) error {
	var res FreeIPAKerberosDescriptor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
