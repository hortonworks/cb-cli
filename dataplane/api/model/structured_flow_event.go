// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// StructuredFlowEvent structured flow event
// swagger:model StructuredFlowEvent
type StructuredFlowEvent struct {

	// cluster
	Cluster *ClusterDetails `json:"cluster,omitempty"`

	// cluster definition details
	ClusterDefinitionDetails *ClusterDefinitionDetails `json:"clusterDefinitionDetails,omitempty"`

	// duration
	Duration int64 `json:"duration,omitempty"`

	// exception
	Exception string `json:"exception,omitempty"`

	// flow
	Flow *FlowDetails `json:"flow,omitempty"`

	// operation
	Operation *OperationDetails `json:"operation,omitempty"`

	// stack
	Stack *StackDetails `json:"stack,omitempty"`

	// status
	Status string `json:"status,omitempty"`

	// type
	Type string `json:"type,omitempty"`
}

// Validate validates this structured flow event
func (m *StructuredFlowEvent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCluster(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateClusterDefinitionDetails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFlow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStack(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StructuredFlowEvent) validateCluster(formats strfmt.Registry) error {

	if swag.IsZero(m.Cluster) { // not required
		return nil
	}

	if m.Cluster != nil {
		if err := m.Cluster.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cluster")
			}
			return err
		}
	}

	return nil
}

func (m *StructuredFlowEvent) validateClusterDefinitionDetails(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterDefinitionDetails) { // not required
		return nil
	}

	if m.ClusterDefinitionDetails != nil {
		if err := m.ClusterDefinitionDetails.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("clusterDefinitionDetails")
			}
			return err
		}
	}

	return nil
}

func (m *StructuredFlowEvent) validateFlow(formats strfmt.Registry) error {

	if swag.IsZero(m.Flow) { // not required
		return nil
	}

	if m.Flow != nil {
		if err := m.Flow.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("flow")
			}
			return err
		}
	}

	return nil
}

func (m *StructuredFlowEvent) validateOperation(formats strfmt.Registry) error {

	if swag.IsZero(m.Operation) { // not required
		return nil
	}

	if m.Operation != nil {
		if err := m.Operation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("operation")
			}
			return err
		}
	}

	return nil
}

func (m *StructuredFlowEvent) validateStack(formats strfmt.Registry) error {

	if swag.IsZero(m.Stack) { // not required
		return nil
	}

	if m.Stack != nil {
		if err := m.Stack.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stack")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StructuredFlowEvent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StructuredFlowEvent) UnmarshalBinary(b []byte) error {
	var res StructuredFlowEvent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
