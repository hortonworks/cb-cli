// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AmbariV4Request ambari v4 request
// swagger:model AmbariV4Request
type AmbariV4Request struct {

	// config recommendation strategy, default value is 'ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES'
	// Enum: [NEVER_APPLY ONLY_STACK_DEFAULTS_APPLY ALWAYS_APPLY ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES]
	ConfigStrategy string `json:"configStrategy,omitempty"`

	// details of the Ambari package repository
	Repository *AmbariRepositoryV4Request `json:"repository,omitempty"`

	// a master key for encrypting the passwords in Ambari
	// Max Length: 100
	// Min Length: 5
	SecurityMasterKey string `json:"securityMasterKey,omitempty"`

	// details of the Ambari stack
	StackRepository *StackRepositoryV4Request `json:"stackRepository,omitempty"`

	// ambari and stack repository validation
	ValidateRepositories bool `json:"validateRepositories,omitempty"`
}

// Validate validates this ambari v4 request
func (m *AmbariV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigStrategy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRepository(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityMasterKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStackRepository(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ambariV4RequestTypeConfigStrategyPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NEVER_APPLY","ONLY_STACK_DEFAULTS_APPLY","ALWAYS_APPLY","ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ambariV4RequestTypeConfigStrategyPropEnum = append(ambariV4RequestTypeConfigStrategyPropEnum, v)
	}
}

const (

	// AmbariV4RequestConfigStrategyNEVERAPPLY captures enum value "NEVER_APPLY"
	AmbariV4RequestConfigStrategyNEVERAPPLY string = "NEVER_APPLY"

	// AmbariV4RequestConfigStrategyONLYSTACKDEFAULTSAPPLY captures enum value "ONLY_STACK_DEFAULTS_APPLY"
	AmbariV4RequestConfigStrategyONLYSTACKDEFAULTSAPPLY string = "ONLY_STACK_DEFAULTS_APPLY"

	// AmbariV4RequestConfigStrategyALWAYSAPPLY captures enum value "ALWAYS_APPLY"
	AmbariV4RequestConfigStrategyALWAYSAPPLY string = "ALWAYS_APPLY"

	// AmbariV4RequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES captures enum value "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
	AmbariV4RequestConfigStrategyALWAYSAPPLYDONTOVERRIDECUSTOMVALUES string = "ALWAYS_APPLY_DONT_OVERRIDE_CUSTOM_VALUES"
)

// prop value enum
func (m *AmbariV4Request) validateConfigStrategyEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ambariV4RequestTypeConfigStrategyPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AmbariV4Request) validateConfigStrategy(formats strfmt.Registry) error {

	if swag.IsZero(m.ConfigStrategy) { // not required
		return nil
	}

	// value enum
	if err := m.validateConfigStrategyEnum("configStrategy", "body", m.ConfigStrategy); err != nil {
		return err
	}

	return nil
}

func (m *AmbariV4Request) validateRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.Repository) { // not required
		return nil
	}

	if m.Repository != nil {
		if err := m.Repository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("repository")
			}
			return err
		}
	}

	return nil
}

func (m *AmbariV4Request) validateSecurityMasterKey(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityMasterKey) { // not required
		return nil
	}

	if err := validate.MinLength("securityMasterKey", "body", string(m.SecurityMasterKey), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("securityMasterKey", "body", string(m.SecurityMasterKey), 100); err != nil {
		return err
	}

	return nil
}

func (m *AmbariV4Request) validateStackRepository(formats strfmt.Registry) error {

	if swag.IsZero(m.StackRepository) { // not required
		return nil
	}

	if m.StackRepository != nil {
		if err := m.StackRepository.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("stackRepository")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AmbariV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AmbariV4Request) UnmarshalBinary(b []byte) error {
	var res AmbariV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
