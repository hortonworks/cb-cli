// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerSslConfig database server ssl config
// swagger:model DatabaseServerSslConfig
type DatabaseServerSslConfig struct {

	// SSL certificate type
	// Enum: [CLOUD_PROVIDER_OWNED BRING_YOUR_OWN NONE]
	SslCertificateType string `json:"sslCertificateType,omitempty"`

	// Set of SSL certificates for the actual database server
	// Unique: true
	SslCertificates []string `json:"sslCertificates"`

	// SSL enforcement mode for the actual database server
	// Enum: [ENABLED DISABLED]
	SslMode string `json:"sslMode,omitempty"`
}

// Validate validates this database server ssl config
func (m *DatabaseServerSslConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSslCertificateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var databaseServerSslConfigTypeSslCertificateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD_PROVIDER_OWNED","BRING_YOUR_OWN","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerSslConfigTypeSslCertificateTypePropEnum = append(databaseServerSslConfigTypeSslCertificateTypePropEnum, v)
	}
}

const (

	// DatabaseServerSslConfigSslCertificateTypeCLOUDPROVIDEROWNED captures enum value "CLOUD_PROVIDER_OWNED"
	DatabaseServerSslConfigSslCertificateTypeCLOUDPROVIDEROWNED string = "CLOUD_PROVIDER_OWNED"

	// DatabaseServerSslConfigSslCertificateTypeBRINGYOUROWN captures enum value "BRING_YOUR_OWN"
	DatabaseServerSslConfigSslCertificateTypeBRINGYOUROWN string = "BRING_YOUR_OWN"

	// DatabaseServerSslConfigSslCertificateTypeNONE captures enum value "NONE"
	DatabaseServerSslConfigSslCertificateTypeNONE string = "NONE"
)

// prop value enum
func (m *DatabaseServerSslConfig) validateSslCertificateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, databaseServerSslConfigTypeSslCertificateTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServerSslConfig) validateSslCertificateType(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslCertificateTypeEnum("sslCertificateType", "body", m.SslCertificateType); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerSslConfig) validateSslCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificates) { // not required
		return nil
	}

	if err := validate.UniqueItems("sslCertificates", "body", m.SslCertificates); err != nil {
		return err
	}

	return nil
}

var databaseServerSslConfigTypeSslModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerSslConfigTypeSslModePropEnum = append(databaseServerSslConfigTypeSslModePropEnum, v)
	}
}

const (

	// DatabaseServerSslConfigSslModeENABLED captures enum value "ENABLED"
	DatabaseServerSslConfigSslModeENABLED string = "ENABLED"

	// DatabaseServerSslConfigSslModeDISABLED captures enum value "DISABLED"
	DatabaseServerSslConfigSslModeDISABLED string = "DISABLED"
)

// prop value enum
func (m *DatabaseServerSslConfig) validateSslModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, databaseServerSslConfigTypeSslModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServerSslConfig) validateSslMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SslMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslModeEnum("sslMode", "body", m.SslMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerSslConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerSslConfig) UnmarshalBinary(b []byte) error {
	var res DatabaseServerSslConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
