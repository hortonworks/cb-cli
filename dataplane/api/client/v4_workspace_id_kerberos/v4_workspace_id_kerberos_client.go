// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_kerberos

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id kerberos API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id kerberos API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachKerberosConfigToEnvironments attaches kerberos config to environemnts

Kerberos config operations
*/
func (a *Client) AttachKerberosConfigToEnvironments(params *AttachKerberosConfigToEnvironmentsParams) (*AttachKerberosConfigToEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachKerberosConfigToEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachKerberosConfigToEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/kerberos/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachKerberosConfigToEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachKerberosConfigToEnvironmentsOK), nil

}

/*
CreateKerberosConfigInWorkspace creates kerberos config in workspace

Kerberos config operations
*/
func (a *Client) CreateKerberosConfigInWorkspace(params *CreateKerberosConfigInWorkspaceParams) (*CreateKerberosConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKerberosConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKerberosConfigInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKerberosConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateKerberosConfigInWorkspaceOK), nil

}

/*
DeleteKerberosConfigInWorkspace deletes kerberos config by name in workspace

Kerberos config operations
*/
func (a *Client) DeleteKerberosConfigInWorkspace(params *DeleteKerberosConfigInWorkspaceParams) (*DeleteKerberosConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKerberosConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKerberosConfigInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/kerberos/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKerberosConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKerberosConfigInWorkspaceOK), nil

}

/*
DeleteKerberosConfigsInWorkspace deletes multiple kerberos configs by name in workspace

Kerberos config operations
*/
func (a *Client) DeleteKerberosConfigsInWorkspace(params *DeleteKerberosConfigsInWorkspaceParams) (*DeleteKerberosConfigsInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKerberosConfigsInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKerberosConfigsInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKerberosConfigsInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKerberosConfigsInWorkspaceOK), nil

}

/*
DetachKerberosConfigFromEnvironments detaches kerberos config from environemnts

Kerberos config operations
*/
func (a *Client) DetachKerberosConfigFromEnvironments(params *DetachKerberosConfigFromEnvironmentsParams) (*DetachKerberosConfigFromEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachKerberosConfigFromEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachKerberosConfigFromEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/kerberos/{name}/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DetachKerberosConfigFromEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachKerberosConfigFromEnvironmentsOK), nil

}

/*
GetKerberosConfigInWorkspace gets kerberos config by name in workspace

Kerberos config operations
*/
func (a *Client) GetKerberosConfigInWorkspace(params *GetKerberosConfigInWorkspaceParams) (*GetKerberosConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKerberosConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKerberosConfigInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/kerberos/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKerberosConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKerberosConfigInWorkspaceOK), nil

}

/*
GetKerberosRequestByNameAndWorkspaceID gets request by name

Kerberos config operations
*/
func (a *Client) GetKerberosRequestByNameAndWorkspaceID(params *GetKerberosRequestByNameAndWorkspaceIDParams) (*GetKerberosRequestByNameAndWorkspaceIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKerberosRequestByNameAndWorkspaceIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKerberosRequestByNameAndWorkspaceId",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/kerberos/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKerberosRequestByNameAndWorkspaceIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKerberosRequestByNameAndWorkspaceIDOK), nil

}

/*
ListKerberosConfigByWorkspace lists kerberos configs for the given workspace

Kerberos config operations
*/
func (a *Client) ListKerberosConfigByWorkspace(params *ListKerberosConfigByWorkspaceParams) (*ListKerberosConfigByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListKerberosConfigByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listKerberosConfigByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/kerberos",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListKerberosConfigByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListKerberosConfigByWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
