// Code generated by go-swagger; DO NOT EDIT.

package autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDecommissionInstancesForClusterCrnParams creates a new DecommissionInstancesForClusterCrnParams object
// with the default values initialized.
func NewDecommissionInstancesForClusterCrnParams() *DecommissionInstancesForClusterCrnParams {
	var (
		forcedDefault = bool(false)
	)
	return &DecommissionInstancesForClusterCrnParams{
		Forced: &forcedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDecommissionInstancesForClusterCrnParamsWithTimeout creates a new DecommissionInstancesForClusterCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDecommissionInstancesForClusterCrnParamsWithTimeout(timeout time.Duration) *DecommissionInstancesForClusterCrnParams {
	var (
		forcedDefault = bool(false)
	)
	return &DecommissionInstancesForClusterCrnParams{
		Forced: &forcedDefault,

		timeout: timeout,
	}
}

// NewDecommissionInstancesForClusterCrnParamsWithContext creates a new DecommissionInstancesForClusterCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewDecommissionInstancesForClusterCrnParamsWithContext(ctx context.Context) *DecommissionInstancesForClusterCrnParams {
	var (
		forcedDefault = bool(false)
	)
	return &DecommissionInstancesForClusterCrnParams{
		Forced: &forcedDefault,

		Context: ctx,
	}
}

// NewDecommissionInstancesForClusterCrnParamsWithHTTPClient creates a new DecommissionInstancesForClusterCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDecommissionInstancesForClusterCrnParamsWithHTTPClient(client *http.Client) *DecommissionInstancesForClusterCrnParams {
	var (
		forcedDefault = bool(false)
	)
	return &DecommissionInstancesForClusterCrnParams{
		Forced:     &forcedDefault,
		HTTPClient: client,
	}
}

/*DecommissionInstancesForClusterCrnParams contains all the parameters to send to the API endpoint
for the decommission instances for cluster crn operation typically these are written to a http.Request
*/
type DecommissionInstancesForClusterCrnParams struct {

	/*Crn*/
	Crn string
	/*Forced*/
	Forced *bool
	/*InstanceID*/
	InstanceID []string
	/*WorkspaceID*/
	WorkspaceID *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithTimeout(timeout time.Duration) *DecommissionInstancesForClusterCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithContext(ctx context.Context) *DecommissionInstancesForClusterCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithHTTPClient(client *http.Client) *DecommissionInstancesForClusterCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCrn adds the crn to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithCrn(crn string) *DecommissionInstancesForClusterCrnParams {
	o.SetCrn(crn)
	return o
}

// SetCrn adds the crn to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetCrn(crn string) {
	o.Crn = crn
}

// WithForced adds the forced to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithForced(forced *bool) *DecommissionInstancesForClusterCrnParams {
	o.SetForced(forced)
	return o
}

// SetForced adds the forced to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetForced(forced *bool) {
	o.Forced = forced
}

// WithInstanceID adds the instanceID to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithInstanceID(instanceID []string) *DecommissionInstancesForClusterCrnParams {
	o.SetInstanceID(instanceID)
	return o
}

// SetInstanceID adds the instanceId to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetInstanceID(instanceID []string) {
	o.InstanceID = instanceID
}

// WithWorkspaceID adds the workspaceID to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) WithWorkspaceID(workspaceID *int64) *DecommissionInstancesForClusterCrnParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the decommission instances for cluster crn params
func (o *DecommissionInstancesForClusterCrnParams) SetWorkspaceID(workspaceID *int64) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *DecommissionInstancesForClusterCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param crn
	if err := r.SetPathParam("crn", o.Crn); err != nil {
		return err
	}

	if o.Forced != nil {

		// query param forced
		var qrForced bool
		if o.Forced != nil {
			qrForced = *o.Forced
		}
		qForced := swag.FormatBool(qrForced)
		if qForced != "" {
			if err := r.SetQueryParam("forced", qForced); err != nil {
				return err
			}
		}

	}

	valuesInstanceID := o.InstanceID

	joinedInstanceID := swag.JoinByFormat(valuesInstanceID, "multi")
	// query array param instanceId
	if err := r.SetQueryParam("instanceId", joinedInstanceID...); err != nil {
		return err
	}

	if o.WorkspaceID != nil {

		// query param workspaceId
		var qrWorkspaceID int64
		if o.WorkspaceID != nil {
			qrWorkspaceID = *o.WorkspaceID
		}
		qWorkspaceID := swag.FormatInt64(qrWorkspaceID)
		if qWorkspaceID != "" {
			if err := r.SetQueryParam("workspaceId", qWorkspaceID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
