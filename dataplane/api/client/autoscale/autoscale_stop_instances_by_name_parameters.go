// Code generated by go-swagger; DO NOT EDIT.

package autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAutoscaleStopInstancesByNameParams creates a new AutoscaleStopInstancesByNameParams object
// with the default values initialized.
func NewAutoscaleStopInstancesByNameParams() *AutoscaleStopInstancesByNameParams {
	var (
		forcedDefault = bool(false)
	)
	return &AutoscaleStopInstancesByNameParams{
		Forced: &forcedDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewAutoscaleStopInstancesByNameParamsWithTimeout creates a new AutoscaleStopInstancesByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAutoscaleStopInstancesByNameParamsWithTimeout(timeout time.Duration) *AutoscaleStopInstancesByNameParams {
	var (
		forcedDefault = bool(false)
	)
	return &AutoscaleStopInstancesByNameParams{
		Forced: &forcedDefault,

		timeout: timeout,
	}
}

// NewAutoscaleStopInstancesByNameParamsWithContext creates a new AutoscaleStopInstancesByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewAutoscaleStopInstancesByNameParamsWithContext(ctx context.Context) *AutoscaleStopInstancesByNameParams {
	var (
		forcedDefault = bool(false)
	)
	return &AutoscaleStopInstancesByNameParams{
		Forced: &forcedDefault,

		Context: ctx,
	}
}

// NewAutoscaleStopInstancesByNameParamsWithHTTPClient creates a new AutoscaleStopInstancesByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAutoscaleStopInstancesByNameParamsWithHTTPClient(client *http.Client) *AutoscaleStopInstancesByNameParams {
	var (
		forcedDefault = bool(false)
	)
	return &AutoscaleStopInstancesByNameParams{
		Forced:     &forcedDefault,
		HTTPClient: client,
	}
}

/*
AutoscaleStopInstancesByNameParams contains all the parameters to send to the API endpoint
for the autoscale stop instances by name operation typically these are written to a http.Request
*/
type AutoscaleStopInstancesByNameParams struct {

	/*Body*/
	Body []string
	/*Forced*/
	Forced *bool
	/*Name*/
	Name string
	/*ScalingStrategy*/
	ScalingStrategy *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithTimeout(timeout time.Duration) *AutoscaleStopInstancesByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithContext(ctx context.Context) *AutoscaleStopInstancesByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithHTTPClient(client *http.Client) *AutoscaleStopInstancesByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithBody(body []string) *AutoscaleStopInstancesByNameParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetBody(body []string) {
	o.Body = body
}

// WithForced adds the forced to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithForced(forced *bool) *AutoscaleStopInstancesByNameParams {
	o.SetForced(forced)
	return o
}

// SetForced adds the forced to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetForced(forced *bool) {
	o.Forced = forced
}

// WithName adds the name to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithName(name string) *AutoscaleStopInstancesByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetName(name string) {
	o.Name = name
}

// WithScalingStrategy adds the scalingStrategy to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) WithScalingStrategy(scalingStrategy *string) *AutoscaleStopInstancesByNameParams {
	o.SetScalingStrategy(scalingStrategy)
	return o
}

// SetScalingStrategy adds the scalingStrategy to the autoscale stop instances by name params
func (o *AutoscaleStopInstancesByNameParams) SetScalingStrategy(scalingStrategy *string) {
	o.ScalingStrategy = scalingStrategy
}

// WriteToRequest writes these params to a swagger request
func (o *AutoscaleStopInstancesByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if o.Forced != nil {

		// query param forced
		var qrForced bool
		if o.Forced != nil {
			qrForced = *o.Forced
		}
		qForced := swag.FormatBool(qrForced)
		if qForced != "" {
			if err := r.SetQueryParam("forced", qForced); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.ScalingStrategy != nil {

		// query param scalingStrategy
		var qrScalingStrategy string
		if o.ScalingStrategy != nil {
			qrScalingStrategy = *o.ScalingStrategy
		}
		qScalingStrategy := qrScalingStrategy
		if qScalingStrategy != "" {
			if err := r.SetQueryParam("scalingStrategy", qScalingStrategy); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
