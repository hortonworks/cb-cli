// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_smartsense_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id smartsense subscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id smartsense subscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateSmartSenseSubscriptionInWorkspace creates smart sense subscription in workspace

SmartSense subscriptions could be configured.
*/
func (a *Client) CreateSmartSenseSubscriptionInWorkspace(params *CreateSmartSenseSubscriptionInWorkspaceParams) (*CreateSmartSenseSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateSmartSenseSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createSmartSenseSubscriptionInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/smartsense_subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateSmartSenseSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateSmartSenseSubscriptionInWorkspaceOK), nil

}

/*
DeleteSmartSenseSubscriptionInWorkspace deletes smart sense subscription by name in workspace

SmartSense subscriptions could be configured.
*/
func (a *Client) DeleteSmartSenseSubscriptionInWorkspace(params *DeleteSmartSenseSubscriptionInWorkspaceParams) (*DeleteSmartSenseSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteSmartSenseSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteSmartSenseSubscriptionInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/smartsense_subscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteSmartSenseSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteSmartSenseSubscriptionInWorkspaceOK), nil

}

/*
GetSmartSenseSubscriptionInWorkspace gets smart sense subscription by name in workspace

SmartSense subscriptions could be configured.
*/
func (a *Client) GetSmartSenseSubscriptionInWorkspace(params *GetSmartSenseSubscriptionInWorkspaceParams) (*GetSmartSenseSubscriptionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSmartSenseSubscriptionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSmartSenseSubscriptionInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/smartsense_subscriptions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSmartSenseSubscriptionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSmartSenseSubscriptionInWorkspaceOK), nil

}

/*
ListSmartSenseSubscriptionsByWorkspace lists smart sense subscriptions for the given workspace

SmartSense subscriptions could be configured.
*/
func (a *Client) ListSmartSenseSubscriptionsByWorkspace(params *ListSmartSenseSubscriptionsByWorkspaceParams) (*ListSmartSenseSubscriptionsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListSmartSenseSubscriptionsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listSmartSenseSubscriptionsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/smartsense_subscriptions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListSmartSenseSubscriptionsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListSmartSenseSubscriptionsByWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
