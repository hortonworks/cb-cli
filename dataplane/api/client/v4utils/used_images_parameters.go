// Code generated by go-swagger; DO NOT EDIT.

package v4utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUsedImagesParams creates a new UsedImagesParams object
// with the default values initialized.
func NewUsedImagesParams() *UsedImagesParams {
	var ()
	return &UsedImagesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUsedImagesParamsWithTimeout creates a new UsedImagesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUsedImagesParamsWithTimeout(timeout time.Duration) *UsedImagesParams {
	var ()
	return &UsedImagesParams{

		timeout: timeout,
	}
}

// NewUsedImagesParamsWithContext creates a new UsedImagesParams object
// with the default values initialized, and the ability to set a context for a request
func NewUsedImagesParamsWithContext(ctx context.Context) *UsedImagesParams {
	var ()
	return &UsedImagesParams{

		Context: ctx,
	}
}

// NewUsedImagesParamsWithHTTPClient creates a new UsedImagesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUsedImagesParamsWithHTTPClient(client *http.Client) *UsedImagesParams {
	var ()
	return &UsedImagesParams{
		HTTPClient: client,
	}
}

/*UsedImagesParams contains all the parameters to send to the API endpoint
for the used images operation typically these are written to a http.Request
*/
type UsedImagesParams struct {

	/*ThresholdInDays*/
	ThresholdInDays *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the used images params
func (o *UsedImagesParams) WithTimeout(timeout time.Duration) *UsedImagesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the used images params
func (o *UsedImagesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the used images params
func (o *UsedImagesParams) WithContext(ctx context.Context) *UsedImagesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the used images params
func (o *UsedImagesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the used images params
func (o *UsedImagesParams) WithHTTPClient(client *http.Client) *UsedImagesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the used images params
func (o *UsedImagesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithThresholdInDays adds the thresholdInDays to the used images params
func (o *UsedImagesParams) WithThresholdInDays(thresholdInDays *int32) *UsedImagesParams {
	o.SetThresholdInDays(thresholdInDays)
	return o
}

// SetThresholdInDays adds the thresholdInDays to the used images params
func (o *UsedImagesParams) SetThresholdInDays(thresholdInDays *int32) {
	o.ThresholdInDays = thresholdInDays
}

// WriteToRequest writes these params to a swagger request
func (o *UsedImagesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ThresholdInDays != nil {

		// query param thresholdInDays
		var qrThresholdInDays int32
		if o.ThresholdInDays != nil {
			qrThresholdInDays = *o.ThresholdInDays
		}
		qThresholdInDays := swag.FormatInt32(qrThresholdInDays)
		if qThresholdInDays != "" {
			if err := r.SetQueryParam("thresholdInDays", qThresholdInDays); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
