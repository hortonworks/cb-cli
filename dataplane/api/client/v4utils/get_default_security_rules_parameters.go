// Code generated by go-swagger; DO NOT EDIT.

package v4utils

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDefaultSecurityRulesParams creates a new GetDefaultSecurityRulesParams object
// with the default values initialized.
func NewGetDefaultSecurityRulesParams() *GetDefaultSecurityRulesParams {
	var (
		knoxEnabledDefault = bool(false)
	)
	return &GetDefaultSecurityRulesParams{
		KnoxEnabled: &knoxEnabledDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDefaultSecurityRulesParamsWithTimeout creates a new GetDefaultSecurityRulesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDefaultSecurityRulesParamsWithTimeout(timeout time.Duration) *GetDefaultSecurityRulesParams {
	var (
		knoxEnabledDefault = bool(false)
	)
	return &GetDefaultSecurityRulesParams{
		KnoxEnabled: &knoxEnabledDefault,

		timeout: timeout,
	}
}

// NewGetDefaultSecurityRulesParamsWithContext creates a new GetDefaultSecurityRulesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDefaultSecurityRulesParamsWithContext(ctx context.Context) *GetDefaultSecurityRulesParams {
	var (
		knoxEnabledDefault = bool(false)
	)
	return &GetDefaultSecurityRulesParams{
		KnoxEnabled: &knoxEnabledDefault,

		Context: ctx,
	}
}

// NewGetDefaultSecurityRulesParamsWithHTTPClient creates a new GetDefaultSecurityRulesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDefaultSecurityRulesParamsWithHTTPClient(client *http.Client) *GetDefaultSecurityRulesParams {
	var (
		knoxEnabledDefault = bool(false)
	)
	return &GetDefaultSecurityRulesParams{
		KnoxEnabled: &knoxEnabledDefault,
		HTTPClient:  client,
	}
}

/*GetDefaultSecurityRulesParams contains all the parameters to send to the API endpoint
for the get default security rules operation typically these are written to a http.Request
*/
type GetDefaultSecurityRulesParams struct {

	/*KnoxEnabled*/
	KnoxEnabled *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get default security rules params
func (o *GetDefaultSecurityRulesParams) WithTimeout(timeout time.Duration) *GetDefaultSecurityRulesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get default security rules params
func (o *GetDefaultSecurityRulesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get default security rules params
func (o *GetDefaultSecurityRulesParams) WithContext(ctx context.Context) *GetDefaultSecurityRulesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get default security rules params
func (o *GetDefaultSecurityRulesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get default security rules params
func (o *GetDefaultSecurityRulesParams) WithHTTPClient(client *http.Client) *GetDefaultSecurityRulesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get default security rules params
func (o *GetDefaultSecurityRulesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithKnoxEnabled adds the knoxEnabled to the get default security rules params
func (o *GetDefaultSecurityRulesParams) WithKnoxEnabled(knoxEnabled *bool) *GetDefaultSecurityRulesParams {
	o.SetKnoxEnabled(knoxEnabled)
	return o
}

// SetKnoxEnabled adds the knoxEnabled to the get default security rules params
func (o *GetDefaultSecurityRulesParams) SetKnoxEnabled(knoxEnabled *bool) {
	o.KnoxEnabled = knoxEnabled
}

// WriteToRequest writes these params to a swagger request
func (o *GetDefaultSecurityRulesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.KnoxEnabled != nil {

		// query param knoxEnabled
		var qrKnoxEnabled bool
		if o.KnoxEnabled != nil {
			qrKnoxEnabled = *o.KnoxEnabled
		}
		qKnoxEnabled := swag.FormatBool(qrKnoxEnabled)
		if qKnoxEnabled != "" {
			if err := r.SetQueryParam("knoxEnabled", qKnoxEnabled); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
