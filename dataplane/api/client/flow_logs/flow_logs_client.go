// Code generated by go-swagger; DO NOT EDIT.

package flow_logs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new flow logs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for flow logs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetFlowLogsByFlowID gets flow logs by flow id

Flow log operations
*/
func (a *Client) GetFlowLogsByFlowID(params *GetFlowLogsByFlowIDParams) (*GetFlowLogsByFlowIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowLogsByFlowIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowLogsByFlowId",
		Method:             "GET",
		PathPattern:        "/flow_logs/{flowId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowLogsByFlowIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowLogsByFlowIDOK), nil

}

/*
GetFlowLogsByResourceCrn gets flow logs for resource by resource c r n

Flow log operations
*/
func (a *Client) GetFlowLogsByResourceCrn(params *GetFlowLogsByResourceCrnParams) (*GetFlowLogsByResourceCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowLogsByResourceCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowLogsByResourceCrn",
		Method:             "GET",
		PathPattern:        "/flow_logs/resource/crn/{resourceCrn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowLogsByResourceCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowLogsByResourceCrnOK), nil

}

/*
GetFlowLogsByResourceName gets flow logs for resource by resource name

Flow log operations
*/
func (a *Client) GetFlowLogsByResourceName(params *GetFlowLogsByResourceNameParams) (*GetFlowLogsByResourceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowLogsByResourceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowLogsByResourceName",
		Method:             "GET",
		PathPattern:        "/flow_logs/resource/name/{resourceName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowLogsByResourceNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowLogsByResourceNameOK), nil

}

/*
GetFlowLogsByResourceNameAndChainID gets flow logs for resource name and chain id

Flow log operations
*/
func (a *Client) GetFlowLogsByResourceNameAndChainID(params *GetFlowLogsByResourceNameAndChainIDParams) (*GetFlowLogsByResourceNameAndChainIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlowLogsByResourceNameAndChainIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlowLogsByResourceNameAndChainId",
		Method:             "GET",
		PathPattern:        "/flow_logs/resource/name/{resourceName}/{chainId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlowLogsByResourceNameAndChainIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlowLogsByResourceNameAndChainIDOK), nil

}

/*
GetLastFlowByID gets last flow log by flow id

Flow log operations
*/
func (a *Client) GetLastFlowByID(params *GetLastFlowByIDParams) (*GetLastFlowByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLastFlowByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLastFlowById",
		Method:             "GET",
		PathPattern:        "/flow_logs/{flowId}/last",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLastFlowByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLastFlowByIDOK), nil

}

/*
GetLastFlowByResourceCrn gets last flow log for resource by resource c r n

Flow log operations
*/
func (a *Client) GetLastFlowByResourceCrn(params *GetLastFlowByResourceCrnParams) (*GetLastFlowByResourceCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLastFlowByResourceCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLastFlowByResourceCrn",
		Method:             "GET",
		PathPattern:        "/flow_logs/resource/crn/{resourceCrn}/last",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLastFlowByResourceCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLastFlowByResourceCrnOK), nil

}

/*
GetLastFlowByResourceName gets last flow log for resource by resource name

Flow log operations
*/
func (a *Client) GetLastFlowByResourceName(params *GetLastFlowByResourceNameParams) (*GetLastFlowByResourceNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLastFlowByResourceNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLastFlowByResourceName",
		Method:             "GET",
		PathPattern:        "/flow_logs/resource/name/{resourceName}/last",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLastFlowByResourceNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLastFlowByResourceNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
