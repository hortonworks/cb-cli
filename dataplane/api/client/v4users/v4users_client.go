// Code generated by go-swagger; DO NOT EDIT.

package v4users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
EvictCurrentUserDetails removes current user from cache

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, cluster definition, credentials, clusters) can be shared across account users
*/
func (a *Client) EvictCurrentUserDetails(params *EvictCurrentUserDetailsParams) (*EvictCurrentUserDetailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEvictCurrentUserDetailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "evictCurrentUserDetails",
		Method:             "DELETE",
		PathPattern:        "/v4/users/evict",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EvictCurrentUserDetailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EvictCurrentUserDetailsOK), nil

}

/*
GetAllUsers retrieves all users in the tenant

Users can be invited under an account by the administrator, and all resources (e.g. resources, networks, cluster definition, credentials, clusters) can be shared across account users
*/
func (a *Client) GetAllUsers(params *GetAllUsersParams) (*GetAllUsersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllUsersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllUsers",
		Method:             "GET",
		PathPattern:        "/v4/users",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllUsersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllUsersOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
