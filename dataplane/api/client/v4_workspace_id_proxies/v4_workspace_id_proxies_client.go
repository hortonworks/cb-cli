// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_proxies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id proxies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id proxies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachProxyResourceToEnvironments attaches proxy resource to environemnts

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) AttachProxyResourceToEnvironments(params *AttachProxyResourceToEnvironmentsParams) (*AttachProxyResourceToEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachProxyResourceToEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachProxyResourceToEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/proxies/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachProxyResourceToEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachProxyResourceToEnvironmentsOK), nil

}

/*
CreateProxyconfigInWorkspace creates proxy configuration in workspace

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) CreateProxyconfigInWorkspace(params *CreateProxyconfigInWorkspaceParams) (*CreateProxyconfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateProxyconfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createProxyconfigInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateProxyconfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateProxyconfigInWorkspaceOK), nil

}

/*
DeleteProxyconfigInWorkspace deletes proxy configuration by name in workspace

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DeleteProxyconfigInWorkspace(params *DeleteProxyconfigInWorkspaceParams) (*DeleteProxyconfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteProxyconfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteProxyconfigInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/proxies/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteProxyconfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteProxyconfigInWorkspaceOK), nil

}

/*
DetachProxyResourceFromEnvironments detaches proxy resource from environemnts

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) DetachProxyResourceFromEnvironments(params *DetachProxyResourceFromEnvironmentsParams) (*DetachProxyResourceFromEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachProxyResourceFromEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachProxyResourceFromEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/proxies/{name}/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DetachProxyResourceFromEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachProxyResourceFromEnvironmentsOK), nil

}

/*
GetProxyRequestFromNameInWorkspace gets request by name

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetProxyRequestFromNameInWorkspace(params *GetProxyRequestFromNameInWorkspaceParams) (*GetProxyRequestFromNameInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyRequestFromNameInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyRequestFromNameInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/proxies/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProxyRequestFromNameInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxyRequestFromNameInWorkspaceOK), nil

}

/*
GetProxyconfigInWorkspace gets proxy configuration by name in workspace

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) GetProxyconfigInWorkspace(params *GetProxyconfigInWorkspaceParams) (*GetProxyconfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetProxyconfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getProxyconfigInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/proxies/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetProxyconfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetProxyconfigInWorkspaceOK), nil

}

/*
ListProxyconfigsByWorkspace lists proxy configurations for the given workspace

An proxy Configuration describe a connection to an external proxy server which provides internet access cluster members. It's applied for package manager and Ambari too
*/
func (a *Client) ListProxyconfigsByWorkspace(params *ListProxyconfigsByWorkspaceParams) (*ListProxyconfigsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListProxyconfigsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listProxyconfigsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/proxies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListProxyconfigsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListProxyconfigsByWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
