// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_imagecatalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetImageByIDParams creates a new GetImageByIDParams object
// with the default values initialized.
func NewGetImageByIDParams() *GetImageByIDParams {
	var ()
	return &GetImageByIDParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetImageByIDParamsWithTimeout creates a new GetImageByIDParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetImageByIDParamsWithTimeout(timeout time.Duration) *GetImageByIDParams {
	var ()
	return &GetImageByIDParams{

		timeout: timeout,
	}
}

// NewGetImageByIDParamsWithContext creates a new GetImageByIDParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetImageByIDParamsWithContext(ctx context.Context) *GetImageByIDParams {
	var ()
	return &GetImageByIDParams{

		Context: ctx,
	}
}

// NewGetImageByIDParamsWithHTTPClient creates a new GetImageByIDParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetImageByIDParamsWithHTTPClient(client *http.Client) *GetImageByIDParams {
	var ()
	return &GetImageByIDParams{
		HTTPClient: client,
	}
}

/*
GetImageByIDParams contains all the parameters to send to the API endpoint
for the get image by Id operation typically these are written to a http.Request
*/
type GetImageByIDParams struct {

	/*AccountID*/
	AccountID *string
	/*ImageID*/
	ImageID *string
	/*WorkspaceID*/
	WorkspaceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get image by Id params
func (o *GetImageByIDParams) WithTimeout(timeout time.Duration) *GetImageByIDParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get image by Id params
func (o *GetImageByIDParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get image by Id params
func (o *GetImageByIDParams) WithContext(ctx context.Context) *GetImageByIDParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get image by Id params
func (o *GetImageByIDParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get image by Id params
func (o *GetImageByIDParams) WithHTTPClient(client *http.Client) *GetImageByIDParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get image by Id params
func (o *GetImageByIDParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get image by Id params
func (o *GetImageByIDParams) WithAccountID(accountID *string) *GetImageByIDParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get image by Id params
func (o *GetImageByIDParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithImageID adds the imageID to the get image by Id params
func (o *GetImageByIDParams) WithImageID(imageID *string) *GetImageByIDParams {
	o.SetImageID(imageID)
	return o
}

// SetImageID adds the imageId to the get image by Id params
func (o *GetImageByIDParams) SetImageID(imageID *string) {
	o.ImageID = imageID
}

// WithWorkspaceID adds the workspaceID to the get image by Id params
func (o *GetImageByIDParams) WithWorkspaceID(workspaceID int64) *GetImageByIDParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get image by Id params
func (o *GetImageByIDParams) SetWorkspaceID(workspaceID int64) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetImageByIDParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	if o.ImageID != nil {

		// query param imageId
		var qrImageID string
		if o.ImageID != nil {
			qrImageID = *o.ImageID
		}
		qImageID := qrImageID
		if qImageID != "" {
			if err := r.SetQueryParam("imageId", qImageID); err != nil {
				return err
			}
		}

	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", swag.FormatInt64(o.WorkspaceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
