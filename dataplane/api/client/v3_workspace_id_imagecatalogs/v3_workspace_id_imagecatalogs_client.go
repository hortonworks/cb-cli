// Code generated by go-swagger; DO NOT EDIT.

package v3_workspace_id_imagecatalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v3 workspace id imagecatalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v3 workspace id imagecatalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateImageCatalogInWorkspace creates image catalog in workspace

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) CreateImageCatalogInWorkspace(params *CreateImageCatalogInWorkspaceParams) (*CreateImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createImageCatalogInWorkspace",
		Method:             "POST",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateImageCatalogInWorkspaceOK), nil

}

/*
DeleteImageCatalogInWorkspace deletes image catalog by name in workspace

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) DeleteImageCatalogInWorkspace(params *DeleteImageCatalogInWorkspaceParams) (*DeleteImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteImageCatalogInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteImageCatalogInWorkspaceOK), nil

}

/*
GetImageCatalogInWorkspace gets image catalog by name in workspace

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImageCatalogInWorkspace(params *GetImageCatalogInWorkspaceParams) (*GetImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageCatalogInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageCatalogInWorkspaceOK), nil

}

/*
GetImageCatalogRequestFromNameInWorkspace retrieves imagecatalog request by imagecatalog name

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImageCatalogRequestFromNameInWorkspace(params *GetImageCatalogRequestFromNameInWorkspaceParams) (*GetImageCatalogRequestFromNameInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageCatalogRequestFromNameInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageCatalogRequestFromNameInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageCatalogRequestFromNameInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageCatalogRequestFromNameInWorkspaceOK), nil

}

/*
GetImagesByProviderAndCustomImageCatalogInWorkspace determines available images for the cloudbreak version by the given provider and given image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImagesByProviderAndCustomImageCatalogInWorkspace(params *GetImagesByProviderAndCustomImageCatalogInWorkspaceParams) (*GetImagesByProviderAndCustomImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByProviderAndCustomImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByProviderAndCustomImageCatalogInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/{name}/platform/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByProviderAndCustomImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByProviderAndCustomImageCatalogInWorkspaceOK), nil

}

/*
GetImagesByProviderInWorkspace determines available images for the cloudbreak version by the given provider and default image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImagesByProviderInWorkspace(params *GetImagesByProviderInWorkspaceParams) (*GetImagesByProviderInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByProviderInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByProviderInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/platform/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByProviderInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByProviderInWorkspaceOK), nil

}

/*
GetImagesByStackNameAndCustomImageCatalogInWorkspace determines available images for the given stackfrom the given imagecatalog name

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndCustomImageCatalogInWorkspace(params *GetImagesByStackNameAndCustomImageCatalogInWorkspaceParams) (*GetImagesByStackNameAndCustomImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndCustomImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndCustomImageCatalogInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/upgrade/{stackName}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndCustomImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndCustomImageCatalogInWorkspaceOK), nil

}

/*
GetImagesByStackNameAndDefaultImageCatalogInWorkspace determines available images for the given stackfrom the default image catalog

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndDefaultImageCatalogInWorkspace(params *GetImagesByStackNameAndDefaultImageCatalogInWorkspaceParams) (*GetImagesByStackNameAndDefaultImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndDefaultImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndDefaultImageCatalogInWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/upgrade/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndDefaultImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndDefaultImageCatalogInWorkspaceOK), nil

}

/*
ListImageCatalogsByWorkspace lists image catalogs for the given workspace

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) ListImageCatalogsByWorkspace(params *ListImageCatalogsByWorkspaceParams) (*ListImageCatalogsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListImageCatalogsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listImageCatalogsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListImageCatalogsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListImageCatalogsByWorkspaceOK), nil

}

/*
PutPublicImageCatalogInWorkspace updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutPublicImageCatalogInWorkspace(params *PutPublicImageCatalogInWorkspaceParams) (*PutPublicImageCatalogInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicImageCatalogInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPublicImageCatalogInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicImageCatalogInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPublicImageCatalogInWorkspaceOK), nil

}

/*
PutSetDefaultImageCatalogByNameInWorkspace updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutSetDefaultImageCatalogByNameInWorkspace(params *PutSetDefaultImageCatalogByNameInWorkspaceParams) (*PutSetDefaultImageCatalogByNameInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSetDefaultImageCatalogByNameInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSetDefaultImageCatalogByNameInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v3/{workspaceId}/imagecatalogs/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutSetDefaultImageCatalogByNameInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSetDefaultImageCatalogByNameInWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
