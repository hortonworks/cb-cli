// Code generated by go-swagger; DO NOT EDIT.

package v1flexsubscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1flexsubscriptions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1flexsubscriptions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteFlexSubscriptionByID deletes flex subscription by id

Flex subscriptions could be configured.
*/
func (a *Client) DeleteFlexSubscriptionByID(params *DeleteFlexSubscriptionByIDParams) (*DeleteFlexSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteFlexSubscriptionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteFlexSubscriptionById",
		Method:             "DELETE",
		PathPattern:        "/v1/flexsubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteFlexSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteFlexSubscriptionByIDOK), nil

}

/*
DeletePrivateFlexSubscriptionByName deletes private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) DeletePrivateFlexSubscriptionByName(params *DeletePrivateFlexSubscriptionByNameParams) (*DeletePrivateFlexSubscriptionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePrivateFlexSubscriptionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePrivateFlexSubscriptionByName",
		Method:             "DELETE",
		PathPattern:        "/v1/flexsubscriptions/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePrivateFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePrivateFlexSubscriptionByNameOK), nil

}

/*
DeletePublicFlexSubscriptionByName deletes public owned or private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) DeletePublicFlexSubscriptionByName(params *DeletePublicFlexSubscriptionByNameParams) (*DeletePublicFlexSubscriptionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicFlexSubscriptionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicFlexSubscriptionByName",
		Method:             "DELETE",
		PathPattern:        "/v1/flexsubscriptions/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeletePublicFlexSubscriptionByNameOK), nil

}

/*
GetFlexSubscriptionByID retrieves flex subscription by id

Flex subscriptions could be configured.
*/
func (a *Client) GetFlexSubscriptionByID(params *GetFlexSubscriptionByIDParams) (*GetFlexSubscriptionByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetFlexSubscriptionByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getFlexSubscriptionById",
		Method:             "GET",
		PathPattern:        "/v1/flexsubscriptions/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetFlexSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetFlexSubscriptionByIDOK), nil

}

/*
GetPrivateFlexSubscriptionByName retrieves a private flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) GetPrivateFlexSubscriptionByName(params *GetPrivateFlexSubscriptionByNameParams) (*GetPrivateFlexSubscriptionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateFlexSubscriptionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateFlexSubscriptionByName",
		Method:             "GET",
		PathPattern:        "/v1/flexsubscriptions/user/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateFlexSubscriptionByNameOK), nil

}

/*
GetPrivateFlexSubscriptions retrieves private flex subscriptions

Flex subscriptions could be configured.
*/
func (a *Client) GetPrivateFlexSubscriptions(params *GetPrivateFlexSubscriptionsParams) (*GetPrivateFlexSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateFlexSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrivateFlexSubscriptions",
		Method:             "GET",
		PathPattern:        "/v1/flexsubscriptions/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrivateFlexSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrivateFlexSubscriptionsOK), nil

}

/*
GetPublicFlexSubscriptionByName retrieves a public or private owned flex subscription by name

Flex subscriptions could be configured.
*/
func (a *Client) GetPublicFlexSubscriptionByName(params *GetPublicFlexSubscriptionByNameParams) (*GetPublicFlexSubscriptionByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicFlexSubscriptionByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicFlexSubscriptionByName",
		Method:             "GET",
		PathPattern:        "/v1/flexsubscriptions/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicFlexSubscriptionByNameOK), nil

}

/*
GetPublicFlexSubscriptions retrieves public and private owned flex subscriptions

Flex subscriptions could be configured.
*/
func (a *Client) GetPublicFlexSubscriptions(params *GetPublicFlexSubscriptionsParams) (*GetPublicFlexSubscriptionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicFlexSubscriptionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicFlexSubscriptions",
		Method:             "GET",
		PathPattern:        "/v1/flexsubscriptions/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicFlexSubscriptionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicFlexSubscriptionsOK), nil

}

/*
PostPrivateFlexSubscription creates flex subscription as private resource

Flex subscriptions could be configured.
*/
func (a *Client) PostPrivateFlexSubscription(params *PostPrivateFlexSubscriptionParams) (*PostPrivateFlexSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateFlexSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateFlexSubscription",
		Method:             "POST",
		PathPattern:        "/v1/flexsubscriptions/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateFlexSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateFlexSubscriptionOK), nil

}

/*
PostPublicFlexSubscription creates flex subscription as public resource

Flex subscriptions could be configured.
*/
func (a *Client) PostPublicFlexSubscription(params *PostPublicFlexSubscriptionParams) (*PostPublicFlexSubscriptionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicFlexSubscriptionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicFlexSubscription",
		Method:             "POST",
		PathPattern:        "/v1/flexsubscriptions/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicFlexSubscriptionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicFlexSubscriptionOK), nil

}

/*
PutDefaultFlexSubscriptionByID sets the account default flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutDefaultFlexSubscriptionByID(params *PutDefaultFlexSubscriptionByIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutDefaultFlexSubscriptionByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putDefaultFlexSubscriptionById",
		Method:             "PUT",
		PathPattern:        "/v1/flexsubscriptions/setdefault/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutDefaultFlexSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutPublicDefaultFlexSubscriptionByName sets the account default flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutPublicDefaultFlexSubscriptionByName(params *PutPublicDefaultFlexSubscriptionByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicDefaultFlexSubscriptionByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPublicDefaultFlexSubscriptionByName",
		Method:             "PUT",
		PathPattern:        "/v1/flexsubscriptions/account/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicDefaultFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutPublicUsedForControllerFlexSubscriptionByName sets the account used for controller flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutPublicUsedForControllerFlexSubscriptionByName(params *PutPublicUsedForControllerFlexSubscriptionByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicUsedForControllerFlexSubscriptionByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPublicUsedForControllerFlexSubscriptionByName",
		Method:             "PUT",
		PathPattern:        "/v1/flexsubscriptions/account/setusedforcontroller/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicUsedForControllerFlexSubscriptionByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutUsedForControllerFlexSubscriptionByID sets the account used for controller flag on the flex subscription

Flex subscriptions could be configured.
*/
func (a *Client) PutUsedForControllerFlexSubscriptionByID(params *PutUsedForControllerFlexSubscriptionByIDParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutUsedForControllerFlexSubscriptionByIDParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putUsedForControllerFlexSubscriptionById",
		Method:             "PUT",
		PathPattern:        "/v1/flexsubscriptions/setusedforcontroller/{id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutUsedForControllerFlexSubscriptionByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
