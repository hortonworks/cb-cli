// Code generated by go-swagger; DO NOT EDIT.

package v1settings

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1settings API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1settings API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAllSettings retrives all available settings

Collecting Cloudbreak specific resource settings.
*/
func (a *Client) GetAllSettings(params *GetAllSettingsParams) (*GetAllSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAllSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAllSettings",
		Method:             "GET",
		PathPattern:        "/v1/settings/all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAllSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAllSettingsOK), nil

}

/*
GetDatabaseConfigSettings retrives available ambari database settings

Collecting Cloudbreak specific resource settings.
*/
func (a *Client) GetDatabaseConfigSettings(params *GetDatabaseConfigSettingsParams) (*GetDatabaseConfigSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseConfigSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatabaseConfigSettings",
		Method:             "GET",
		PathPattern:        "/v1/settings/database",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDatabaseConfigSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatabaseConfigSettingsOK), nil

}

/*
GetRecipeSettings retrives available recipe settings

Collecting Cloudbreak specific resource settings.
*/
func (a *Client) GetRecipeSettings(params *GetRecipeSettingsParams) (*GetRecipeSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRecipeSettingsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRecipeSettings",
		Method:             "GET",
		PathPattern:        "/v1/settings/recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRecipeSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRecipeSettingsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
