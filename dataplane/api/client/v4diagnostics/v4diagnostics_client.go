// Code generated by go-swagger; DO NOT EDIT.

package v4diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4diagnostics API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4diagnostics API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CancelStackDiagnosticsCollections cancels the not finished diagnostics collections
*/
func (a *Client) CancelStackDiagnosticsCollections(params *CancelStackDiagnosticsCollectionsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCancelStackDiagnosticsCollectionsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cancelStackDiagnosticsCollections",
		Method:             "POST",
		PathPattern:        "/v4/diagnostics/{crn}/collections/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CancelStackDiagnosticsCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CollectCmDiagnostics initiates the collection of diagnostical data through c m API requires a running c m server
*/
func (a *Client) CollectCmDiagnostics(params *CollectCmDiagnosticsParams) (*CollectCmDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectCmDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectCmDiagnostics",
		Method:             "POST",
		PathPattern:        "/v4/diagnostics/cm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectCmDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectCmDiagnosticsOK), nil

}

/*
CollectStackCmDiagnostics initiates the collection of diagnostical data on the hosts of the stack
*/
func (a *Client) CollectStackCmDiagnostics(params *CollectStackCmDiagnosticsParams) (*CollectStackCmDiagnosticsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectStackCmDiagnosticsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectStackCmDiagnostics",
		Method:             "POST",
		PathPattern:        "/v4/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectStackCmDiagnosticsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectStackCmDiagnosticsOK), nil

}

/*
GetCmRoles returns a list of c m roles that can be used for filtering the diagnostics results roles are immutable based on the deployment details
*/
func (a *Client) GetCmRoles(params *GetCmRolesParams) (*GetCmRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCmRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCmRoles",
		Method:             "GET",
		PathPattern:        "/v4/diagnostics/cm/{stackCrn}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCmRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCmRolesOK), nil

}

/*
GetStackCmVMLogs returns a list of log paths on the hosts of the stack
*/
func (a *Client) GetStackCmVMLogs(params *GetStackCmVMLogsParams) (*GetStackCmVMLogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackCmVMLogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackCmVmLogs",
		Method:             "GET",
		PathPattern:        "/v4/diagnostics/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackCmVMLogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackCmVMLogsOK), nil

}

/*
ListStackDiagnosticsCollections returns a list of the recent diagnostics collections
*/
func (a *Client) ListStackDiagnosticsCollections(params *ListStackDiagnosticsCollectionsParams) (*ListStackDiagnosticsCollectionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackDiagnosticsCollectionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStackDiagnosticsCollections",
		Method:             "GET",
		PathPattern:        "/v4/diagnostics/{crn}/collections",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStackDiagnosticsCollectionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStackDiagnosticsCollectionsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
