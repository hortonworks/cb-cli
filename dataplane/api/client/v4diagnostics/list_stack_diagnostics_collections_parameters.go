// Code generated by go-swagger; DO NOT EDIT.

package v4diagnostics

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListStackDiagnosticsCollectionsParams creates a new ListStackDiagnosticsCollectionsParams object
// with the default values initialized.
func NewListStackDiagnosticsCollectionsParams() *ListStackDiagnosticsCollectionsParams {
	var ()
	return &ListStackDiagnosticsCollectionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListStackDiagnosticsCollectionsParamsWithTimeout creates a new ListStackDiagnosticsCollectionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListStackDiagnosticsCollectionsParamsWithTimeout(timeout time.Duration) *ListStackDiagnosticsCollectionsParams {
	var ()
	return &ListStackDiagnosticsCollectionsParams{

		timeout: timeout,
	}
}

// NewListStackDiagnosticsCollectionsParamsWithContext creates a new ListStackDiagnosticsCollectionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListStackDiagnosticsCollectionsParamsWithContext(ctx context.Context) *ListStackDiagnosticsCollectionsParams {
	var ()
	return &ListStackDiagnosticsCollectionsParams{

		Context: ctx,
	}
}

// NewListStackDiagnosticsCollectionsParamsWithHTTPClient creates a new ListStackDiagnosticsCollectionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListStackDiagnosticsCollectionsParamsWithHTTPClient(client *http.Client) *ListStackDiagnosticsCollectionsParams {
	var ()
	return &ListStackDiagnosticsCollectionsParams{
		HTTPClient: client,
	}
}

/*ListStackDiagnosticsCollectionsParams contains all the parameters to send to the API endpoint
for the list stack diagnostics collections operation typically these are written to a http.Request
*/
type ListStackDiagnosticsCollectionsParams struct {

	/*Crn*/
	Crn string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) WithTimeout(timeout time.Duration) *ListStackDiagnosticsCollectionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) WithContext(ctx context.Context) *ListStackDiagnosticsCollectionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) WithHTTPClient(client *http.Client) *ListStackDiagnosticsCollectionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCrn adds the crn to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) WithCrn(crn string) *ListStackDiagnosticsCollectionsParams {
	o.SetCrn(crn)
	return o
}

// SetCrn adds the crn to the list stack diagnostics collections params
func (o *ListStackDiagnosticsCollectionsParams) SetCrn(crn string) {
	o.Crn = crn
}

// WriteToRequest writes these params to a swagger request
func (o *ListStackDiagnosticsCollectionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param crn
	if err := r.SetPathParam("crn", o.Crn); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
