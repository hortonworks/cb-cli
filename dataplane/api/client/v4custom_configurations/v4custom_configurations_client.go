// Code generated by go-swagger; DO NOT EDIT.

package v4custom_configurations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4custom configurations API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4custom configurations API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CloneByCrn clones new custom configs from existing custom configs by crn

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) CloneByCrn(params *CloneByCrnParams) (*CloneByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cloneByCrn",
		Method:             "POST",
		PathPattern:        "/v4/custom_configurations/crn/{crn}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloneByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CloneByCrnOK), nil

}

/*
CloneByName clones new custom configs from existing custom configs by name

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) CloneByName(params *CloneByNameParams) (*CloneByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCloneByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "cloneByName",
		Method:             "POST",
		PathPattern:        "/v4/custom_configurations/name/{name}/clone",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CloneByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CloneByNameOK), nil

}

/*
DeleteByCrn deletes custom configs by crn

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) DeleteByCrn(params *DeleteByCrnParams) (*DeleteByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByCrn",
		Method:             "DELETE",
		PathPattern:        "/v4/custom_configurations/crn/{crn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteByCrnOK), nil

}

/*
DeleteByName deletes custom configs by name

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) DeleteByName(params *DeleteByNameParams) (*DeleteByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByName",
		Method:             "DELETE",
		PathPattern:        "/v4/custom_configurations/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteByNameOK), nil

}

/*
GetByCrn gets custom configs by crn

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) GetByCrn(params *GetByCrnParams) (*GetByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getByCrn",
		Method:             "GET",
		PathPattern:        "/v4/custom_configurations/crn/{crn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByCrnOK), nil

}

/*
GetByName retrieves custom configs by name

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) GetByName(params *GetByNameParams) (*GetByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getByName",
		Method:             "GET",
		PathPattern:        "/v4/custom_configurations/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByNameOK), nil

}

/*
List retrieves all custom configs

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) List(params *ListParams) (*ListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "list",
		Method:             "GET",
		PathPattern:        "/v4/custom_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListOK), nil

}

/*
Post creates new custom configs

Custom Configurations are sets of properties or name value pairs that belong to any of the services present in Cluster Definitions (Blueprints). These can be used to override and/or append properties to the corresponding Cluster Definition while launching Data Hub Clusters.
*/
func (a *Client) Post(params *PostParams) (*PostOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "post",
		Method:             "POST",
		PathPattern:        "/v4/custom_configurations",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
