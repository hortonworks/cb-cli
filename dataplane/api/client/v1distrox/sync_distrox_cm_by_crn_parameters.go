// Code generated by go-swagger; DO NOT EDIT.

package v1distrox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewSyncDistroxCmByCrnParams creates a new SyncDistroxCmByCrnParams object
// with the default values initialized.
func NewSyncDistroxCmByCrnParams() *SyncDistroxCmByCrnParams {
	var ()
	return &SyncDistroxCmByCrnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewSyncDistroxCmByCrnParamsWithTimeout creates a new SyncDistroxCmByCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewSyncDistroxCmByCrnParamsWithTimeout(timeout time.Duration) *SyncDistroxCmByCrnParams {
	var ()
	return &SyncDistroxCmByCrnParams{

		timeout: timeout,
	}
}

// NewSyncDistroxCmByCrnParamsWithContext creates a new SyncDistroxCmByCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewSyncDistroxCmByCrnParamsWithContext(ctx context.Context) *SyncDistroxCmByCrnParams {
	var ()
	return &SyncDistroxCmByCrnParams{

		Context: ctx,
	}
}

// NewSyncDistroxCmByCrnParamsWithHTTPClient creates a new SyncDistroxCmByCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewSyncDistroxCmByCrnParamsWithHTTPClient(client *http.Client) *SyncDistroxCmByCrnParams {
	var ()
	return &SyncDistroxCmByCrnParams{
		HTTPClient: client,
	}
}

/*SyncDistroxCmByCrnParams contains all the parameters to send to the API endpoint
for the sync distrox cm by crn operation typically these are written to a http.Request
*/
type SyncDistroxCmByCrnParams struct {

	/*Crn*/
	Crn string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) WithTimeout(timeout time.Duration) *SyncDistroxCmByCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) WithContext(ctx context.Context) *SyncDistroxCmByCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) WithHTTPClient(client *http.Client) *SyncDistroxCmByCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCrn adds the crn to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) WithCrn(crn string) *SyncDistroxCmByCrnParams {
	o.SetCrn(crn)
	return o
}

// SetCrn adds the crn to the sync distrox cm by crn params
func (o *SyncDistroxCmByCrnParams) SetCrn(crn string) {
	o.Crn = crn
}

// WriteToRequest writes these params to a swagger request
func (o *SyncDistroxCmByCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param crn
	if err := r.SetPathParam("crn", o.Crn); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
