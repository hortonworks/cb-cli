// Code generated by go-swagger; DO NOT EDIT.

package v1distrox

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1distrox API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1distrox API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CollectDistroxCmBasedDiagnosticsV1 initiates the collection of diagnostical data on datahub cloudera manager
*/
func (a *Client) CollectDistroxCmBasedDiagnosticsV1(params *CollectDistroxCmBasedDiagnosticsV1Params) (*CollectDistroxCmBasedDiagnosticsV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDistroxCmBasedDiagnosticsV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectDistroxCmBasedDiagnosticsV1",
		Method:             "POST",
		PathPattern:        "/v1/distrox/diagnostics/cm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectDistroxCmBasedDiagnosticsV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectDistroxCmBasedDiagnosticsV1OK), nil

}

/*
CollectDistroxCmDiagnosticsV4 initiates the collection of diagnostical data on the hosts of datahub
*/
func (a *Client) CollectDistroxCmDiagnosticsV4(params *CollectDistroxCmDiagnosticsV4Params) (*CollectDistroxCmDiagnosticsV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCollectDistroxCmDiagnosticsV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "collectDistroxCmDiagnosticsV4",
		Method:             "POST",
		PathPattern:        "/v1/distrox/diagnostics",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CollectDistroxCmDiagnosticsV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CollectDistroxCmDiagnosticsV4OK), nil

}

/*
DeleteDistroXV1ByCrn deletes stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteDistroXV1ByCrn(params *DeleteDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDistroXV1ByCrn",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/crn/{crn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteDistroXV1ByName deletes stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteDistroXV1ByName(params *DeleteDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDistroXV1ByName",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstanceDistroXV1ByCrn deletes instance from the stack s cluster by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceDistroXV1ByCrn(params *DeleteInstanceDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceDistroXV1ByCrn",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/crn/{crn}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstanceDistroXV1ByName deletes instance from the stack s cluster by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceDistroXV1ByName(params *DeleteInstanceDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceDistroXV1ByName",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/name/{name}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstancesDistroXV1ByCrn deletes multiple instances from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstancesDistroXV1ByCrn(params *DeleteInstancesDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesDistroXV1ByCrn",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/crn/{crn}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstancesDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstancesDistroXV1ByName deletes multiple instances from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstancesDistroXV1ByName(params *DeleteInstancesDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstancesDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstancesDistroXV1ByName",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/name/{name}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstancesDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteMultipleDistroXClustersByNamesV1 deletes multiple stacks by their names

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteMultipleDistroXClustersByNamesV1(params *DeleteMultipleDistroXClustersByNamesV1Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleDistroXClustersByNamesV1Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultipleDistroXClustersByNamesV1",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMultipleDistroXClustersByNamesV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteWithKerberosDistroXV1ByCrn deletes the stack with kerberos cluster by crn

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteWithKerberosDistroXV1ByCrn(params *DeleteWithKerberosDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWithKerberosDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWithKerberosDistroXV1ByCrn",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/crn/{crn}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWithKerberosDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteWithKerberosDistroXV1ByName deletes the stack with kerberos cluster by name

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteWithKerberosDistroXV1ByName(params *DeleteWithKerberosDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWithKerberosDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWithKerberosDistroXV1ByName",
		Method:             "DELETE",
		PathPattern:        "/v1/distrox/name/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWithKerberosDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCreateClusterForCli produces cli command input

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) GetCreateClusterForCli(params *GetCreateClusterForCliParams) (*GetCreateClusterForCliOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCreateClusterForCliParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCreateClusterForCli",
		Method:             "POST",
		PathPattern:        "/v1/distrox/cli_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCreateClusterForCliReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCreateClusterForCliOK), nil

}

/*
GetDistroXRequestV1ByCrn gets stack request by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetDistroXRequestV1ByCrn(params *GetDistroXRequestV1ByCrnParams) (*GetDistroXRequestV1ByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroXRequestV1ByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroXRequestV1ByCrn",
		Method:             "GET",
		PathPattern:        "/v1/distrox/crn/{crn}/cli_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroXRequestV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroXRequestV1ByCrnOK), nil

}

/*
GetDistroXRequestV1ByName gets stack request by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetDistroXRequestV1ByName(params *GetDistroXRequestV1ByNameParams) (*GetDistroXRequestV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroXRequestV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroXRequestV1ByName",
		Method:             "GET",
		PathPattern:        "/v1/distrox/name/{name}/cli_create",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroXRequestV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroXRequestV1ByNameOK), nil

}

/*
GetDistroXV1ByCrn gets stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetDistroXV1ByCrn(params *GetDistroXV1ByCrnParams) (*GetDistroXV1ByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroXV1ByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroXV1ByCrn",
		Method:             "GET",
		PathPattern:        "/v1/distrox/crn/{crn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroXV1ByCrnOK), nil

}

/*
GetDistroXV1ByName gets stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetDistroXV1ByName(params *GetDistroXV1ByNameParams) (*GetDistroXV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroXV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroXV1ByName",
		Method:             "GET",
		PathPattern:        "/v1/distrox/name/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroXV1ByNameOK), nil

}

/*
GetDistroxCmRoles returns a list of cloudera manager service roles that can be used for cloudera manager based diagnostics
*/
func (a *Client) GetDistroxCmRoles(params *GetDistroxCmRolesParams) (*GetDistroxCmRolesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroxCmRolesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroxCmRoles",
		Method:             "GET",
		PathPattern:        "/v1/distrox/diagnostics/cm/{stackCrn}/roles",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroxCmRolesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroxCmRolesOK), nil

}

/*
GetDistroxCmVMLogsV4 returns a list of log paths on the hosts of datahub
*/
func (a *Client) GetDistroxCmVMLogsV4(params *GetDistroxCmVMLogsV4Params) (*GetDistroxCmVMLogsV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDistroxCmVMLogsV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDistroxCmVmLogsV4",
		Method:             "GET",
		PathPattern:        "/v1/distrox/diagnostics/logs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDistroxCmVMLogsV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDistroxCmVMLogsV4OK), nil

}

/*
ListDistroXV1 lists stacks by environment crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ListDistroXV1(params *ListDistroXV1Params) (*ListDistroXV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDistroXV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDistroXV1",
		Method:             "GET",
		PathPattern:        "/v1/distrox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDistroXV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDistroXV1OK), nil

}

/*
ListRetryableFlowsDistroXV1 lists retryable failed flows

List all, currently retryable operations for the stack
*/
func (a *Client) ListRetryableFlowsDistroXV1(params *ListRetryableFlowsDistroXV1Params) (*ListRetryableFlowsDistroXV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetryableFlowsDistroXV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRetryableFlowsDistroXV1",
		Method:             "GET",
		PathPattern:        "/v1/distrox/name/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetryableFlowsDistroXV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRetryableFlowsDistroXV1OK), nil

}

/*
PostDistroXForBlueprintV1 posts stack for blueprint

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostDistroXForBlueprintV1(params *PostDistroXForBlueprintV1Params) (*PostDistroXForBlueprintV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistroXForBlueprintV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDistroXForBlueprintV1",
		Method:             "POST",
		PathPattern:        "/v1/distrox/blueprint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDistroXForBlueprintV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDistroXForBlueprintV1OK), nil

}

/*
PostDistroXV1 creates stack

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostDistroXV1(params *PostDistroXV1Params) (*PostDistroXV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostDistroXV1Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postDistroXV1",
		Method:             "POST",
		PathPattern:        "/v1/distrox",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostDistroXV1Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostDistroXV1OK), nil

}

/*
PutScalingDistroXV1ByCrn scales the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutScalingDistroXV1ByCrn(params *PutScalingDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScalingDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScalingDistroXV1ByCrn",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/{crn}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutScalingDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutScalingDistroXV1ByName scales the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutScalingDistroXV1ByName(params *PutScalingDistroXV1ByNameParams) (*PutScalingDistroXV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScalingDistroXV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScalingDistroXV1ByName",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/{name}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutScalingDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutScalingDistroXV1ByNameOK), nil

}

/*
RenewDistroXCertificate triggers a certificate renewal on the desired cluster which is identified via crn

Trigger a certificate renewal on the specified cluster.
*/
func (a *Client) RenewDistroXCertificate(params *RenewDistroXCertificateParams) (*RenewDistroXCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewDistroXCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renewDistroXCertificate",
		Method:             "POST",
		PathPattern:        "/v1/distrox/crn/{crn}/renew_certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RenewDistroXCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenewDistroXCertificateOK), nil

}

/*
RepairDistroXV1ByCrn repairs the stack by crn

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairDistroXV1ByCrn(params *RepairDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairDistroXV1ByCrn",
		Method:             "POST",
		PathPattern:        "/v1/distrox/crn/{crn}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RepairDistroXV1ByName repairs the stack by name

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairDistroXV1ByName(params *RepairDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairDistroXV1ByName",
		Method:             "POST",
		PathPattern:        "/v1/distrox/name/{name}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RetryDistroXV1ByCrn retries the stack by crn

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryDistroXV1ByCrn(params *RetryDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryDistroXV1ByCrn",
		Method:             "POST",
		PathPattern:        "/v1/distrox/crn/{crn}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RetryDistroXV1ByName retries the stack by name

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryDistroXV1ByName(params *RetryDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryDistroXV1ByName",
		Method:             "POST",
		PathPattern:        "/v1/distrox/name/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RotateAutoTLSCertificatesByCrn rotates the certificates of the cluster
*/
func (a *Client) RotateAutoTLSCertificatesByCrn(params *RotateAutoTLSCertificatesByCrnParams) (*RotateAutoTLSCertificatesByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateAutoTLSCertificatesByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rotateAutoTlsCertificatesByCrn",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/{crn}/rotate_autotls_certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RotateAutoTLSCertificatesByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RotateAutoTLSCertificatesByCrnOK), nil

}

/*
RotateAutoTLSCertificatesByName rotates the certificates of the cluster
*/
func (a *Client) RotateAutoTLSCertificatesByName(params *RotateAutoTLSCertificatesByNameParams) (*RotateAutoTLSCertificatesByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateAutoTLSCertificatesByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rotateAutoTlsCertificatesByName",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/{name}/rotate_autotls_certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RotateAutoTLSCertificatesByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RotateAutoTLSCertificatesByNameOK), nil

}

/*
SetDistroXMaintenanceModeByCrn sets maintenance mode for the cluster by crn

Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.
*/
func (a *Client) SetDistroXMaintenanceModeByCrn(params *SetDistroXMaintenanceModeByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDistroXMaintenanceModeByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setDistroXMaintenanceModeByCrn",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/{crn}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetDistroXMaintenanceModeByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
SetDistroXMaintenanceModeByName sets maintenance mode for the cluster by name

Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.
*/
func (a *Client) SetDistroXMaintenanceModeByName(params *SetDistroXMaintenanceModeByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetDistroXMaintenanceModeByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setDistroXMaintenanceModeByName",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/{name}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetDistroXMaintenanceModeByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StartDistroXV1ByCrn starts the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartDistroXV1ByCrn(params *StartDistroXV1ByCrnParams) (*StartDistroXV1ByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDistroXV1ByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDistroXV1ByCrn",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/{crn}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartDistroXV1ByCrnOK), nil

}

/*
StartDistroXV1ByCrns starts the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartDistroXV1ByCrns(params *StartDistroXV1ByCrnsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDistroXV1ByCrnsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDistroXV1ByCrns",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartDistroXV1ByCrnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StartDistroXV1ByName starts the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartDistroXV1ByName(params *StartDistroXV1ByNameParams) (*StartDistroXV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDistroXV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDistroXV1ByName",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartDistroXV1ByNameOK), nil

}

/*
StartDistroXV1ByNames starts the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartDistroXV1ByNames(params *StartDistroXV1ByNamesParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartDistroXV1ByNamesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startDistroXV1ByNames",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartDistroXV1ByNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StatusDistroXV1ByCrn retrieves stack status by stack crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusDistroXV1ByCrn(params *StatusDistroXV1ByCrnParams) (*StatusDistroXV1ByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusDistroXV1ByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusDistroXV1ByCrn",
		Method:             "GET",
		PathPattern:        "/v1/distrox/crn/{crn}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusDistroXV1ByCrnOK), nil

}

/*
StatusDistroXV1ByName retrieves stack status by stack name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusDistroXV1ByName(params *StatusDistroXV1ByNameParams) (*StatusDistroXV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusDistroXV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusDistroXV1ByName",
		Method:             "GET",
		PathPattern:        "/v1/distrox/name/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusDistroXV1ByNameOK), nil

}

/*
StopDistroXV1ByCrn stops the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopDistroXV1ByCrn(params *StopDistroXV1ByCrnParams) (*StopDistroXV1ByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDistroXV1ByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopDistroXV1ByCrn",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/{crn}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopDistroXV1ByCrnOK), nil

}

/*
StopDistroXV1ByCrns stops the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopDistroXV1ByCrns(params *StopDistroXV1ByCrnsParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDistroXV1ByCrnsParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopDistroXV1ByCrns",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/crn/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopDistroXV1ByCrnsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StopDistroXV1ByName stops the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopDistroXV1ByName(params *StopDistroXV1ByNameParams) (*StopDistroXV1ByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDistroXV1ByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopDistroXV1ByName",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopDistroXV1ByNameOK), nil

}

/*
StopDistroXV1ByNames stops the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopDistroXV1ByNames(params *StopDistroXV1ByNamesParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopDistroXV1ByNamesParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopDistroXV1ByNames",
		Method:             "PUT",
		PathPattern:        "/v1/distrox/name/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopDistroXV1ByNamesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
SyncDistroXV1ByCrn syncs the stack by crn

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncDistroXV1ByCrn(params *SyncDistroXV1ByCrnParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncDistroXV1ByCrnParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncDistroXV1ByCrn",
		Method:             "POST",
		PathPattern:        "/v1/distrox/crn/{crn}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncDistroXV1ByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
SyncDistroXV1ByName syncs the stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncDistroXV1ByName(params *SyncDistroXV1ByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncDistroXV1ByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncDistroXV1ByName",
		Method:             "POST",
		PathPattern:        "/v1/distrox/name/{name}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncDistroXV1ByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
UpgradeDistroxCluster upgrades the distrox cluster
*/
func (a *Client) UpgradeDistroxCluster(params *UpgradeDistroxClusterParams) (*UpgradeDistroxClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeDistroxClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeDistroxCluster",
		Method:             "POST",
		PathPattern:        "/v1/distrox/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeDistroxClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeDistroxClusterOK), nil

}

/*
UpgradeDistroxClusterByCrn upgrades the distrox cluster
*/
func (a *Client) UpgradeDistroxClusterByCrn(params *UpgradeDistroxClusterByCrnParams) (*UpgradeDistroxClusterByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeDistroxClusterByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeDistroxClusterByCrn",
		Method:             "POST",
		PathPattern:        "/v1/distrox/crn/{crn}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeDistroxClusterByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeDistroxClusterByCrnOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
