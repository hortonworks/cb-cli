// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewStatusStackV4Params creates a new StatusStackV4Params object
// with the default values initialized.
func NewStatusStackV4Params() *StatusStackV4Params {
	var ()
	return &StatusStackV4Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewStatusStackV4ParamsWithTimeout creates a new StatusStackV4Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewStatusStackV4ParamsWithTimeout(timeout time.Duration) *StatusStackV4Params {
	var ()
	return &StatusStackV4Params{

		timeout: timeout,
	}
}

// NewStatusStackV4ParamsWithContext creates a new StatusStackV4Params object
// with the default values initialized, and the ability to set a context for a request
func NewStatusStackV4ParamsWithContext(ctx context.Context) *StatusStackV4Params {
	var ()
	return &StatusStackV4Params{

		Context: ctx,
	}
}

// NewStatusStackV4ParamsWithHTTPClient creates a new StatusStackV4Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewStatusStackV4ParamsWithHTTPClient(client *http.Client) *StatusStackV4Params {
	var ()
	return &StatusStackV4Params{
		HTTPClient: client,
	}
}

/*StatusStackV4Params contains all the parameters to send to the API endpoint
for the status stack v4 operation typically these are written to a http.Request
*/
type StatusStackV4Params struct {

	/*AccountID*/
	AccountID *string
	/*Name*/
	Name string
	/*WorkspaceID*/
	WorkspaceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the status stack v4 params
func (o *StatusStackV4Params) WithTimeout(timeout time.Duration) *StatusStackV4Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the status stack v4 params
func (o *StatusStackV4Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the status stack v4 params
func (o *StatusStackV4Params) WithContext(ctx context.Context) *StatusStackV4Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the status stack v4 params
func (o *StatusStackV4Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the status stack v4 params
func (o *StatusStackV4Params) WithHTTPClient(client *http.Client) *StatusStackV4Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the status stack v4 params
func (o *StatusStackV4Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the status stack v4 params
func (o *StatusStackV4Params) WithAccountID(accountID *string) *StatusStackV4Params {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the status stack v4 params
func (o *StatusStackV4Params) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithName adds the name to the status stack v4 params
func (o *StatusStackV4Params) WithName(name string) *StatusStackV4Params {
	o.SetName(name)
	return o
}

// SetName adds the name to the status stack v4 params
func (o *StatusStackV4Params) SetName(name string) {
	o.Name = name
}

// WithWorkspaceID adds the workspaceID to the status stack v4 params
func (o *StatusStackV4Params) WithWorkspaceID(workspaceID int64) *StatusStackV4Params {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the status stack v4 params
func (o *StatusStackV4Params) SetWorkspaceID(workspaceID int64) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *StatusStackV4Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", swag.FormatInt64(o.WorkspaceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
