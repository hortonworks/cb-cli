// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeImageStackInWorkspaceV4 checks image in stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ChangeImageStackInWorkspaceV4(params *ChangeImageStackInWorkspaceV4Params) (*ChangeImageStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/change_image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeImageStackInWorkspaceV4OK), nil

}

/*
CheckForClusterUpgradeByName checks for upgrade options by name
*/
func (a *Client) CheckForClusterUpgradeByName(params *CheckForClusterUpgradeByNameParams) (*CheckForClusterUpgradeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckForClusterUpgradeByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkForClusterUpgradeByName",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/check_cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckForClusterUpgradeByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckForClusterUpgradeByNameOK), nil

}

/*
CheckForOsUpgradeInWorkspaceV4 checks for upgrades for the stack by name in workspace

Checks for upgrades for the given cluster.
*/
func (a *Client) CheckForOsUpgradeInWorkspaceV4(params *CheckForOsUpgradeInWorkspaceV4Params) (*CheckForOsUpgradeInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckForOsUpgradeInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkForOsUpgradeInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/check_for_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckForOsUpgradeInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckForOsUpgradeInWorkspaceV4OK), nil

}

/*
DeleteInstanceStackV4 deletes instance from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceStackV4(params *DeleteInstanceStackV4Params) (*DeleteInstanceStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceStackV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstanceStackV4OK), nil

}

/*
DeleteMultipleInstancesStackV4 deletes multiple instances from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteMultipleInstancesStackV4(params *DeleteMultipleInstancesStackV4Params) (*DeleteMultipleInstancesStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleInstancesStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultipleInstancesStackV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMultipleInstancesStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMultipleInstancesStackV4OK), nil

}

/*
DeleteStackInWorkspaceV4 deletes stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteStackInWorkspaceV4(params *DeleteStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInWorkspaceV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteWithKerberos deletes the stack with kerberos cluster by name in workspace

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteWithKerberos(params *DeleteWithKerberosParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWithKerberosParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWithKerberos",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWithKerberosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetClusterHostsInventory generates hosts inventory
*/
func (a *Client) GetClusterHostsInventory(params *GetClusterHostsInventoryParams) (*GetClusterHostsInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHostsInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterHostsInventory",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/inventory",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterHostsInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterHostsInventoryOK), nil

}

/*
GetStackInWorkspaceV4 gets stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackInWorkspaceV4(params *GetStackInWorkspaceV4Params) (*GetStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackInWorkspaceV4OK), nil

}

/*
GetStackRequestFromNameV4 gets stack request by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackRequestFromNameV4(params *GetStackRequestFromNameV4Params) (*GetStackRequestFromNameV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackRequestFromNameV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackRequestFromNameV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackRequestFromNameV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackRequestFromNameV4OK), nil

}

/*
ListRetryableFlowsV4 lists retryable failed flows

List all, currently retryable operations for the stack
*/
func (a *Client) ListRetryableFlowsV4(params *ListRetryableFlowsV4Params) (*ListRetryableFlowsV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetryableFlowsV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRetryableFlowsV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetryableFlowsV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRetryableFlowsV4OK), nil

}

/*
ListStackInWorkspaceV4 lists stacks for the given workspace and environment name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ListStackInWorkspaceV4(params *ListStackInWorkspaceV4Params) (*ListStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStackInWorkspaceV4OK), nil

}

/*
PostStackForBlueprintV4 posts stack for blueprint in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackForBlueprintV4(params *PostStackForBlueprintV4Params) (*PostStackForBlueprintV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackForBlueprintV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackForBlueprintV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/blueprint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackForBlueprintV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackForBlueprintV4OK), nil

}

/*
PostStackInWorkspaceV4 creates stack in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackInWorkspaceV4(params *PostStackInWorkspaceV4Params) (*PostStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackInWorkspaceV4OK), nil

}

/*
PutClusterV4 updates cluster by stack id

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) PutClusterV4(params *PutClusterV4Params) (*PutClusterV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putClusterV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutClusterV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterV4OK), nil

}

/*
PutScalingStackInWorkspaceV4 scales the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutScalingStackInWorkspaceV4(params *PutScalingStackInWorkspaceV4Params) (*PutScalingStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScalingStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScalingStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutScalingStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutScalingStackInWorkspaceV4OK), nil

}

/*
PutpasswordStackV4 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutpasswordStackV4(params *PutpasswordStackV4Params) (*PutpasswordStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutpasswordStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putpasswordStackV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/ambari_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutpasswordStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutpasswordStackV4OK), nil

}

/*
RepairStackInWorkspaceV4 repairs the stack by name in workspace

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairStackInWorkspaceV4(params *RepairStackInWorkspaceV4Params) (*RepairStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RepairStackInWorkspaceV4OK), nil

}

/*
RetryStackInWorkspaceV4 retries the stack by name in workspace

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryStackInWorkspaceV4(params *RetryStackInWorkspaceV4Params) (*RetryStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetryStackInWorkspaceV4OK), nil

}

/*
SetClusterMaintenanceMode sets maintenance mode for the cluster by name

Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.
*/
func (a *Client) SetClusterMaintenanceMode(params *SetClusterMaintenanceModeParams) (*SetClusterMaintenanceModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetClusterMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setClusterMaintenanceMode",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetClusterMaintenanceModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetClusterMaintenanceModeOK), nil

}

/*
StartStackInWorkspaceV4 starts the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartStackInWorkspaceV4(params *StartStackInWorkspaceV4Params) (*StartStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartStackInWorkspaceV4OK), nil

}

/*
StatusStackV4 retrieves stack status by stack name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusStackV4(params *StatusStackV4Params) (*StatusStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusStackV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusStackV4OK), nil

}

/*
StopStackInWorkspaceV4 stops the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopStackInWorkspaceV4(params *StopStackInWorkspaceV4Params) (*StopStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopStackInWorkspaceV4OK), nil

}

/*
SyncStackInWorkspaceV4 syncs the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncStackInWorkspaceV4(params *SyncStackInWorkspaceV4Params) (*SyncStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SyncStackInWorkspaceV4OK), nil

}

/*
UpgradeClusterByName upgrades a cluster to the latest c m or c d h version
*/
func (a *Client) UpgradeClusterByName(params *UpgradeClusterByNameParams) (*UpgradeClusterByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeClusterByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeClusterByName",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeClusterByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeClusterByNameOK), nil

}

/*
UpgradeOsInWorkspaceV4 upgrades the stack by name in workspace

Removing all nodes and starting new nodes with the latest image. If the cluster already uses the the latest image then no remove/restart will happen.
*/
func (a *Client) UpgradeOsInWorkspaceV4(params *UpgradeOsInWorkspaceV4Params) (*UpgradeOsInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeOsInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeOsInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeOsInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeOsInWorkspaceV4OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
