// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ChangeImageStackInWorkspaceV4 checks image in stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ChangeImageStackInWorkspaceV4(params *ChangeImageStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/change_image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteInstanceStackV4 deletes instance from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceStackV4(params *DeleteInstanceStackV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceStackV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceStackV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteStackInWorkspaceV4 deletes stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteStackInWorkspaceV4(params *DeleteStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInWorkspaceV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteWithKerberos deletes the stack with kerberos cluster by name in workspace

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a cluster definition (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteWithKerberos(params *DeleteWithKerberosParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWithKerberosParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWithKerberos",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWithKerberosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetStackInWorkspaceV4 gets stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackInWorkspaceV4(params *GetStackInWorkspaceV4Params) (*GetStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackInWorkspaceV4OK), nil

}

/*
GetStackRequestFromNameV4 gets stack request by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackRequestFromNameV4(params *GetStackRequestFromNameV4Params) (*GetStackRequestFromNameV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackRequestFromNameV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackRequestFromNameV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackRequestFromNameV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackRequestFromNameV4OK), nil

}

/*
ListStackInWorkspaceV4 lists stacks for the given workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ListStackInWorkspaceV4(params *ListStackInWorkspaceV4Params) (*ListStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStackInWorkspaceV4OK), nil

}

/*
PostStackForClusterDefinitionV4 posts stack for cluster definition in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackForClusterDefinitionV4(params *PostStackForClusterDefinitionV4Params) (*PostStackForClusterDefinitionV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackForClusterDefinitionV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackForClusterDefinitionV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster_definition",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackForClusterDefinitionV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackForClusterDefinitionV4OK), nil

}

/*
PostStackInWorkspaceV4 creates stack in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackInWorkspaceV4(params *PostStackInWorkspaceV4Params) (*PostStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackInWorkspaceV4OK), nil

}

/*
PutClusterV4 updates cluster by stack id

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a cluster definition (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) PutClusterV4(params *PutClusterV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putClusterV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutClusterV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutReinstallStackV4 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutReinstallStackV4(params *PutReinstallStackV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutReinstallStackV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putReinstallStackV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/reinstall",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutReinstallStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutScalingStackInWorkspaceV4 scales the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutScalingStackInWorkspaceV4(params *PutScalingStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScalingStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScalingStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutScalingStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
PutpasswordStackV4 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutpasswordStackV4(params *PutpasswordStackV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutpasswordStackV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putpasswordStackV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/ambari_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutpasswordStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RepairStackInWorkspaceV4 repairs the stack by name in workspace

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairStackInWorkspaceV4(params *RepairStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
RetryStackInWorkspaceV4 retries the stack by name in workspace

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryStackInWorkspaceV4(params *RetryStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
SetClusterMaintenanceMode sets maintenance mode for the cluster

Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.
*/
func (a *Client) SetClusterMaintenanceMode(params *SetClusterMaintenanceModeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetClusterMaintenanceModeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setClusterMaintenanceMode",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetClusterMaintenanceModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StartStackInWorkspaceV4 starts the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartStackInWorkspaceV4(params *StartStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
StatusStackV4 retrieves stack status by stack name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusStackV4(params *StatusStackV4Params) (*StatusStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusStackV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusStackV4OK), nil

}

/*
StopStackInWorkspaceV4 stops the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopStackInWorkspaceV4(params *StopStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
SyncStackInWorkspaceV4 syncs the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncStackInWorkspaceV4(params *SyncStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
