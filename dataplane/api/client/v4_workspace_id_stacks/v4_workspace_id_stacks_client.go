// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachRecipeInternal attaches recipe to the cluster by name in workspace internal only
*/
func (a *Client) AttachRecipeInternal(params *AttachRecipeInternalParams) (*AttachRecipeInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachRecipeInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachRecipeInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/attach_recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachRecipeInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachRecipeInternalOK), nil

}

/*
AttachStackRecipe attaches recipe to the cluster by name in workspace
*/
func (a *Client) AttachStackRecipe(params *AttachStackRecipeParams) (*AttachStackRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachStackRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachStackRecipe",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/attach_recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachStackRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachStackRecipeOK), nil

}

/*
ChangeImageCatalogInternal changes image catalog of the cluster
*/
func (a *Client) ChangeImageCatalogInternal(params *ChangeImageCatalogInternalParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageCatalogInternalParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageCatalogInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/change_image_catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageCatalogInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
ChangeImageStackInWorkspaceV4 checks image in stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ChangeImageStackInWorkspaceV4(params *ChangeImageStackInWorkspaceV4Params) (*ChangeImageStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/change_image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeImageStackInWorkspaceV4OK), nil

}

/*
ChangeImageStackInWorkspaceV4Internal checks image in stack by name in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ChangeImageStackInWorkspaceV4Internal(params *ChangeImageStackInWorkspaceV4InternalParams) (*ChangeImageStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewChangeImageStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "changeImageStackInWorkspaceV4Internal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/change_image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ChangeImageStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ChangeImageStackInWorkspaceV4InternalOK), nil

}

/*
CheckForClusterUpgradeByName checks for upgrade options by name
*/
func (a *Client) CheckForClusterUpgradeByName(params *CheckForClusterUpgradeByNameParams) (*CheckForClusterUpgradeByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckForClusterUpgradeByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkForClusterUpgradeByName",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/check_cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckForClusterUpgradeByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckForClusterUpgradeByNameOK), nil

}

/*
CheckForOsUpgradeInWorkspaceV4 checks for upgrades for the stack by name in workspace

Checks for upgrades for the given cluster.
*/
func (a *Client) CheckForOsUpgradeInWorkspaceV4(params *CheckForOsUpgradeInWorkspaceV4Params) (*CheckForOsUpgradeInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckForOsUpgradeInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkForOsUpgradeInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/check_for_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckForOsUpgradeInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CheckForOsUpgradeInWorkspaceV4OK), nil

}

/*
CheckUpgradeRdsByNameInternal checks that upgrade of the external database of a cluster to a given version is possible internal only
*/
func (a *Client) CheckUpgradeRdsByNameInternal(params *CheckUpgradeRdsByNameInternalParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCheckUpgradeRdsByNameInternalParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "checkUpgradeRdsByNameInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/check_rds_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CheckUpgradeRdsByNameInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DatabaseBackup performs a backup of the database to a provided location
*/
func (a *Client) DatabaseBackup(params *DatabaseBackupParams) (*DatabaseBackupOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatabaseBackupParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "databaseBackup",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/database_backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DatabaseBackupReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DatabaseBackupOK), nil

}

/*
DatabaseBackupInternal performs a backup of the database to a provided location internal only
*/
func (a *Client) DatabaseBackupInternal(params *DatabaseBackupInternalParams) (*DatabaseBackupInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatabaseBackupInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "databaseBackupInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/database_backup",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DatabaseBackupInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DatabaseBackupInternalOK), nil

}

/*
DatabaseRestore performs a restore of the database from a provided location
*/
func (a *Client) DatabaseRestore(params *DatabaseRestoreParams) (*DatabaseRestoreOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatabaseRestoreParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "databaseRestore",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/database_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DatabaseRestoreReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DatabaseRestoreOK), nil

}

/*
DatabaseRestoreInternal performs a restore of the database from a provided location internal only
*/
func (a *Client) DatabaseRestoreInternal(params *DatabaseRestoreInternalParams) (*DatabaseRestoreInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDatabaseRestoreInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "databaseRestoreInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/database_restore",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DatabaseRestoreInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DatabaseRestoreInternalOK), nil

}

/*
DeleteInstanceStackV4 deletes instance from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteInstanceStackV4(params *DeleteInstanceStackV4Params) (*DeleteInstanceStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInstanceStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInstanceStackV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/instance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteInstanceStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteInstanceStackV4OK), nil

}

/*
DeleteMultipleInstancesStackV4 deletes multiple instances from the stack s cluster in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteMultipleInstancesStackV4(params *DeleteMultipleInstancesStackV4Params) (*DeleteMultipleInstancesStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleInstancesStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultipleInstancesStackV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMultipleInstancesStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMultipleInstancesStackV4OK), nil

}

/*
DeleteStackInWorkspaceV4 deletes stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteStackInWorkspaceV4(params *DeleteStackInWorkspaceV4Params) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInWorkspaceV4Params()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInWorkspaceV4",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteStackInWorkspaceV4Internal deletes stack by name in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) DeleteStackInWorkspaceV4Internal(params *DeleteStackInWorkspaceV4InternalParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackInWorkspaceV4InternalParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStackInWorkspaceV4Internal",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DeleteWithKerberos deletes the stack with kerberos cluster by name in workspace

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) DeleteWithKerberos(params *DeleteWithKerberosParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWithKerberosParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteWithKerberos",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteWithKerberosReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DetachRecipeInternal detaches recipe from the cluster by name in workspace internal only
*/
func (a *Client) DetachRecipeInternal(params *DetachRecipeInternalParams) (*DetachRecipeInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachRecipeInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachRecipeInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/detach_recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DetachRecipeInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachRecipeInternalOK), nil

}

/*
DetachStackRecipe detaches recipe from the cluster by name in workspace
*/
func (a *Client) DetachStackRecipe(params *DetachStackRecipeParams) (*DetachStackRecipeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachStackRecipeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachStackRecipe",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/detach_recipe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DetachStackRecipeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachStackRecipeOK), nil

}

/*
GenerateImageCatalogInternal generates an image catalog that only contains the currently used image for creating instances
*/
func (a *Client) GenerateImageCatalogInternal(params *GenerateImageCatalogInternalParams) (*GenerateImageCatalogInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGenerateImageCatalogInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "generateImageCatalogInternal",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/generate_image_catalog",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GenerateImageCatalogInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GenerateImageCatalogInternalOK), nil

}

/*
GetClusterHostsInventory generates hosts inventory
*/
func (a *Client) GetClusterHostsInventory(params *GetClusterHostsInventoryParams) (*GetClusterHostsInventoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterHostsInventoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterHostsInventory",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/inventory",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterHostsInventoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterHostsInventoryOK), nil

}

/*
GetClusterRecoverableByNameInternal validates if the cluster is recoverable or not
*/
func (a *Client) GetClusterRecoverableByNameInternal(params *GetClusterRecoverableByNameInternalParams) (*GetClusterRecoverableByNameInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterRecoverableByNameInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterRecoverableByNameInternal",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/cluster_recoverable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterRecoverableByNameInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterRecoverableByNameInternalOK), nil

}

/*
GetNotCcmUpgradedStackCountInternal returns the count of not upgraded stacks for an environment c r n
*/
func (a *Client) GetNotCcmUpgradedStackCountInternal(params *GetNotCcmUpgradedStackCountInternalParams) (*GetNotCcmUpgradedStackCountInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotCcmUpgradedStackCountInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNotCcmUpgradedStackCountInternal",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{envCrn}/upgrade_ccm_stacks_remaining",
		ProducesMediaTypes: []string{"text/plain"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNotCcmUpgradedStackCountInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNotCcmUpgradedStackCountInternalOK), nil

}

/*
GetSaltPasswordStatusForStackInWorkspaceV4Internal checks if salt password rotation is needed

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetSaltPasswordStatusForStackInWorkspaceV4Internal(params *GetSaltPasswordStatusForStackInWorkspaceV4InternalParams) (*GetSaltPasswordStatusForStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetSaltPasswordStatusForStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getSaltPasswordStatusForStackInWorkspaceV4Internal",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{crn}/rotate_salt_password/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetSaltPasswordStatusForStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetSaltPasswordStatusForStackInWorkspaceV4InternalOK), nil

}

/*
GetStackByCrnInWorkspaceV4 gets stack by crn in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackByCrnInWorkspaceV4(params *GetStackByCrnInWorkspaceV4Params) (*GetStackByCrnInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackByCrnInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackByCrnInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/crn/{crn}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackByCrnInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackByCrnInWorkspaceV4OK), nil

}

/*
GetStackInWorkspaceV4 gets stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackInWorkspaceV4(params *GetStackInWorkspaceV4Params) (*GetStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackInWorkspaceV4OK), nil

}

/*
GetStackRequestFromNameV4 gets stack request by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) GetStackRequestFromNameV4(params *GetStackRequestFromNameV4Params) (*GetStackRequestFromNameV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackRequestFromNameV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackRequestFromNameV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetStackRequestFromNameV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetStackRequestFromNameV4OK), nil

}

/*
ListRetryableFlowsV4 lists retryable failed flows

List all, currently retryable operations for the stack
*/
func (a *Client) ListRetryableFlowsV4(params *ListRetryableFlowsV4Params) (*ListRetryableFlowsV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListRetryableFlowsV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listRetryableFlowsV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListRetryableFlowsV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListRetryableFlowsV4OK), nil

}

/*
ListStackInWorkspaceV4 lists stacks for the given workspace and environment name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) ListStackInWorkspaceV4(params *ListStackInWorkspaceV4Params) (*ListStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStackInWorkspaceV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStackInWorkspaceV4OK), nil

}

/*
PostStackForBlueprintV4 posts stack for blueprint in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackForBlueprintV4(params *PostStackForBlueprintV4Params) (*PostStackForBlueprintV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackForBlueprintV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackForBlueprintV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/blueprint",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackForBlueprintV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackForBlueprintV4OK), nil

}

/*
PostStackInWorkspaceV4 creates stack in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackInWorkspaceV4(params *PostStackInWorkspaceV4Params) (*PostStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackInWorkspaceV4OK), nil

}

/*
PostStackInWorkspaceV4Internal creates stack in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PostStackInWorkspaceV4Internal(params *PostStackInWorkspaceV4InternalParams) (*PostStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postStackInWorkspaceV4Internal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostStackInWorkspaceV4InternalOK), nil

}

/*
PrepareClusterUpgradeByCrnInternal upgrades a cluster to the latest c m or c d h version internal only
*/
func (a *Client) PrepareClusterUpgradeByCrnInternal(params *PrepareClusterUpgradeByCrnInternalParams) (*PrepareClusterUpgradeByCrnInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPrepareClusterUpgradeByCrnInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "prepareClusterUpgradeByCrnInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{crn}/prepare_cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PrepareClusterUpgradeByCrnInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PrepareClusterUpgradeByCrnInternalOK), nil

}

/*
PutClusterV4 updates cluster by stack id

Clusters are materialised Hadoop services on a given infrastructure. They are built based on a blueprint (running the components and services specified) and on a configured infrastructure Stack. Once a cluster is created and launched, it can be used the usual way as any Hadoop cluster. We suggest to start with the Cluster's Ambari UI for an overview of your cluster.
*/
func (a *Client) PutClusterV4(params *PutClusterV4Params) (*PutClusterV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutClusterV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putClusterV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutClusterV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutClusterV4OK), nil

}

/*
PutScalingStackInWorkspaceV4 scales the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutScalingStackInWorkspaceV4(params *PutScalingStackInWorkspaceV4Params) (*PutScalingStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutScalingStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putScalingStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutScalingStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutScalingStackInWorkspaceV4OK), nil

}

/*
PutpasswordStackV4 updates stack by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) PutpasswordStackV4(params *PutpasswordStackV4Params) (*PutpasswordStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutpasswordStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putpasswordStackV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/ambari_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutpasswordStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutpasswordStackV4OK), nil

}

/*
RangerRazEnabled determines if ranger raz is present in the cluster
*/
func (a *Client) RangerRazEnabled(params *RangerRazEnabledParams) (*RangerRazEnabledOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRangerRazEnabledParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rangerRazEnabled",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{crn}/ranger_raz_enabled",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RangerRazEnabledReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RangerRazEnabledOK), nil

}

/*
ReRegisterClusterProxyConfig res registers the cluster proxy config for the cluster if needed
*/
func (a *Client) ReRegisterClusterProxyConfig(params *ReRegisterClusterProxyConfigParams) (*ReRegisterClusterProxyConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewReRegisterClusterProxyConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "reRegisterClusterProxyConfig",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{crn}/re_register_cluster_proxy_config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ReRegisterClusterProxyConfigReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ReRegisterClusterProxyConfigOK), nil

}

/*
RecoverClusterInternal recovers the stack by name in workspace internal only
*/
func (a *Client) RecoverClusterInternal(params *RecoverClusterInternalParams) (*RecoverClusterInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRecoverClusterInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "recoverClusterInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/cluster_recover",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RecoverClusterInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RecoverClusterInternalOK), nil

}

/*
RefreshRecipesInternal refreshes recipes on the cluster by name in workspace internal only
*/
func (a *Client) RefreshRecipesInternal(params *RefreshRecipesInternalParams) (*RefreshRecipesInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshRecipesInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshRecipesInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/refresh_recipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RefreshRecipesInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RefreshRecipesInternalOK), nil

}

/*
RefreshStackRecipes refreshes recipes on the cluster by name in workspace
*/
func (a *Client) RefreshStackRecipes(params *RefreshStackRecipesParams) (*RefreshStackRecipesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshStackRecipesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshStackRecipes",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/refresh_recipes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RefreshStackRecipesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RefreshStackRecipesOK), nil

}

/*
RenewInternalStackCertificate triggers a certificate renewal on the desired cluster which is identified via stack s name

Trigger a certificate renewal on the specified cluster.
*/
func (a *Client) RenewInternalStackCertificate(params *RenewInternalStackCertificateParams) (*RenewInternalStackCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewInternalStackCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renewInternalStackCertificate",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/crn/{crn}/renew_certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RenewInternalStackCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenewInternalStackCertificateOK), nil

}

/*
RenewStackCertificate triggers a certificate renewal on the desired cluster which is identified via stack s name

Trigger a certificate renewal on the specified cluster.
*/
func (a *Client) RenewStackCertificate(params *RenewStackCertificateParams) (*RenewStackCertificateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRenewStackCertificateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "renewStackCertificate",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/renew_certificate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RenewStackCertificateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RenewStackCertificateOK), nil

}

/*
RepairStackInWorkspaceV4 repairs the stack by name in workspace

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairStackInWorkspaceV4(params *RepairStackInWorkspaceV4Params) (*RepairStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RepairStackInWorkspaceV4OK), nil

}

/*
RepairStackInWorkspaceV4Internal repairs the stack by name in workspace internal only

Removing the failed nodes and starting new nodes to substitute them.
*/
func (a *Client) RepairStackInWorkspaceV4Internal(params *RepairStackInWorkspaceV4InternalParams) (*RepairStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRepairStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "repairStackInWorkspaceV4Internal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/manual_repair",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RepairStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RepairStackInWorkspaceV4InternalOK), nil

}

/*
RetryStackInWorkspaceV4 retries the stack by name in workspace

Failed or interrupted stack and cluster operations can be retried, after the cause of the failure was eliminated. The operations will continue at the state, where the previous process failed.
*/
func (a *Client) RetryStackInWorkspaceV4(params *RetryStackInWorkspaceV4Params) (*RetryStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRetryStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "retryStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/retry",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RetryStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RetryStackInWorkspaceV4OK), nil

}

/*
RotateAutoTLSCertificates rotates the certificates of the cluster
*/
func (a *Client) RotateAutoTLSCertificates(params *RotateAutoTLSCertificatesParams) (*RotateAutoTLSCertificatesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateAutoTLSCertificatesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rotateAutoTlsCertificates",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/rotate_autotls_certificates",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RotateAutoTLSCertificatesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RotateAutoTLSCertificatesOK), nil

}

/*
RotateSaltPasswordForStackInWorkspaceV4Internal rotates the salt stack user password of stack by crn in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) RotateSaltPasswordForStackInWorkspaceV4Internal(params *RotateSaltPasswordForStackInWorkspaceV4InternalParams) (*RotateSaltPasswordForStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRotateSaltPasswordForStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "rotateSaltPasswordForStackInWorkspaceV4Internal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{crn}/rotate_salt_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RotateSaltPasswordForStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RotateSaltPasswordForStackInWorkspaceV4InternalOK), nil

}

/*
SetClusterMaintenanceMode sets maintenance mode for the cluster by name

Setting maintenance mode for the cluster in order to be able to update Ambari and/or the Hadoop stack.
*/
func (a *Client) SetClusterMaintenanceMode(params *SetClusterMaintenanceModeParams) (*SetClusterMaintenanceModeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetClusterMaintenanceModeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setClusterMaintenanceMode",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/maintenance",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetClusterMaintenanceModeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetClusterMaintenanceModeOK), nil

}

/*
StartStackInWorkspaceV4 starts the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartStackInWorkspaceV4(params *StartStackInWorkspaceV4Params) (*StartStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartStackInWorkspaceV4OK), nil

}

/*
StartStackInWorkspaceV4Internal starts the stack by name in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StartStackInWorkspaceV4Internal(params *StartStackInWorkspaceV4InternalParams) (*StartStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStartStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "startStackInWorkspaceV4Internal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/start",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StartStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StartStackInWorkspaceV4InternalOK), nil

}

/*
StatusStackV4 retrieves stack status by stack name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StatusStackV4(params *StatusStackV4Params) (*StatusStackV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStatusStackV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "statusStackV4",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/status",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StatusStackV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StatusStackV4OK), nil

}

/*
StopStackInWorkspaceV4 stops the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopStackInWorkspaceV4(params *StopStackInWorkspaceV4Params) (*StopStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopStackInWorkspaceV4",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopStackInWorkspaceV4OK), nil

}

/*
StopStackInWorkspaceV4Internal stops the stack by name in workspace internal only

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) StopStackInWorkspaceV4Internal(params *StopStackInWorkspaceV4InternalParams) (*StopStackInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewStopStackInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "stopStackInWorkspaceV4Internal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/stop",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &StopStackInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*StopStackInWorkspaceV4InternalOK), nil

}

/*
SyncCmInWorkspaceV4 syncs from c m the parcel and c m versions by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncCmInWorkspaceV4(params *SyncCmInWorkspaceV4Params) (*SyncCmInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncCmInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncCmInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/sync_cm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncCmInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SyncCmInWorkspaceV4OK), nil

}

/*
SyncStackInWorkspaceV4 syncs the stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) SyncStackInWorkspaceV4(params *SyncStackInWorkspaceV4Params) (*SyncStackInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSyncStackInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "syncStackInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/sync",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SyncStackInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SyncStackInWorkspaceV4OK), nil

}

/*
UpdateLoadBalancerDNS updates load balancer dns in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) UpdateLoadBalancerDNS(params *UpdateLoadBalancerDNSParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLoadBalancerDNSParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLoadBalancerDNS",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/update_load_balancer_dns",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateLoadBalancerDNSReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
UpdateLoadBalancersInternal updates an existing cluster with load balancers including adding the endpoint gateway if it s enabled
*/
func (a *Client) UpdateLoadBalancersInternal(params *UpdateLoadBalancersInternalParams) (*UpdateLoadBalancersInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateLoadBalancersInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateLoadBalancersInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/update_load_balancers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateLoadBalancersInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateLoadBalancersInternalOK), nil

}

/*
UpdateNameCrnAndType updates stack by name in workspace

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) UpdateNameCrnAndType(params *UpdateNameCrnAndTypeParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNameCrnAndTypeParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateNameCrnAndType",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/update_name_crn_type",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateNameCrnAndTypeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
UpdatePillarConfigurationByCrn updates salt pillar configuration on cluster
*/
func (a *Client) UpdatePillarConfigurationByCrn(params *UpdatePillarConfigurationByCrnParams) (*UpdatePillarConfigurationByCrnOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePillarConfigurationByCrnParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePillarConfigurationByCrn",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/crn/{crn}/pillar_config_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePillarConfigurationByCrnReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePillarConfigurationByCrnOK), nil

}

/*
UpdatePillarConfigurationByName updates salt pillar configuration on cluster
*/
func (a *Client) UpdatePillarConfigurationByName(params *UpdatePillarConfigurationByNameParams) (*UpdatePillarConfigurationByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdatePillarConfigurationByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updatePillarConfigurationByName",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/pillar_config_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdatePillarConfigurationByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdatePillarConfigurationByNameOK), nil

}

/*
UpdateSaltByName updates salt states on cluster
*/
func (a *Client) UpdateSaltByName(params *UpdateSaltByNameParams) (*UpdateSaltByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateSaltByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateSaltByName",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/salt_update",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateSaltByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateSaltByNameOK), nil

}

/*
UpgradeCcmByCrnInternal initiates the c c m tunnel type upgrade to the latest available version
*/
func (a *Client) UpgradeCcmByCrnInternal(params *UpgradeCcmByCrnInternalParams) (*UpgradeCcmByCrnInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCcmByCrnInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeCcmByCrnInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/crn/{crn}/upgrade_ccm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeCcmByCrnInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeCcmByCrnInternalOK), nil

}

/*
UpgradeCcmByNameInternal initiates the c c m tunnel type upgrade to the latest available version
*/
func (a *Client) UpgradeCcmByNameInternal(params *UpgradeCcmByNameInternalParams) (*UpgradeCcmByNameInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeCcmByNameInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeCcmByNameInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/upgrade_ccm",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeCcmByNameInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeCcmByNameInternalOK), nil

}

/*
UpgradeClusterByName upgrades a cluster to the latest c m or c d h version
*/
func (a *Client) UpgradeClusterByName(params *UpgradeClusterByNameParams) (*UpgradeClusterByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeClusterByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeClusterByName",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeClusterByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeClusterByNameOK), nil

}

/*
UpgradeClusterByNameInternal upgrades a cluster to the latest c m or c d h version internal only
*/
func (a *Client) UpgradeClusterByNameInternal(params *UpgradeClusterByNameInternalParams) (*UpgradeClusterByNameInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeClusterByNameInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeClusterByNameInternal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/cluster_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeClusterByNameInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeClusterByNameInternalOK), nil

}

/*
UpgradeOsInWorkspaceV4 upgrades the stack by name in workspace

Removing all nodes and starting new nodes with the latest image. If the cluster already uses the the latest image then no remove/restart will happen.
*/
func (a *Client) UpgradeOsInWorkspaceV4(params *UpgradeOsInWorkspaceV4Params) (*UpgradeOsInWorkspaceV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeOsInWorkspaceV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeOsInWorkspaceV4",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeOsInWorkspaceV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeOsInWorkspaceV4OK), nil

}

/*
UpgradeOsInWorkspaceV4Internal upgrades the stack by name in workspace

Removing all nodes and starting new nodes with the latest image. If the cluster already uses the the latest image then no remove/restart will happen.
*/
func (a *Client) UpgradeOsInWorkspaceV4Internal(params *UpgradeOsInWorkspaceV4InternalParams) (*UpgradeOsInWorkspaceV4InternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeOsInWorkspaceV4InternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeOsInWorkspaceV4Internal",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeOsInWorkspaceV4InternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeOsInWorkspaceV4InternalOK), nil

}

/*
UpgradeRdsByNameInternal upgrades the external database of a cluster to a given version internal only
*/
func (a *Client) UpgradeRdsByNameInternal(params *UpgradeRdsByNameInternalParams) (*UpgradeRdsByNameInternalOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpgradeRdsByNameInternalParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "upgradeRdsByNameInternal",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/rds_upgrade",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpgradeRdsByNameInternalReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpgradeRdsByNameInternalOK), nil

}

/*
VerticalScalingInternalByName verticals scale the stack instances node type disks by name

Stacks are template instances - a running cloud infrastructure created based on a template. Stacks are always launched on behalf of a cloud user account. Stacks support a wide range of resources, allowing you to build a highly available, reliable, and scalable infrastructure for your application needs.
*/
func (a *Client) VerticalScalingInternalByName(params *VerticalScalingInternalByNameParams) (*VerticalScalingInternalByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewVerticalScalingInternalByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "verticalScalingInternalByName",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/stacks/internal/{name}/vertical_scaling",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &VerticalScalingInternalByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*VerticalScalingInternalByNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
