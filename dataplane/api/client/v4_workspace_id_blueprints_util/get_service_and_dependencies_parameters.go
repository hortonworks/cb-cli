// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_blueprints_util

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetServiceAndDependenciesParams creates a new GetServiceAndDependenciesParams object
// with the default values initialized.
func NewGetServiceAndDependenciesParams() *GetServiceAndDependenciesParams {
	var ()
	return &GetServiceAndDependenciesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetServiceAndDependenciesParamsWithTimeout creates a new GetServiceAndDependenciesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetServiceAndDependenciesParamsWithTimeout(timeout time.Duration) *GetServiceAndDependenciesParams {
	var ()
	return &GetServiceAndDependenciesParams{

		timeout: timeout,
	}
}

// NewGetServiceAndDependenciesParamsWithContext creates a new GetServiceAndDependenciesParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetServiceAndDependenciesParamsWithContext(ctx context.Context) *GetServiceAndDependenciesParams {
	var ()
	return &GetServiceAndDependenciesParams{

		Context: ctx,
	}
}

// NewGetServiceAndDependenciesParamsWithHTTPClient creates a new GetServiceAndDependenciesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetServiceAndDependenciesParamsWithHTTPClient(client *http.Client) *GetServiceAndDependenciesParams {
	var ()
	return &GetServiceAndDependenciesParams{
		HTTPClient: client,
	}
}

/*GetServiceAndDependenciesParams contains all the parameters to send to the API endpoint
for the get service and dependencies operation typically these are written to a http.Request
*/
type GetServiceAndDependenciesParams struct {

	/*Platform*/
	Platform *string
	/*Services*/
	Services []string
	/*WorkspaceID*/
	WorkspaceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithTimeout(timeout time.Duration) *GetServiceAndDependenciesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithContext(ctx context.Context) *GetServiceAndDependenciesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithHTTPClient(client *http.Client) *GetServiceAndDependenciesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlatform adds the platform to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithPlatform(platform *string) *GetServiceAndDependenciesParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithServices adds the services to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithServices(services []string) *GetServiceAndDependenciesParams {
	o.SetServices(services)
	return o
}

// SetServices adds the services to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetServices(services []string) {
	o.Services = services
}

// WithWorkspaceID adds the workspaceID to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) WithWorkspaceID(workspaceID int64) *GetServiceAndDependenciesParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get service and dependencies params
func (o *GetServiceAndDependenciesParams) SetWorkspaceID(workspaceID int64) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetServiceAndDependenciesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Platform != nil {

		// query param platform
		var qrPlatform string
		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {
			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}

	}

	valuesServices := o.Services

	joinedServices := swag.JoinByFormat(valuesServices, "multi")
	// query array param services
	if err := r.SetQueryParam("services", joinedServices...); err != nil {
		return err
	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", swag.FormatInt64(o.WorkspaceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
