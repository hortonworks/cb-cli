// Code generated by go-swagger; DO NOT EDIT.

package flow_public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewHasFlowRunningByChainIDAndResourceCrnParams creates a new HasFlowRunningByChainIDAndResourceCrnParams object
// with the default values initialized.
func NewHasFlowRunningByChainIDAndResourceCrnParams() *HasFlowRunningByChainIDAndResourceCrnParams {
	var ()
	return &HasFlowRunningByChainIDAndResourceCrnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewHasFlowRunningByChainIDAndResourceCrnParamsWithTimeout creates a new HasFlowRunningByChainIDAndResourceCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewHasFlowRunningByChainIDAndResourceCrnParamsWithTimeout(timeout time.Duration) *HasFlowRunningByChainIDAndResourceCrnParams {
	var ()
	return &HasFlowRunningByChainIDAndResourceCrnParams{

		timeout: timeout,
	}
}

// NewHasFlowRunningByChainIDAndResourceCrnParamsWithContext creates a new HasFlowRunningByChainIDAndResourceCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewHasFlowRunningByChainIDAndResourceCrnParamsWithContext(ctx context.Context) *HasFlowRunningByChainIDAndResourceCrnParams {
	var ()
	return &HasFlowRunningByChainIDAndResourceCrnParams{

		Context: ctx,
	}
}

// NewHasFlowRunningByChainIDAndResourceCrnParamsWithHTTPClient creates a new HasFlowRunningByChainIDAndResourceCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewHasFlowRunningByChainIDAndResourceCrnParamsWithHTTPClient(client *http.Client) *HasFlowRunningByChainIDAndResourceCrnParams {
	var ()
	return &HasFlowRunningByChainIDAndResourceCrnParams{
		HTTPClient: client,
	}
}

/*HasFlowRunningByChainIDAndResourceCrnParams contains all the parameters to send to the API endpoint
for the has flow running by chain Id and resource crn operation typically these are written to a http.Request
*/
type HasFlowRunningByChainIDAndResourceCrnParams struct {

	/*ChainID*/
	ChainID string
	/*ResourceCrn*/
	ResourceCrn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WithTimeout(timeout time.Duration) *HasFlowRunningByChainIDAndResourceCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WithContext(ctx context.Context) *HasFlowRunningByChainIDAndResourceCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WithHTTPClient(client *http.Client) *HasFlowRunningByChainIDAndResourceCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChainID adds the chainID to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WithChainID(chainID string) *HasFlowRunningByChainIDAndResourceCrnParams {
	o.SetChainID(chainID)
	return o
}

// SetChainID adds the chainId to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) SetChainID(chainID string) {
	o.ChainID = chainID
}

// WithResourceCrn adds the resourceCrn to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WithResourceCrn(resourceCrn *string) *HasFlowRunningByChainIDAndResourceCrnParams {
	o.SetResourceCrn(resourceCrn)
	return o
}

// SetResourceCrn adds the resourceCrn to the has flow running by chain Id and resource crn params
func (o *HasFlowRunningByChainIDAndResourceCrnParams) SetResourceCrn(resourceCrn *string) {
	o.ResourceCrn = resourceCrn
}

// WriteToRequest writes these params to a swagger request
func (o *HasFlowRunningByChainIDAndResourceCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param chainId
	if err := r.SetPathParam("chainId", o.ChainID); err != nil {
		return err
	}

	if o.ResourceCrn != nil {

		// query param resourceCrn
		var qrResourceCrn string
		if o.ResourceCrn != nil {
			qrResourceCrn = *o.ResourceCrn
		}
		qResourceCrn := qrResourceCrn
		if qResourceCrn != "" {
			if err := r.SetQueryParam("resourceCrn", qResourceCrn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
