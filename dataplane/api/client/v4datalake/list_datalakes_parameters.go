// Code generated by go-swagger; DO NOT EDIT.

package v4datalake

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListDatalakesParams creates a new ListDatalakesParams object
// with the default values initialized.
func NewListDatalakesParams() *ListDatalakesParams {
	var ()
	return &ListDatalakesParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewListDatalakesParamsWithTimeout creates a new ListDatalakesParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListDatalakesParamsWithTimeout(timeout time.Duration) *ListDatalakesParams {
	var ()
	return &ListDatalakesParams{

		timeout: timeout,
	}
}

// NewListDatalakesParamsWithContext creates a new ListDatalakesParams object
// with the default values initialized, and the ability to set a context for a request
func NewListDatalakesParamsWithContext(ctx context.Context) *ListDatalakesParams {
	var ()
	return &ListDatalakesParams{

		Context: ctx,
	}
}

// NewListDatalakesParamsWithHTTPClient creates a new ListDatalakesParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListDatalakesParamsWithHTTPClient(client *http.Client) *ListDatalakesParams {
	var ()
	return &ListDatalakesParams{
		HTTPClient: client,
	}
}

/*ListDatalakesParams contains all the parameters to send to the API endpoint
for the list datalakes operation typically these are written to a http.Request
*/
type ListDatalakesParams struct {

	/*Environment*/
	Environment *string
	/*EnvironmentCrn*/
	EnvironmentCrn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list datalakes params
func (o *ListDatalakesParams) WithTimeout(timeout time.Duration) *ListDatalakesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list datalakes params
func (o *ListDatalakesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list datalakes params
func (o *ListDatalakesParams) WithContext(ctx context.Context) *ListDatalakesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list datalakes params
func (o *ListDatalakesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list datalakes params
func (o *ListDatalakesParams) WithHTTPClient(client *http.Client) *ListDatalakesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list datalakes params
func (o *ListDatalakesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironment adds the environment to the list datalakes params
func (o *ListDatalakesParams) WithEnvironment(environment *string) *ListDatalakesParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the list datalakes params
func (o *ListDatalakesParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithEnvironmentCrn adds the environmentCrn to the list datalakes params
func (o *ListDatalakesParams) WithEnvironmentCrn(environmentCrn *string) *ListDatalakesParams {
	o.SetEnvironmentCrn(environmentCrn)
	return o
}

// SetEnvironmentCrn adds the environmentCrn to the list datalakes params
func (o *ListDatalakesParams) SetEnvironmentCrn(environmentCrn *string) {
	o.EnvironmentCrn = environmentCrn
}

// WriteToRequest writes these params to a swagger request
func (o *ListDatalakesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.EnvironmentCrn != nil {

		// query param environmentCrn
		var qrEnvironmentCrn string
		if o.EnvironmentCrn != nil {
			qrEnvironmentCrn = *o.EnvironmentCrn
		}
		qEnvironmentCrn := qrEnvironmentCrn
		if qEnvironmentCrn != "" {
			if err := r.SetQueryParam("environmentCrn", qEnvironmentCrn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
