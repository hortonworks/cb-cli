// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id credentials API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id credentials API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AuthorizeCodeGrantFlowBasedCredentialInWorkspace authorizes oauth2 authorization code grant flow

Authorize code grant flow based credential creation.
*/
func (a *Client) AuthorizeCodeGrantFlowBasedCredentialInWorkspace(params *AuthorizeCodeGrantFlowBasedCredentialInWorkspaceParams) (*AuthorizeCodeGrantFlowBasedCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAuthorizeCodeGrantFlowBasedCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "authorizeCodeGrantFlowBasedCredentialInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials/code_grant_flow/authorization/{cloudPlatform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AuthorizeCodeGrantFlowBasedCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AuthorizeCodeGrantFlowBasedCredentialInWorkspaceOK), nil

}

/*
CodeGrantFlowBasedCredentialInWorkspace starts a credential creation with oauth2 authorization code grant flow

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) CodeGrantFlowBasedCredentialInWorkspace(params *CodeGrantFlowBasedCredentialInWorkspaceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCodeGrantFlowBasedCredentialInWorkspaceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "codeGrantFlowBasedCredentialInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials/code_grant_flow/init",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CodeGrantFlowBasedCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CodeGrantFlowOnExistingCredentialInWorkspace reinitializes oauth2 authorization code grant flow on an existing credential

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) CodeGrantFlowOnExistingCredentialInWorkspace(params *CodeGrantFlowOnExistingCredentialInWorkspaceParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCodeGrantFlowOnExistingCredentialInWorkspaceParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "codeGrantFlowOnExistingCredentialInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials/code_grant_flow/init/{name}",
		ProducesMediaTypes: []string{""},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CodeGrantFlowOnExistingCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
CreateCredentialInWorkspace creates credential in workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) CreateCredentialInWorkspace(params *CreateCredentialInWorkspaceParams) (*CreateCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCredentialInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateCredentialInWorkspaceOK), nil

}

/*
DeleteCredentialInWorkspace deletes credential by name in workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) DeleteCredentialInWorkspace(params *DeleteCredentialInWorkspaceParams) (*DeleteCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCredentialInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/credentials/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCredentialInWorkspaceOK), nil

}

/*
DeleteCredentialsInWorkspace deletes multiple credentials by name in workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) DeleteCredentialsInWorkspace(params *DeleteCredentialsInWorkspaceParams) (*DeleteCredentialsInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCredentialsInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCredentialsInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteCredentialsInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteCredentialsInWorkspaceOK), nil

}

/*
GetCredentialInWorkspace gets credential by name in workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) GetCredentialInWorkspace(params *GetCredentialInWorkspaceParams) (*GetCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCredentialInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetCredentialInWorkspaceOK), nil

}

/*
GetPrerequisitesForCloudPlatform gets credential prerequisites for cloud platform

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) GetPrerequisitesForCloudPlatform(params *GetPrerequisitesForCloudPlatformParams) (*GetPrerequisitesForCloudPlatformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrerequisitesForCloudPlatformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPrerequisitesForCloudPlatform",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials/prerequisites/{cloudPlatform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPrerequisitesForCloudPlatformReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPrerequisitesForCloudPlatformOK), nil

}

/*
InteractiveLoginCredentialInWorkspace interactives login

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) InteractiveLoginCredentialInWorkspace(params *InteractiveLoginCredentialInWorkspaceParams) (*InteractiveLoginCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewInteractiveLoginCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "interactiveLoginCredentialInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/credentials/interactive_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &InteractiveLoginCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*InteractiveLoginCredentialInWorkspaceOK), nil

}

/*
ListCredentialsByWorkspace lists credentials for the given workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) ListCredentialsByWorkspace(params *ListCredentialsByWorkspaceParams) (*ListCredentialsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListCredentialsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listCredentialsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListCredentialsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListCredentialsByWorkspaceOK), nil

}

/*
PutCredentialInWorkspace modifies public credential resource in workspace

Cloudbreak is launching Hadoop clusters on the user's behalf - on different cloud providers. One key point is that Cloudbreak does not store your Cloud provider account details (such as username, password, keys, private SSL certificates, etc). We work around the concept that Identity and Access Management is fully controlled by you - the end user. The Cloudbreak deployer is purely acting on behalf of the end user - without having access to the user's account.
*/
func (a *Client) PutCredentialInWorkspace(params *PutCredentialInWorkspaceParams) (*PutCredentialInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutCredentialInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putCredentialInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/credentials",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutCredentialInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutCredentialInWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
