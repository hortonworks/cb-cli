// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_cluster_definitions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id cluster definitions API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id cluster definitions API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateClusterDefinitionInWorkspace creates cluster definition in workspace

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) CreateClusterDefinitionInWorkspace(params *CreateClusterDefinitionInWorkspaceParams) (*CreateClusterDefinitionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateClusterDefinitionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createClusterDefinitionInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateClusterDefinitionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateClusterDefinitionInWorkspaceOK), nil

}

/*
CreateRecommendationForWorkspace creates a recommendation that advises cloud resources for the given cluster definition

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) CreateRecommendationForWorkspace(params *CreateRecommendationForWorkspaceParams) (*CreateRecommendationForWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateRecommendationForWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createRecommendationForWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions/recommendation",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateRecommendationForWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateRecommendationForWorkspaceOK), nil

}

/*
DeleteClusterDefinitionInWorkspace deletes cluster definition by name in workspace

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) DeleteClusterDefinitionInWorkspace(params *DeleteClusterDefinitionInWorkspaceParams) (*DeleteClusterDefinitionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterDefinitionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterDefinitionInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterDefinitionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterDefinitionInWorkspaceOK), nil

}

/*
DeleteClusterDefinitionsInWorkspace deletes multiple cluster definitions by name in workspace

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) DeleteClusterDefinitionsInWorkspace(params *DeleteClusterDefinitionsInWorkspaceParams) (*DeleteClusterDefinitionsInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterDefinitionsInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteClusterDefinitionsInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterDefinitionsInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteClusterDefinitionsInWorkspaceOK), nil

}

/*
GetClusterDefinitionCustomParameters returns custom parameters
*/
func (a *Client) GetClusterDefinitionCustomParameters(params *GetClusterDefinitionCustomParametersParams) (*GetClusterDefinitionCustomParametersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterDefinitionCustomParametersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterDefinitionCustomParameters",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions/{name}/parameters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterDefinitionCustomParametersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterDefinitionCustomParametersOK), nil

}

/*
GetClusterDefinitionInWorkspace gets cluster definition by name in workspace

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) GetClusterDefinitionInWorkspace(params *GetClusterDefinitionInWorkspaceParams) (*GetClusterDefinitionInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterDefinitionInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterDefinitionInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterDefinitionInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterDefinitionInWorkspaceOK), nil

}

/*
GetClusterDefinitionRequestFromName retrieves validation request by cluster definition name

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) GetClusterDefinitionRequestFromName(params *GetClusterDefinitionRequestFromNameParams) (*GetClusterDefinitionRequestFromNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterDefinitionRequestFromNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusterDefinitionRequestFromName",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterDefinitionRequestFromNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterDefinitionRequestFromNameOK), nil

}

/*
ListClusterDefinitionsByWorkspace lists cluster definitions for the given workspace

Cluster definitions are a declarative definition of a Hadoop cluster. With a cluster definition, you specify a stack, the component layout and the configurations to materialize a Hadoop cluster instance. Hostgroups defined in cluster definitions can be associated to different templates, thus you can spin up a highly available cluster running on different instance types. This will give you the option to group your Hadoop services based on resource needs (e.g. high I/O, CPU or memory) and create an infrastructure which fits your workload best.
*/
func (a *Client) ListClusterDefinitionsByWorkspace(params *ListClusterDefinitionsByWorkspaceParams) (*ListClusterDefinitionsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterDefinitionsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterDefinitionsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/cluster_definitions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClusterDefinitionsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListClusterDefinitionsByWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
