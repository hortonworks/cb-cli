// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_file_systems

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetFileSystemParametersParams creates a new GetFileSystemParametersParams object
// with the default values initialized.
func NewGetFileSystemParametersParams() *GetFileSystemParametersParams {
	var (
		attachedClusterDefault = bool(false)
		secureDefault          = bool(false)
	)
	return &GetFileSystemParametersParams{
		AttachedCluster: &attachedClusterDefault,
		Secure:          &secureDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetFileSystemParametersParamsWithTimeout creates a new GetFileSystemParametersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetFileSystemParametersParamsWithTimeout(timeout time.Duration) *GetFileSystemParametersParams {
	var (
		attachedClusterDefault = bool(false)
		secureDefault          = bool(false)
	)
	return &GetFileSystemParametersParams{
		AttachedCluster: &attachedClusterDefault,
		Secure:          &secureDefault,

		timeout: timeout,
	}
}

// NewGetFileSystemParametersParamsWithContext creates a new GetFileSystemParametersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetFileSystemParametersParamsWithContext(ctx context.Context) *GetFileSystemParametersParams {
	var (
		attachedClusterDefault = bool(false)
		secureDefault          = bool(false)
	)
	return &GetFileSystemParametersParams{
		AttachedCluster: &attachedClusterDefault,
		Secure:          &secureDefault,

		Context: ctx,
	}
}

// NewGetFileSystemParametersParamsWithHTTPClient creates a new GetFileSystemParametersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetFileSystemParametersParamsWithHTTPClient(client *http.Client) *GetFileSystemParametersParams {
	var (
		attachedClusterDefault = bool(false)
		secureDefault          = bool(false)
	)
	return &GetFileSystemParametersParams{
		AttachedCluster: &attachedClusterDefault,
		Secure:          &secureDefault,
		HTTPClient:      client,
	}
}

/*GetFileSystemParametersParams contains all the parameters to send to the API endpoint
for the get file system parameters operation typically these are written to a http.Request
*/
type GetFileSystemParametersParams struct {

	/*AccountName*/
	AccountName *string
	/*AttachedCluster*/
	AttachedCluster *bool
	/*BlueprintName*/
	BlueprintName string
	/*ClusterName*/
	ClusterName string
	/*FileSystemType*/
	FileSystemType string
	/*Secure*/
	Secure *bool
	/*StorageName*/
	StorageName string
	/*WorkspaceID*/
	WorkspaceID int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get file system parameters params
func (o *GetFileSystemParametersParams) WithTimeout(timeout time.Duration) *GetFileSystemParametersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get file system parameters params
func (o *GetFileSystemParametersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get file system parameters params
func (o *GetFileSystemParametersParams) WithContext(ctx context.Context) *GetFileSystemParametersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get file system parameters params
func (o *GetFileSystemParametersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get file system parameters params
func (o *GetFileSystemParametersParams) WithHTTPClient(client *http.Client) *GetFileSystemParametersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get file system parameters params
func (o *GetFileSystemParametersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountName adds the accountName to the get file system parameters params
func (o *GetFileSystemParametersParams) WithAccountName(accountName *string) *GetFileSystemParametersParams {
	o.SetAccountName(accountName)
	return o
}

// SetAccountName adds the accountName to the get file system parameters params
func (o *GetFileSystemParametersParams) SetAccountName(accountName *string) {
	o.AccountName = accountName
}

// WithAttachedCluster adds the attachedCluster to the get file system parameters params
func (o *GetFileSystemParametersParams) WithAttachedCluster(attachedCluster *bool) *GetFileSystemParametersParams {
	o.SetAttachedCluster(attachedCluster)
	return o
}

// SetAttachedCluster adds the attachedCluster to the get file system parameters params
func (o *GetFileSystemParametersParams) SetAttachedCluster(attachedCluster *bool) {
	o.AttachedCluster = attachedCluster
}

// WithBlueprintName adds the blueprintName to the get file system parameters params
func (o *GetFileSystemParametersParams) WithBlueprintName(blueprintName string) *GetFileSystemParametersParams {
	o.SetBlueprintName(blueprintName)
	return o
}

// SetBlueprintName adds the blueprintName to the get file system parameters params
func (o *GetFileSystemParametersParams) SetBlueprintName(blueprintName string) {
	o.BlueprintName = blueprintName
}

// WithClusterName adds the clusterName to the get file system parameters params
func (o *GetFileSystemParametersParams) WithClusterName(clusterName string) *GetFileSystemParametersParams {
	o.SetClusterName(clusterName)
	return o
}

// SetClusterName adds the clusterName to the get file system parameters params
func (o *GetFileSystemParametersParams) SetClusterName(clusterName string) {
	o.ClusterName = clusterName
}

// WithFileSystemType adds the fileSystemType to the get file system parameters params
func (o *GetFileSystemParametersParams) WithFileSystemType(fileSystemType string) *GetFileSystemParametersParams {
	o.SetFileSystemType(fileSystemType)
	return o
}

// SetFileSystemType adds the fileSystemType to the get file system parameters params
func (o *GetFileSystemParametersParams) SetFileSystemType(fileSystemType string) {
	o.FileSystemType = fileSystemType
}

// WithSecure adds the secure to the get file system parameters params
func (o *GetFileSystemParametersParams) WithSecure(secure *bool) *GetFileSystemParametersParams {
	o.SetSecure(secure)
	return o
}

// SetSecure adds the secure to the get file system parameters params
func (o *GetFileSystemParametersParams) SetSecure(secure *bool) {
	o.Secure = secure
}

// WithStorageName adds the storageName to the get file system parameters params
func (o *GetFileSystemParametersParams) WithStorageName(storageName string) *GetFileSystemParametersParams {
	o.SetStorageName(storageName)
	return o
}

// SetStorageName adds the storageName to the get file system parameters params
func (o *GetFileSystemParametersParams) SetStorageName(storageName string) {
	o.StorageName = storageName
}

// WithWorkspaceID adds the workspaceID to the get file system parameters params
func (o *GetFileSystemParametersParams) WithWorkspaceID(workspaceID int64) *GetFileSystemParametersParams {
	o.SetWorkspaceID(workspaceID)
	return o
}

// SetWorkspaceID adds the workspaceId to the get file system parameters params
func (o *GetFileSystemParametersParams) SetWorkspaceID(workspaceID int64) {
	o.WorkspaceID = workspaceID
}

// WriteToRequest writes these params to a swagger request
func (o *GetFileSystemParametersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountName != nil {

		// query param accountName
		var qrAccountName string
		if o.AccountName != nil {
			qrAccountName = *o.AccountName
		}
		qAccountName := qrAccountName
		if qAccountName != "" {
			if err := r.SetQueryParam("accountName", qAccountName); err != nil {
				return err
			}
		}

	}

	if o.AttachedCluster != nil {

		// query param attachedCluster
		var qrAttachedCluster bool
		if o.AttachedCluster != nil {
			qrAttachedCluster = *o.AttachedCluster
		}
		qAttachedCluster := swag.FormatBool(qrAttachedCluster)
		if qAttachedCluster != "" {
			if err := r.SetQueryParam("attachedCluster", qAttachedCluster); err != nil {
				return err
			}
		}

	}

	// query param blueprintName
	qrBlueprintName := o.BlueprintName
	qBlueprintName := qrBlueprintName
	if qBlueprintName != "" {
		if err := r.SetQueryParam("blueprintName", qBlueprintName); err != nil {
			return err
		}
	}

	// query param clusterName
	qrClusterName := o.ClusterName
	qClusterName := qrClusterName
	if qClusterName != "" {
		if err := r.SetQueryParam("clusterName", qClusterName); err != nil {
			return err
		}
	}

	// query param fileSystemType
	qrFileSystemType := o.FileSystemType
	qFileSystemType := qrFileSystemType
	if qFileSystemType != "" {
		if err := r.SetQueryParam("fileSystemType", qFileSystemType); err != nil {
			return err
		}
	}

	if o.Secure != nil {

		// query param secure
		var qrSecure bool
		if o.Secure != nil {
			qrSecure = *o.Secure
		}
		qSecure := swag.FormatBool(qrSecure)
		if qSecure != "" {
			if err := r.SetQueryParam("secure", qSecure); err != nil {
				return err
			}
		}

	}

	// query param storageName
	qrStorageName := o.StorageName
	qStorageName := qrStorageName
	if qStorageName != "" {
		if err := r.SetQueryParam("storageName", qStorageName); err != nil {
			return err
		}
	}

	// path param workspaceId
	if err := r.SetPathParam("workspaceId", swag.FormatInt64(o.WorkspaceID)); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
