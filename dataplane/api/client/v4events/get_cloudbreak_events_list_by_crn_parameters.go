// Code generated by go-swagger; DO NOT EDIT.

package v4events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCloudbreakEventsListByCrnParams creates a new GetCloudbreakEventsListByCrnParams object
// with the default values initialized.
func NewGetCloudbreakEventsListByCrnParams() *GetCloudbreakEventsListByCrnParams {
	var (
		onlyAliveDefault = bool(true)
		pageDefault      = int32(0)
		sizeDefault      = int32(100)
	)
	return &GetCloudbreakEventsListByCrnParams{
		OnlyAlive: &onlyAliveDefault,
		Page:      &pageDefault,
		Size:      &sizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudbreakEventsListByCrnParamsWithTimeout creates a new GetCloudbreakEventsListByCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCloudbreakEventsListByCrnParamsWithTimeout(timeout time.Duration) *GetCloudbreakEventsListByCrnParams {
	var (
		onlyAliveDefault = bool(true)
		pageDefault      = int32(0)
		sizeDefault      = int32(100)
	)
	return &GetCloudbreakEventsListByCrnParams{
		OnlyAlive: &onlyAliveDefault,
		Page:      &pageDefault,
		Size:      &sizeDefault,

		timeout: timeout,
	}
}

// NewGetCloudbreakEventsListByCrnParamsWithContext creates a new GetCloudbreakEventsListByCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCloudbreakEventsListByCrnParamsWithContext(ctx context.Context) *GetCloudbreakEventsListByCrnParams {
	var (
		onlyAliveDefault = bool(true)
		pageDefault      = int32(0)
		sizeDefault      = int32(100)
	)
	return &GetCloudbreakEventsListByCrnParams{
		OnlyAlive: &onlyAliveDefault,
		Page:      &pageDefault,
		Size:      &sizeDefault,

		Context: ctx,
	}
}

// NewGetCloudbreakEventsListByCrnParamsWithHTTPClient creates a new GetCloudbreakEventsListByCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCloudbreakEventsListByCrnParamsWithHTTPClient(client *http.Client) *GetCloudbreakEventsListByCrnParams {
	var (
		onlyAliveDefault = bool(true)
		pageDefault      = int32(0)
		sizeDefault      = int32(100)
	)
	return &GetCloudbreakEventsListByCrnParams{
		OnlyAlive:  &onlyAliveDefault,
		Page:       &pageDefault,
		Size:       &sizeDefault,
		HTTPClient: client,
	}
}

/*GetCloudbreakEventsListByCrnParams contains all the parameters to send to the API endpoint
for the get cloudbreak events list by crn operation typically these are written to a http.Request
*/
type GetCloudbreakEventsListByCrnParams struct {

	/*Crn*/
	Crn string
	/*OnlyAlive*/
	OnlyAlive *bool
	/*Page*/
	Page *int32
	/*Size*/
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithTimeout(timeout time.Duration) *GetCloudbreakEventsListByCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithContext(ctx context.Context) *GetCloudbreakEventsListByCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithHTTPClient(client *http.Client) *GetCloudbreakEventsListByCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCrn adds the crn to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithCrn(crn string) *GetCloudbreakEventsListByCrnParams {
	o.SetCrn(crn)
	return o
}

// SetCrn adds the crn to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetCrn(crn string) {
	o.Crn = crn
}

// WithOnlyAlive adds the onlyAlive to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithOnlyAlive(onlyAlive *bool) *GetCloudbreakEventsListByCrnParams {
	o.SetOnlyAlive(onlyAlive)
	return o
}

// SetOnlyAlive adds the onlyAlive to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetOnlyAlive(onlyAlive *bool) {
	o.OnlyAlive = onlyAlive
}

// WithPage adds the page to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithPage(page *int32) *GetCloudbreakEventsListByCrnParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetPage(page *int32) {
	o.Page = page
}

// WithSize adds the size to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) WithSize(size *int32) *GetCloudbreakEventsListByCrnParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get cloudbreak events list by crn params
func (o *GetCloudbreakEventsListByCrnParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudbreakEventsListByCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param crn
	if err := r.SetPathParam("crn", o.Crn); err != nil {
		return err
	}

	if o.OnlyAlive != nil {

		// query param onlyAlive
		var qrOnlyAlive bool
		if o.OnlyAlive != nil {
			qrOnlyAlive = *o.OnlyAlive
		}
		qOnlyAlive := swag.FormatBool(qrOnlyAlive)
		if qOnlyAlive != "" {
			if err := r.SetQueryParam("onlyAlive", qOnlyAlive); err != nil {
				return err
			}
		}

	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
