// Code generated by go-swagger; DO NOT EDIT.

package v4events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetCloudbreakEventsListByStackParams creates a new GetCloudbreakEventsListByStackParams object
// with the default values initialized.
func NewGetCloudbreakEventsListByStackParams() *GetCloudbreakEventsListByStackParams {
	var (
		pageDefault = int32(0)
		sizeDefault = int32(100)
	)
	return &GetCloudbreakEventsListByStackParams{
		Page: &pageDefault,
		Size: &sizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudbreakEventsListByStackParamsWithTimeout creates a new GetCloudbreakEventsListByStackParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetCloudbreakEventsListByStackParamsWithTimeout(timeout time.Duration) *GetCloudbreakEventsListByStackParams {
	var (
		pageDefault = int32(0)
		sizeDefault = int32(100)
	)
	return &GetCloudbreakEventsListByStackParams{
		Page: &pageDefault,
		Size: &sizeDefault,

		timeout: timeout,
	}
}

// NewGetCloudbreakEventsListByStackParamsWithContext creates a new GetCloudbreakEventsListByStackParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetCloudbreakEventsListByStackParamsWithContext(ctx context.Context) *GetCloudbreakEventsListByStackParams {
	var (
		pageDefault = int32(0)
		sizeDefault = int32(100)
	)
	return &GetCloudbreakEventsListByStackParams{
		Page: &pageDefault,
		Size: &sizeDefault,

		Context: ctx,
	}
}

// NewGetCloudbreakEventsListByStackParamsWithHTTPClient creates a new GetCloudbreakEventsListByStackParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetCloudbreakEventsListByStackParamsWithHTTPClient(client *http.Client) *GetCloudbreakEventsListByStackParams {
	var (
		pageDefault = int32(0)
		sizeDefault = int32(100)
	)
	return &GetCloudbreakEventsListByStackParams{
		Page:       &pageDefault,
		Size:       &sizeDefault,
		HTTPClient: client,
	}
}

/*
GetCloudbreakEventsListByStackParams contains all the parameters to send to the API endpoint
for the get cloudbreak events list by stack operation typically these are written to a http.Request
*/
type GetCloudbreakEventsListByStackParams struct {

	/*AccountID*/
	AccountID *string
	/*Name*/
	Name string
	/*Page*/
	Page *int32
	/*Size*/
	Size *int32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithTimeout(timeout time.Duration) *GetCloudbreakEventsListByStackParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithContext(ctx context.Context) *GetCloudbreakEventsListByStackParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithHTTPClient(client *http.Client) *GetCloudbreakEventsListByStackParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccountID adds the accountID to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithAccountID(accountID *string) *GetCloudbreakEventsListByStackParams {
	o.SetAccountID(accountID)
	return o
}

// SetAccountID adds the accountId to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetAccountID(accountID *string) {
	o.AccountID = accountID
}

// WithName adds the name to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithName(name string) *GetCloudbreakEventsListByStackParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetName(name string) {
	o.Name = name
}

// WithPage adds the page to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithPage(page *int32) *GetCloudbreakEventsListByStackParams {
	o.SetPage(page)
	return o
}

// SetPage adds the page to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetPage(page *int32) {
	o.Page = page
}

// WithSize adds the size to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) WithSize(size *int32) *GetCloudbreakEventsListByStackParams {
	o.SetSize(size)
	return o
}

// SetSize adds the size to the get cloudbreak events list by stack params
func (o *GetCloudbreakEventsListByStackParams) SetSize(size *int32) {
	o.Size = size
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudbreakEventsListByStackParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AccountID != nil {

		// query param accountId
		var qrAccountID string
		if o.AccountID != nil {
			qrAccountID = *o.AccountID
		}
		qAccountID := qrAccountID
		if qAccountID != "" {
			if err := r.SetQueryParam("accountId", qAccountID); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if o.Page != nil {

		// query param page
		var qrPage int32
		if o.Page != nil {
			qrPage = *o.Page
		}
		qPage := swag.FormatInt32(qrPage)
		if qPage != "" {
			if err := r.SetQueryParam("page", qPage); err != nil {
				return err
			}
		}

	}

	if o.Size != nil {

		// query param size
		var qrSize int32
		if o.Size != nil {
			qrSize = *o.Size
		}
		qSize := swag.FormatInt32(qrSize)
		if qSize != "" {
			if err := r.SetQueryParam("size", qSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
