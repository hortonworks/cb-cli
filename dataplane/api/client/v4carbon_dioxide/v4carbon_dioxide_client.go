// Code generated by go-swagger; DO NOT EDIT.

package v4carbon_dioxide

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4carbon dioxide API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4carbon dioxide API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
ListClusterCO2ByEnvV4 lists c o2 costs based on cluster c r ns and environment c r ns

CO2 cost of clusters
*/
func (a *Client) ListClusterCO2ByEnvV4(params *ListClusterCO2ByEnvV4Params) (*ListClusterCO2ByEnvV4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterCO2ByEnvV4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterCO2ByEnvV4",
		Method:             "PUT",
		PathPattern:        "/v4/carbon_dioxide/environment",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClusterCO2ByEnvV4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListClusterCO2ByEnvV4OK), nil

}

/*
ListClusterCO2V4 lists c o2 cost based on cluster c r ns

CO2 cost of clusters
*/
func (a *Client) ListClusterCO2V4(params *ListClusterCO2V4Params) (*ListClusterCO2V4OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListClusterCO2V4Params()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listClusterCO2V4",
		Method:             "PUT",
		PathPattern:        "/v4/carbon_dioxide",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListClusterCO2V4Reader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListClusterCO2V4OK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
