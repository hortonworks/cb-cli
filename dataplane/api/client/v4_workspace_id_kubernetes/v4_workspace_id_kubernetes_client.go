// Code generated by go-swagger; DO NOT EDIT.

package v4_workspace_id_kubernetes

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4 workspace id kubernetes API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4 workspace id kubernetes API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AttachKubernetesResourceToEnvironments attaches kubernetes resource to environemnts

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) AttachKubernetesResourceToEnvironments(params *AttachKubernetesResourceToEnvironmentsParams) (*AttachKubernetesResourceToEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAttachKubernetesResourceToEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "attachKubernetesResourceToEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/kubernetes/{name}/attach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AttachKubernetesResourceToEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AttachKubernetesResourceToEnvironmentsOK), nil

}

/*
CreateKubernetesConfigInWorkspace creates kubernetes config in workspace

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) CreateKubernetesConfigInWorkspace(params *CreateKubernetesConfigInWorkspaceParams) (*CreateKubernetesConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKubernetesConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKubernetesConfigInWorkspace",
		Method:             "POST",
		PathPattern:        "/v4/{workspaceId}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateKubernetesConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateKubernetesConfigInWorkspaceOK), nil

}

/*
DeleteKubernetesConfigInWorkspace deletes kubernetes config by name in workspace

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) DeleteKubernetesConfigInWorkspace(params *DeleteKubernetesConfigInWorkspaceParams) (*DeleteKubernetesConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKubernetesConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKubernetesConfigInWorkspace",
		Method:             "DELETE",
		PathPattern:        "/v4/{workspaceId}/kubernetes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteKubernetesConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteKubernetesConfigInWorkspaceOK), nil

}

/*
DetachKubernetesResourceFromEnvironments detaches kubernetes resource from environemnts

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) DetachKubernetesResourceFromEnvironments(params *DetachKubernetesResourceFromEnvironmentsParams) (*DetachKubernetesResourceFromEnvironmentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDetachKubernetesResourceFromEnvironmentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "detachKubernetesResourceFromEnvironments",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/kubernetes/{name}/detach",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DetachKubernetesResourceFromEnvironmentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DetachKubernetesResourceFromEnvironmentsOK), nil

}

/*
GetKubernetesConfigInWorkspace gets kubernetes config by name in workspace

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) GetKubernetesConfigInWorkspace(params *GetKubernetesConfigInWorkspaceParams) (*GetKubernetesConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKubernetesConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKubernetesConfigInWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/kubernetes/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetKubernetesConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetKubernetesConfigInWorkspaceOK), nil

}

/*
ListKubernetesConfigsByWorkspace lists kubernetes configs for the given workspace

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) ListKubernetesConfigsByWorkspace(params *ListKubernetesConfigsByWorkspaceParams) (*ListKubernetesConfigsByWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListKubernetesConfigsByWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listKubernetesConfigsByWorkspace",
		Method:             "GET",
		PathPattern:        "/v4/{workspaceId}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListKubernetesConfigsByWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListKubernetesConfigsByWorkspaceOK), nil

}

/*
PutKubernetesConfigInWorkspace modifies kubernetes config in workspace

An Kubernetes Configuration describe a configuration to communicate with a Kubernetes cluster.
*/
func (a *Client) PutKubernetesConfigInWorkspace(params *PutKubernetesConfigInWorkspaceParams) (*PutKubernetesConfigInWorkspaceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutKubernetesConfigInWorkspaceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putKubernetesConfigInWorkspace",
		Method:             "PUT",
		PathPattern:        "/v4/{workspaceId}/kubernetes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutKubernetesConfigInWorkspaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutKubernetesConfigInWorkspaceOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
