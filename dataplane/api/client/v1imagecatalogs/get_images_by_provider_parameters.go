// Code generated by go-swagger; DO NOT EDIT.

package v1imagecatalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetImagesByProviderParams creates a new GetImagesByProviderParams object
// with the default values initialized.
func NewGetImagesByProviderParams() *GetImagesByProviderParams {
	var ()
	return &GetImagesByProviderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetImagesByProviderParamsWithTimeout creates a new GetImagesByProviderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetImagesByProviderParamsWithTimeout(timeout time.Duration) *GetImagesByProviderParams {
	var ()
	return &GetImagesByProviderParams{

		timeout: timeout,
	}
}

// NewGetImagesByProviderParamsWithContext creates a new GetImagesByProviderParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetImagesByProviderParamsWithContext(ctx context.Context) *GetImagesByProviderParams {
	var ()
	return &GetImagesByProviderParams{

		Context: ctx,
	}
}

// NewGetImagesByProviderParamsWithHTTPClient creates a new GetImagesByProviderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetImagesByProviderParamsWithHTTPClient(client *http.Client) *GetImagesByProviderParams {
	var ()
	return &GetImagesByProviderParams{
		HTTPClient: client,
	}
}

/*GetImagesByProviderParams contains all the parameters to send to the API endpoint
for the get images by provider operation typically these are written to a http.Request
*/
type GetImagesByProviderParams struct {

	/*Platform*/
	Platform string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get images by provider params
func (o *GetImagesByProviderParams) WithTimeout(timeout time.Duration) *GetImagesByProviderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get images by provider params
func (o *GetImagesByProviderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get images by provider params
func (o *GetImagesByProviderParams) WithContext(ctx context.Context) *GetImagesByProviderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get images by provider params
func (o *GetImagesByProviderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get images by provider params
func (o *GetImagesByProviderParams) WithHTTPClient(client *http.Client) *GetImagesByProviderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get images by provider params
func (o *GetImagesByProviderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithPlatform adds the platform to the get images by provider params
func (o *GetImagesByProviderParams) WithPlatform(platform string) *GetImagesByProviderParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the get images by provider params
func (o *GetImagesByProviderParams) SetPlatform(platform string) {
	o.Platform = platform
}

// WriteToRequest writes these params to a swagger request
func (o *GetImagesByProviderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param platform
	if err := r.SetPathParam("platform", o.Platform); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
