// Code generated by go-swagger; DO NOT EDIT.

package v1usages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1usages API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1usages API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAccountUsage retrieves public and private owned usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetAccountUsage(params *GetAccountUsageParams) (*GetAccountUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccountUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccountUsage",
		Method:             "GET",
		PathPattern:        "/v1/usages/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccountUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccountUsageOK), nil

}

/*
GetDailyFlexUsage retrieves flex related daily usages

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetDailyFlexUsage(params *GetDailyFlexUsageParams) (*GetDailyFlexUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDailyFlexUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDailyFlexUsage",
		Method:             "GET",
		PathPattern:        "/v1/usages/flex/daily",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDailyFlexUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDailyFlexUsageOK), nil

}

/*
GetDeployerUsage retrieves usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetDeployerUsage(params *GetDeployerUsageParams) (*GetDeployerUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDeployerUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDeployerUsage",
		Method:             "GET",
		PathPattern:        "/v1/usages",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDeployerUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDeployerUsageOK), nil

}

/*
GetLatestFlexUsage retrieves flex related latest usages usages for the given day

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetLatestFlexUsage(params *GetLatestFlexUsageParams) (*GetLatestFlexUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetLatestFlexUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getLatestFlexUsage",
		Method:             "GET",
		PathPattern:        "/v1/usages/flex/latest",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetLatestFlexUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetLatestFlexUsageOK), nil

}

/*
GetUserUsage retrieves private usages by filter parameters

Cloudbreak gives you an up to date overview of cluster usage based on different filtering criteria (start/end date, users, providers, region, etc)
*/
func (a *Client) GetUserUsage(params *GetUserUsageParams) (*GetUserUsageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserUsageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getUserUsage",
		Method:             "GET",
		PathPattern:        "/v1/usages/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetUserUsageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetUserUsageOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
