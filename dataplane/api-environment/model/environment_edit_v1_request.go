// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentEditV1Request environment edit v1 request
// swagger:model EnvironmentEditV1Request
type EnvironmentEditV1Request struct {

	// Name of the admin group to be used for all the services.
	AdminGroupName string `json:"adminGroupName,omitempty"`

	// SSH key for accessing cluster node instances.
	Authentication *EnvironmentAuthenticationV1Request `json:"authentication,omitempty"`

	// AWS Specific parameters.
	Aws *AwsEnvironmentV1Parameters `json:"aws,omitempty"`

	// AZURE Specific parameters.
	Azure *AzureEnvironmentV1Parameters `json:"azure,omitempty"`

	// Cloud storage validation enabled or not.
	// Enum: [ENABLED DISABLED]
	CloudStorageValidation string `json:"cloudStorageValidation,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// GCP Specific parameters.
	Gcp GcpEnvironmentV1Parameters `json:"gcp,omitempty"`

	// IDBroker mapping source.
	// Enum: [NONE MOCK IDBMMS]
	IDBrokerMappingSource string `json:"idBrokerMappingSource,omitempty"`

	// Network related specifics of the environment.
	Network *EnvironmentNetworkV1Request `json:"network,omitempty"`

	// Security control for FreeIPA and Datalake deployment.
	SecurityAccess *SecurityAccessV1Request `json:"securityAccess,omitempty"`

	// Telemetry related specifics of the environment.
	Telemetry *TelemetryRequest `json:"telemetry,omitempty"`
}

// Validate validates this environment edit v1 request
func (m *EnvironmentEditV1Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudStorageValidation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIDBrokerMappingSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetwork(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityAccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTelemetry(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentEditV1Request) validateAuthentication(formats strfmt.Registry) error {

	if swag.IsZero(m.Authentication) { // not required
		return nil
	}

	if m.Authentication != nil {
		if err := m.Authentication.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("authentication")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

var environmentEditV1RequestTypeCloudStorageValidationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentEditV1RequestTypeCloudStorageValidationPropEnum = append(environmentEditV1RequestTypeCloudStorageValidationPropEnum, v)
	}
}

const (

	// EnvironmentEditV1RequestCloudStorageValidationENABLED captures enum value "ENABLED"
	EnvironmentEditV1RequestCloudStorageValidationENABLED string = "ENABLED"

	// EnvironmentEditV1RequestCloudStorageValidationDISABLED captures enum value "DISABLED"
	EnvironmentEditV1RequestCloudStorageValidationDISABLED string = "DISABLED"
)

// prop value enum
func (m *EnvironmentEditV1Request) validateCloudStorageValidationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentEditV1RequestTypeCloudStorageValidationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentEditV1Request) validateCloudStorageValidation(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudStorageValidation) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudStorageValidationEnum("cloudStorageValidation", "body", m.CloudStorageValidation); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

var environmentEditV1RequestTypeIDBrokerMappingSourcePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NONE","MOCK","IDBMMS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentEditV1RequestTypeIDBrokerMappingSourcePropEnum = append(environmentEditV1RequestTypeIDBrokerMappingSourcePropEnum, v)
	}
}

const (

	// EnvironmentEditV1RequestIDBrokerMappingSourceNONE captures enum value "NONE"
	EnvironmentEditV1RequestIDBrokerMappingSourceNONE string = "NONE"

	// EnvironmentEditV1RequestIDBrokerMappingSourceMOCK captures enum value "MOCK"
	EnvironmentEditV1RequestIDBrokerMappingSourceMOCK string = "MOCK"

	// EnvironmentEditV1RequestIDBrokerMappingSourceIDBMMS captures enum value "IDBMMS"
	EnvironmentEditV1RequestIDBrokerMappingSourceIDBMMS string = "IDBMMS"
)

// prop value enum
func (m *EnvironmentEditV1Request) validateIDBrokerMappingSourceEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentEditV1RequestTypeIDBrokerMappingSourcePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentEditV1Request) validateIDBrokerMappingSource(formats strfmt.Registry) error {

	if swag.IsZero(m.IDBrokerMappingSource) { // not required
		return nil
	}

	// value enum
	if err := m.validateIDBrokerMappingSourceEnum("idBrokerMappingSource", "body", m.IDBrokerMappingSource); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateNetwork(formats strfmt.Registry) error {

	if swag.IsZero(m.Network) { // not required
		return nil
	}

	if m.Network != nil {
		if err := m.Network.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("network")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateSecurityAccess(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityAccess) { // not required
		return nil
	}

	if m.SecurityAccess != nil {
		if err := m.SecurityAccess.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityAccess")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentEditV1Request) validateTelemetry(formats strfmt.Registry) error {

	if swag.IsZero(m.Telemetry) { // not required
		return nil
	}

	if m.Telemetry != nil {
		if err := m.Telemetry.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("telemetry")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentEditV1Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentEditV1Request) UnmarshalBinary(b []byte) error {
	var res EnvironmentEditV1Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
