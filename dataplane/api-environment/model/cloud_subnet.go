// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudSubnet cloud subnet
// swagger:model CloudSubnet
type CloudSubnet struct {

	// availability zone
	AvailabilityZone string `json:"availabilityZone,omitempty"`

	// cidr
	Cidr string `json:"cidr,omitempty"`

	// deployment restrictions
	// Unique: true
	DeploymentRestrictions []string `json:"deploymentRestrictions"`

	// id
	ID string `json:"id,omitempty"`

	// igw available
	IgwAvailable bool `json:"igwAvailable,omitempty"`

	// map public Ip on launch
	MapPublicIPOnLaunch bool `json:"mapPublicIpOnLaunch,omitempty"`

	// name
	Name string `json:"name,omitempty"`

	// parameters
	Parameters map[string]interface{} `json:"parameters,omitempty"`

	// private subnet
	PrivateSubnet bool `json:"privateSubnet,omitempty"`

	// type
	// Enum: [PUBLIC MLX DWX PRIVATE]
	Type string `json:"type,omitempty"`
}

// Validate validates this cloud subnet
func (m *CloudSubnet) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDeploymentRestrictions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var cloudSubnetDeploymentRestrictionsItemsEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FREEIPA","DATALAKE","DATAHUB","MLX","DEX","DFX","DWX","LIFTIE","ENDPOINT_ACCESS_GATEWAY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudSubnetDeploymentRestrictionsItemsEnum = append(cloudSubnetDeploymentRestrictionsItemsEnum, v)
	}
}

func (m *CloudSubnet) validateDeploymentRestrictionsItemsEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudSubnetDeploymentRestrictionsItemsEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudSubnet) validateDeploymentRestrictions(formats strfmt.Registry) error {

	if swag.IsZero(m.DeploymentRestrictions) { // not required
		return nil
	}

	if err := validate.UniqueItems("deploymentRestrictions", "body", m.DeploymentRestrictions); err != nil {
		return err
	}

	for i := 0; i < len(m.DeploymentRestrictions); i++ {

		// value enum
		if err := m.validateDeploymentRestrictionsItemsEnum("deploymentRestrictions"+"."+strconv.Itoa(i), "body", m.DeploymentRestrictions[i]); err != nil {
			return err
		}

	}

	return nil
}

var cloudSubnetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["PUBLIC","MLX","DWX","PRIVATE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		cloudSubnetTypeTypePropEnum = append(cloudSubnetTypeTypePropEnum, v)
	}
}

const (

	// CloudSubnetTypePUBLIC captures enum value "PUBLIC"
	CloudSubnetTypePUBLIC string = "PUBLIC"

	// CloudSubnetTypeMLX captures enum value "MLX"
	CloudSubnetTypeMLX string = "MLX"

	// CloudSubnetTypeDWX captures enum value "DWX"
	CloudSubnetTypeDWX string = "DWX"

	// CloudSubnetTypePRIVATE captures enum value "PRIVATE"
	CloudSubnetTypePRIVATE string = "PRIVATE"
)

// prop value enum
func (m *CloudSubnet) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, cloudSubnetTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CloudSubnet) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudSubnet) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudSubnet) UnmarshalBinary(b []byte) error {
	var res CloudSubnet
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
