// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialViewV1Response Credential view of the environment that does not contain secrets.
// swagger:model CredentialViewV1Response
type CredentialViewV1Response struct {

	// type of cloud provider
	// Required: true
	CloudPlatform *string `json:"cloudPlatform"`

	// crn of the creator
	Creator string `json:"creator,omitempty"`

	// global identifiers of the resource
	Crn string `json:"crn,omitempty"`

	// description of the resource
	Description string `json:"description,omitempty"`

	// name of the resource
	Name string `json:"name,omitempty"`

	// type of credential
	// Enum: [ENVIRONMENT AUDIT]
	Type string `json:"type,omitempty"`

	// verification status text for credential, if empty then there is no verification issue
	VerificationStatusText string `json:"verificationStatusText,omitempty"`
}

// Validate validates this credential view v1 response
func (m *CredentialViewV1Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudPlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CredentialViewV1Response) validateCloudPlatform(formats strfmt.Registry) error {

	if err := validate.Required("cloudPlatform", "body", m.CloudPlatform); err != nil {
		return err
	}

	return nil
}

var credentialViewV1ResponseTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENVIRONMENT","AUDIT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialViewV1ResponseTypeTypePropEnum = append(credentialViewV1ResponseTypeTypePropEnum, v)
	}
}

const (

	// CredentialViewV1ResponseTypeENVIRONMENT captures enum value "ENVIRONMENT"
	CredentialViewV1ResponseTypeENVIRONMENT string = "ENVIRONMENT"

	// CredentialViewV1ResponseTypeAUDIT captures enum value "AUDIT"
	CredentialViewV1ResponseTypeAUDIT string = "AUDIT"
)

// prop value enum
func (m *CredentialViewV1Response) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, credentialViewV1ResponseTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CredentialViewV1Response) validateType(formats strfmt.Registry) error {

	if swag.IsZero(m.Type) { // not required
		return nil
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CredentialViewV1Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialViewV1Response) UnmarshalBinary(b []byte) error {
	var res CredentialViewV1Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
