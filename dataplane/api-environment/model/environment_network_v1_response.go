// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentNetworkV1Response environment network v1 response
// swagger:model EnvironmentNetworkV1Response
type EnvironmentNetworkV1Response struct {

	// Subnet ids of the specified networks
	Aws *EnvironmentNetworkAwsV1Params `json:"aws,omitempty"`

	// Subnet ids of the specified networks
	Azure *EnvironmentNetworkAzureV1Params `json:"azure,omitempty"`

	// Subnet metadata of CB subnets, union of the DWX and public subnets
	CbSubnets map[string]CloudSubnet `json:"cbSubnets,omitempty"`

	// id of the resource
	Crn string `json:"crn,omitempty"`

	// Subnet metadata of DWX subnets
	DwxSubnets map[string]CloudSubnet `json:"dwxSubnets,omitempty"`

	// The existing network is created by the user, otherwise created by the Cloudbreak.
	ExistingNetwork bool `json:"existingNetwork,omitempty"`

	// Subnet metadata of MLX subnets
	MlxSubnets map[string]CloudSubnet `json:"mlxSubnets,omitempty"`

	// Mock parameters
	Mock *EnvironmentNetworkMockV1Params `json:"mock,omitempty"`

	// name of the resource
	// Required: true
	Name *string `json:"name"`

	// network cidr
	// Max Length: 255
	// Min Length: 0
	NetworkCidr *string `json:"networkCidr,omitempty"`

	// The network cidrs for the configured vpc
	// Unique: true
	NetworkCidrs []string `json:"networkCidrs"`

	// A flag to enable or disable the outbound internet traffic from the instances.
	// Enum: [ENABLED DISABLED]
	OutboundInternetTraffic string `json:"outboundInternetTraffic,omitempty"`

	// The subnet in which resource should be deployed if not specified by user
	PreferedSubnetID string `json:"preferedSubnetId,omitempty"`

	// A flag to enable or disable the private subnet creation.
	// Enum: [ENABLED DISABLED]
	PrivateSubnetCreation string `json:"privateSubnetCreation,omitempty"`

	// A flag to enable or disable the service endpoint creation.
	// Enum: [ENABLED DISABLED]
	ServiceEndpointCreation string `json:"serviceEndpointCreation,omitempty"`

	// Subnet ids of the specified networks
	// Unique: true
	SubnetIds []string `json:"subnetIds"`

	// Subnet metadata of the specified networks
	SubnetMetas map[string]CloudSubnet `json:"subnetMetas,omitempty"`

	// Yarn parameters
	Yarn *EnvironmentNetworkYarnV1Params `json:"yarn,omitempty"`
}

// Validate validates this environment network v1 response
func (m *EnvironmentNetworkV1Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCbSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDwxSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMlxSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMock(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkCidr(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkCidrs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOutboundInternetTraffic(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivateSubnetCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceEndpointCreation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetMetas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateYarn(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentNetworkV1Response) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateCbSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.CbSubnets) { // not required
		return nil
	}

	for k := range m.CbSubnets {

		if err := validate.Required("cbSubnets"+"."+k, "body", m.CbSubnets[k]); err != nil {
			return err
		}
		if val, ok := m.CbSubnets[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateDwxSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.DwxSubnets) { // not required
		return nil
	}

	for k := range m.DwxSubnets {

		if err := validate.Required("dwxSubnets"+"."+k, "body", m.DwxSubnets[k]); err != nil {
			return err
		}
		if val, ok := m.DwxSubnets[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateMlxSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.MlxSubnets) { // not required
		return nil
	}

	for k := range m.MlxSubnets {

		if err := validate.Required("mlxSubnets"+"."+k, "body", m.MlxSubnets[k]); err != nil {
			return err
		}
		if val, ok := m.MlxSubnets[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateMock(formats strfmt.Registry) error {

	if swag.IsZero(m.Mock) { // not required
		return nil
	}

	if m.Mock != nil {
		if err := m.Mock.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mock")
			}
			return err
		}
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateNetworkCidr(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkCidr) { // not required
		return nil
	}

	if err := validate.MinLength("networkCidr", "body", string(*m.NetworkCidr), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("networkCidr", "body", string(*m.NetworkCidr), 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateNetworkCidrs(formats strfmt.Registry) error {

	if swag.IsZero(m.NetworkCidrs) { // not required
		return nil
	}

	if err := validate.UniqueItems("networkCidrs", "body", m.NetworkCidrs); err != nil {
		return err
	}

	return nil
}

var environmentNetworkV1ResponseTypeOutboundInternetTrafficPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentNetworkV1ResponseTypeOutboundInternetTrafficPropEnum = append(environmentNetworkV1ResponseTypeOutboundInternetTrafficPropEnum, v)
	}
}

const (

	// EnvironmentNetworkV1ResponseOutboundInternetTrafficENABLED captures enum value "ENABLED"
	EnvironmentNetworkV1ResponseOutboundInternetTrafficENABLED string = "ENABLED"

	// EnvironmentNetworkV1ResponseOutboundInternetTrafficDISABLED captures enum value "DISABLED"
	EnvironmentNetworkV1ResponseOutboundInternetTrafficDISABLED string = "DISABLED"
)

// prop value enum
func (m *EnvironmentNetworkV1Response) validateOutboundInternetTrafficEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentNetworkV1ResponseTypeOutboundInternetTrafficPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentNetworkV1Response) validateOutboundInternetTraffic(formats strfmt.Registry) error {

	if swag.IsZero(m.OutboundInternetTraffic) { // not required
		return nil
	}

	// value enum
	if err := m.validateOutboundInternetTrafficEnum("outboundInternetTraffic", "body", m.OutboundInternetTraffic); err != nil {
		return err
	}

	return nil
}

var environmentNetworkV1ResponseTypePrivateSubnetCreationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentNetworkV1ResponseTypePrivateSubnetCreationPropEnum = append(environmentNetworkV1ResponseTypePrivateSubnetCreationPropEnum, v)
	}
}

const (

	// EnvironmentNetworkV1ResponsePrivateSubnetCreationENABLED captures enum value "ENABLED"
	EnvironmentNetworkV1ResponsePrivateSubnetCreationENABLED string = "ENABLED"

	// EnvironmentNetworkV1ResponsePrivateSubnetCreationDISABLED captures enum value "DISABLED"
	EnvironmentNetworkV1ResponsePrivateSubnetCreationDISABLED string = "DISABLED"
)

// prop value enum
func (m *EnvironmentNetworkV1Response) validatePrivateSubnetCreationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentNetworkV1ResponseTypePrivateSubnetCreationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentNetworkV1Response) validatePrivateSubnetCreation(formats strfmt.Registry) error {

	if swag.IsZero(m.PrivateSubnetCreation) { // not required
		return nil
	}

	// value enum
	if err := m.validatePrivateSubnetCreationEnum("privateSubnetCreation", "body", m.PrivateSubnetCreation); err != nil {
		return err
	}

	return nil
}

var environmentNetworkV1ResponseTypeServiceEndpointCreationPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentNetworkV1ResponseTypeServiceEndpointCreationPropEnum = append(environmentNetworkV1ResponseTypeServiceEndpointCreationPropEnum, v)
	}
}

const (

	// EnvironmentNetworkV1ResponseServiceEndpointCreationENABLED captures enum value "ENABLED"
	EnvironmentNetworkV1ResponseServiceEndpointCreationENABLED string = "ENABLED"

	// EnvironmentNetworkV1ResponseServiceEndpointCreationDISABLED captures enum value "DISABLED"
	EnvironmentNetworkV1ResponseServiceEndpointCreationDISABLED string = "DISABLED"
)

// prop value enum
func (m *EnvironmentNetworkV1Response) validateServiceEndpointCreationEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentNetworkV1ResponseTypeServiceEndpointCreationPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentNetworkV1Response) validateServiceEndpointCreation(formats strfmt.Registry) error {

	if swag.IsZero(m.ServiceEndpointCreation) { // not required
		return nil
	}

	// value enum
	if err := m.validateServiceEndpointCreationEnum("serviceEndpointCreation", "body", m.ServiceEndpointCreation); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateSubnetIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("subnetIds", "body", m.SubnetIds); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateSubnetMetas(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetMetas) { // not required
		return nil
	}

	for k := range m.SubnetMetas {

		if err := validate.Required("subnetMetas"+"."+k, "body", m.SubnetMetas[k]); err != nil {
			return err
		}
		if val, ok := m.SubnetMetas[k]; ok {
			if err := val.Validate(formats); err != nil {
				return err
			}
		}

	}

	return nil
}

func (m *EnvironmentNetworkV1Response) validateYarn(formats strfmt.Registry) error {

	if swag.IsZero(m.Yarn) { // not required
		return nil
	}

	if m.Yarn != nil {
		if err := m.Yarn.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("yarn")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentNetworkV1Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentNetworkV1Response) UnmarshalBinary(b []byte) error {
	var res EnvironmentNetworkV1Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
