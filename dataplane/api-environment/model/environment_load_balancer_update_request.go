// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentLoadBalancerUpdateRequest environment load balancer update request
// swagger:model EnvironmentLoadBalancerUpdateRequest
type EnvironmentLoadBalancerUpdateRequest struct {

	// A flag to enable the Public Endpoint Access Gateway, which provides public UI/API access to private data lakes and data hubs.
	// Enum: [ENABLED DISABLED]
	PublicEndpointAccessGateway string `json:"publicEndpointAccessGateway,omitempty"`

	// Subnet ids for the Public Endpoint Access Gateway. If provided, these are the subnets that will be used to create a public Knox endpoint for out-of-network UI/API access. If not provided, public subnets will be selected from the subnet list provided for environment creation. (Optional)
	// Unique: true
	SubnetIds []string `json:"subnetIds"`
}

// Validate validates this environment load balancer update request
func (m *EnvironmentLoadBalancerUpdateRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePublicEndpointAccessGateway(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnetIds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var environmentLoadBalancerUpdateRequestTypePublicEndpointAccessGatewayPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		environmentLoadBalancerUpdateRequestTypePublicEndpointAccessGatewayPropEnum = append(environmentLoadBalancerUpdateRequestTypePublicEndpointAccessGatewayPropEnum, v)
	}
}

const (

	// EnvironmentLoadBalancerUpdateRequestPublicEndpointAccessGatewayENABLED captures enum value "ENABLED"
	EnvironmentLoadBalancerUpdateRequestPublicEndpointAccessGatewayENABLED string = "ENABLED"

	// EnvironmentLoadBalancerUpdateRequestPublicEndpointAccessGatewayDISABLED captures enum value "DISABLED"
	EnvironmentLoadBalancerUpdateRequestPublicEndpointAccessGatewayDISABLED string = "DISABLED"
)

// prop value enum
func (m *EnvironmentLoadBalancerUpdateRequest) validatePublicEndpointAccessGatewayEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, environmentLoadBalancerUpdateRequestTypePublicEndpointAccessGatewayPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *EnvironmentLoadBalancerUpdateRequest) validatePublicEndpointAccessGateway(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicEndpointAccessGateway) { // not required
		return nil
	}

	// value enum
	if err := m.validatePublicEndpointAccessGatewayEnum("publicEndpointAccessGateway", "body", m.PublicEndpointAccessGateway); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentLoadBalancerUpdateRequest) validateSubnetIds(formats strfmt.Registry) error {

	if swag.IsZero(m.SubnetIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("subnetIds", "body", m.SubnetIds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentLoadBalancerUpdateRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentLoadBalancerUpdateRequest) UnmarshalBinary(b []byte) error {
	var res EnvironmentLoadBalancerUpdateRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
