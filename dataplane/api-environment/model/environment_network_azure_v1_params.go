// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EnvironmentNetworkAzureV1Params environment network azure v1 params
// swagger:model EnvironmentNetworkAzureV1Params
type EnvironmentNetworkAzureV1Params struct {

	// Full resource ID of an existing Azure private DNS zone for a private AKS cluster
	// Max Length: 255
	// Min Length: 0
	AksPrivateDNSZoneID *string `json:"aksPrivateDnsZoneId,omitempty"`

	// Full resource ID of an existing Azure private DNS zone
	// Max Length: 255
	// Min Length: 0
	DatabasePrivateDNSZoneID *string `json:"databasePrivateDnsZoneId,omitempty"`

	// Azure Network ID of the specified network
	// Required: true
	// Max Length: 255
	// Min Length: 0
	NetworkID *string `json:"networkId"`

	// Flag that marks the request to not create an outbound load balancer
	NoOutboundLoadBalancer bool `json:"noOutboundLoadBalancer,omitempty"`

	// Azure Network is private if this flag is true
	// Required: true
	NoPublicIP *bool `json:"noPublicIp"`

	// Azure Resource Group Name of the specified network
	// Required: true
	// Max Length: 255
	// Min Length: 0
	ResourceGroupName *string `json:"resourceGroupName"`
}

// Validate validates this environment network azure v1 params
func (m *EnvironmentNetworkAzureV1Params) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAksPrivateDNSZoneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabasePrivateDNSZoneID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNetworkID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNoPublicIP(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceGroupName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EnvironmentNetworkAzureV1Params) validateAksPrivateDNSZoneID(formats strfmt.Registry) error {

	if swag.IsZero(m.AksPrivateDNSZoneID) { // not required
		return nil
	}

	if err := validate.MinLength("aksPrivateDnsZoneId", "body", string(*m.AksPrivateDNSZoneID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("aksPrivateDnsZoneId", "body", string(*m.AksPrivateDNSZoneID), 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkAzureV1Params) validateDatabasePrivateDNSZoneID(formats strfmt.Registry) error {

	if swag.IsZero(m.DatabasePrivateDNSZoneID) { // not required
		return nil
	}

	if err := validate.MinLength("databasePrivateDnsZoneId", "body", string(*m.DatabasePrivateDNSZoneID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("databasePrivateDnsZoneId", "body", string(*m.DatabasePrivateDNSZoneID), 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkAzureV1Params) validateNetworkID(formats strfmt.Registry) error {

	if err := validate.Required("networkId", "body", m.NetworkID); err != nil {
		return err
	}

	if err := validate.MinLength("networkId", "body", string(*m.NetworkID), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("networkId", "body", string(*m.NetworkID), 255); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkAzureV1Params) validateNoPublicIP(formats strfmt.Registry) error {

	if err := validate.Required("noPublicIp", "body", m.NoPublicIP); err != nil {
		return err
	}

	return nil
}

func (m *EnvironmentNetworkAzureV1Params) validateResourceGroupName(formats strfmt.Registry) error {

	if err := validate.Required("resourceGroupName", "body", m.ResourceGroupName); err != nil {
		return err
	}

	if err := validate.MinLength("resourceGroupName", "body", string(*m.ResourceGroupName), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("resourceGroupName", "body", string(*m.ResourceGroupName), 255); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EnvironmentNetworkAzureV1Params) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EnvironmentNetworkAzureV1Params) UnmarshalBinary(b []byte) error {
	var res EnvironmentNetworkAzureV1Params
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
