// Code generated by go-swagger; DO NOT EDIT.

package v1events

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetEventsInAccountParams creates a new GetEventsInAccountParams object
// with the default values initialized.
func NewGetEventsInAccountParams() *GetEventsInAccountParams {
	var ()
	return &GetEventsInAccountParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsInAccountParamsWithTimeout creates a new GetEventsInAccountParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetEventsInAccountParamsWithTimeout(timeout time.Duration) *GetEventsInAccountParams {
	var ()
	return &GetEventsInAccountParams{

		timeout: timeout,
	}
}

// NewGetEventsInAccountParamsWithContext creates a new GetEventsInAccountParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetEventsInAccountParamsWithContext(ctx context.Context) *GetEventsInAccountParams {
	var ()
	return &GetEventsInAccountParams{

		Context: ctx,
	}
}

// NewGetEventsInAccountParamsWithHTTPClient creates a new GetEventsInAccountParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetEventsInAccountParamsWithHTTPClient(client *http.Client) *GetEventsInAccountParams {
	var ()
	return &GetEventsInAccountParams{
		HTTPClient: client,
	}
}

/*GetEventsInAccountParams contains all the parameters to send to the API endpoint
for the get events in account operation typically these are written to a http.Request
*/
type GetEventsInAccountParams struct {

	/*Since*/
	Since *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get events in account params
func (o *GetEventsInAccountParams) WithTimeout(timeout time.Duration) *GetEventsInAccountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events in account params
func (o *GetEventsInAccountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events in account params
func (o *GetEventsInAccountParams) WithContext(ctx context.Context) *GetEventsInAccountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events in account params
func (o *GetEventsInAccountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events in account params
func (o *GetEventsInAccountParams) WithHTTPClient(client *http.Client) *GetEventsInAccountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events in account params
func (o *GetEventsInAccountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithSince adds the since to the get events in account params
func (o *GetEventsInAccountParams) WithSince(since *int64) *GetEventsInAccountParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get events in account params
func (o *GetEventsInAccountParams) SetSince(since *int64) {
	o.Since = since
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsInAccountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
