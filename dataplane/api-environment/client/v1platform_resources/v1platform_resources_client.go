// Code generated by go-swagger; DO NOT EDIT.

package v1platform_resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1platform resources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1platform resources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAccessConfigs retrieves access configs with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetAccessConfigs(params *GetAccessConfigsParams) (*GetAccessConfigsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAccessConfigsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getAccessConfigs",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/access_configs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetAccessConfigsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAccessConfigsOK), nil

}

/*
GetDisktypes retrieves available disk types

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetDisktypes(params *GetDisktypesParams) (*GetDisktypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDisktypesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDisktypes",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/disk_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDisktypesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDisktypesOK), nil

}

/*
GetEncryptionKeys retrieves encryption keys with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetEncryptionKeys(params *GetEncryptionKeysParams) (*GetEncryptionKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetEncryptionKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getEncryptionKeys",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/encryption_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetEncryptionKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetEncryptionKeysOK), nil

}

/*
GetGatewaysCredentialID retrieves gateways with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetGatewaysCredentialID(params *GetGatewaysCredentialIDParams) (*GetGatewaysCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetGatewaysCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getGatewaysCredentialId",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/gateways",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetGatewaysCredentialIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetGatewaysCredentialIDOK), nil

}

/*
GetIPPoolsCredentialID retrieves ip pools with properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetIPPoolsCredentialID(params *GetIPPoolsCredentialIDParams) (*GetIPPoolsCredentialIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetIPPoolsCredentialIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getIpPoolsCredentialId",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/ip_pools",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetIPPoolsCredentialIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetIPPoolsCredentialIDOK), nil

}

/*
GetNoSQLTables retrieves nosql tables

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetNoSQLTables(params *GetNoSQLTablesParams) (*GetNoSQLTablesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNoSQLTablesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getNoSqlTables",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/nosql_tables",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetNoSQLTablesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetNoSQLTablesOK), nil

}

/*
GetPlatformNetworks retrieves network properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformNetworks(params *GetPlatformNetworksParams) (*GetPlatformNetworksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformNetworksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformNetworks",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/networks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformNetworksReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformNetworksOK), nil

}

/*
GetPlatformSShKeys retrieves sshkeys properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformSShKeys(params *GetPlatformSShKeysParams) (*GetPlatformSShKeysOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformSShKeysParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformSShKeys",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/ssh_keys",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformSShKeysReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformSShKeysOK), nil

}

/*
GetPlatformSecurityGroups retrieves securitygroups properties

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetPlatformSecurityGroups(params *GetPlatformSecurityGroupsParams) (*GetPlatformSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPlatformSecurityGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPlatformSecurityGroups",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/security_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPlatformSecurityGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPlatformSecurityGroupsOK), nil

}

/*
GetRegionsByCredential retrieves regions by type

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetRegionsByCredential(params *GetRegionsByCredentialParams) (*GetRegionsByCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRegionsByCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getRegionsByCredential",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/regions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetRegionsByCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetRegionsByCredentialOK), nil

}

/*
GetResourceGroups retrieves resource groups

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetResourceGroups(params *GetResourceGroupsParams) (*GetResourceGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetResourceGroupsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getResourceGroups",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/resource_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetResourceGroupsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetResourceGroupsOK), nil

}

/*
GetTagSpecifications retrieves tag specifications

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetTagSpecifications(params *GetTagSpecificationsParams) (*GetTagSpecificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTagSpecificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getTagSpecifications",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/tag_specifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetTagSpecificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetTagSpecificationsOK), nil

}

/*
GetVMTypesByCredential retrieves vmtype properties by credential

Each cloud provider has it's own specific resources like instance types and disk types. These endpoints are collecting them.
*/
func (a *Client) GetVMTypesByCredential(params *GetVMTypesByCredentialParams) (*GetVMTypesByCredentialOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetVMTypesByCredentialParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getVmTypesByCredential",
		Method:             "GET",
		PathPattern:        "/v1/platform_resources/machine_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetVMTypesByCredentialReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetVMTypesByCredentialOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
