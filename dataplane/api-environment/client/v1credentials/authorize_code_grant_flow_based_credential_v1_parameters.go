// Code generated by go-swagger; DO NOT EDIT.

package v1credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAuthorizeCodeGrantFlowBasedCredentialV1Params creates a new AuthorizeCodeGrantFlowBasedCredentialV1Params object
// with the default values initialized.
func NewAuthorizeCodeGrantFlowBasedCredentialV1Params() *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	var ()
	return &AuthorizeCodeGrantFlowBasedCredentialV1Params{

		timeout: cr.DefaultTimeout,
	}
}

// NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithTimeout creates a new AuthorizeCodeGrantFlowBasedCredentialV1Params object
// with the default values initialized, and the ability to set a timeout on a request
func NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithTimeout(timeout time.Duration) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	var ()
	return &AuthorizeCodeGrantFlowBasedCredentialV1Params{

		timeout: timeout,
	}
}

// NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithContext creates a new AuthorizeCodeGrantFlowBasedCredentialV1Params object
// with the default values initialized, and the ability to set a context for a request
func NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithContext(ctx context.Context) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	var ()
	return &AuthorizeCodeGrantFlowBasedCredentialV1Params{

		Context: ctx,
	}
}

// NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithHTTPClient creates a new AuthorizeCodeGrantFlowBasedCredentialV1Params object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAuthorizeCodeGrantFlowBasedCredentialV1ParamsWithHTTPClient(client *http.Client) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	var ()
	return &AuthorizeCodeGrantFlowBasedCredentialV1Params{
		HTTPClient: client,
	}
}

/*AuthorizeCodeGrantFlowBasedCredentialV1Params contains all the parameters to send to the API endpoint
for the authorize code grant flow based credential v1 operation typically these are written to a http.Request
*/
type AuthorizeCodeGrantFlowBasedCredentialV1Params struct {

	/*CloudPlatform*/
	CloudPlatform string
	/*Code*/
	Code *string
	/*State*/
	State *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithTimeout(timeout time.Duration) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithContext(ctx context.Context) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithHTTPClient(client *http.Client) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCloudPlatform adds the cloudPlatform to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithCloudPlatform(cloudPlatform string) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetCloudPlatform(cloudPlatform)
	return o
}

// SetCloudPlatform adds the cloudPlatform to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetCloudPlatform(cloudPlatform string) {
	o.CloudPlatform = cloudPlatform
}

// WithCode adds the code to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithCode(code *string) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetCode(code)
	return o
}

// SetCode adds the code to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetCode(code *string) {
	o.Code = code
}

// WithState adds the state to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WithState(state *string) *AuthorizeCodeGrantFlowBasedCredentialV1Params {
	o.SetState(state)
	return o
}

// SetState adds the state to the authorize code grant flow based credential v1 params
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) SetState(state *string) {
	o.State = state
}

// WriteToRequest writes these params to a swagger request
func (o *AuthorizeCodeGrantFlowBasedCredentialV1Params) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param cloudPlatform
	if err := r.SetPathParam("cloudPlatform", o.CloudPlatform); err != nil {
		return err
	}

	if o.Code != nil {

		// query param code
		var qrCode string
		if o.Code != nil {
			qrCode = *o.Code
		}
		qCode := qrCode
		if qCode != "" {
			if err := r.SetQueryParam("code", qCode); err != nil {
				return err
			}
		}

	}

	if o.State != nil {

		// query param state
		var qrState string
		if o.State != nil {
			qrState = *o.State
		}
		qState := qrState
		if qState != "" {
			if err := r.SetQueryParam("state", qState); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
