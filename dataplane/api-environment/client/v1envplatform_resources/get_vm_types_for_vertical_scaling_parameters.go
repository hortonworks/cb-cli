// Code generated by go-swagger; DO NOT EDIT.

package v1envplatform_resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetVMTypesForVerticalScalingParams creates a new GetVMTypesForVerticalScalingParams object
// with the default values initialized.
func NewGetVMTypesForVerticalScalingParams() *GetVMTypesForVerticalScalingParams {
	var ()
	return &GetVMTypesForVerticalScalingParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetVMTypesForVerticalScalingParamsWithTimeout creates a new GetVMTypesForVerticalScalingParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetVMTypesForVerticalScalingParamsWithTimeout(timeout time.Duration) *GetVMTypesForVerticalScalingParams {
	var ()
	return &GetVMTypesForVerticalScalingParams{

		timeout: timeout,
	}
}

// NewGetVMTypesForVerticalScalingParamsWithContext creates a new GetVMTypesForVerticalScalingParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetVMTypesForVerticalScalingParamsWithContext(ctx context.Context) *GetVMTypesForVerticalScalingParams {
	var ()
	return &GetVMTypesForVerticalScalingParams{

		Context: ctx,
	}
}

// NewGetVMTypesForVerticalScalingParamsWithHTTPClient creates a new GetVMTypesForVerticalScalingParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetVMTypesForVerticalScalingParamsWithHTTPClient(client *http.Client) *GetVMTypesForVerticalScalingParams {
	var ()
	return &GetVMTypesForVerticalScalingParams{
		HTTPClient: client,
	}
}

/*
GetVMTypesForVerticalScalingParams contains all the parameters to send to the API endpoint
for the get Vm types for vertical scaling operation typically these are written to a http.Request
*/
type GetVMTypesForVerticalScalingParams struct {

	/*EnvironmentCrn*/
	EnvironmentCrn *string
	/*InstanceType*/
	InstanceType *string
	/*ResourceType*/
	ResourceType *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithTimeout(timeout time.Duration) *GetVMTypesForVerticalScalingParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithContext(ctx context.Context) *GetVMTypesForVerticalScalingParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithHTTPClient(client *http.Client) *GetVMTypesForVerticalScalingParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentCrn adds the environmentCrn to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithEnvironmentCrn(environmentCrn *string) *GetVMTypesForVerticalScalingParams {
	o.SetEnvironmentCrn(environmentCrn)
	return o
}

// SetEnvironmentCrn adds the environmentCrn to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetEnvironmentCrn(environmentCrn *string) {
	o.EnvironmentCrn = environmentCrn
}

// WithInstanceType adds the instanceType to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithInstanceType(instanceType *string) *GetVMTypesForVerticalScalingParams {
	o.SetInstanceType(instanceType)
	return o
}

// SetInstanceType adds the instanceType to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetInstanceType(instanceType *string) {
	o.InstanceType = instanceType
}

// WithResourceType adds the resourceType to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) WithResourceType(resourceType *string) *GetVMTypesForVerticalScalingParams {
	o.SetResourceType(resourceType)
	return o
}

// SetResourceType adds the resourceType to the get Vm types for vertical scaling params
func (o *GetVMTypesForVerticalScalingParams) SetResourceType(resourceType *string) {
	o.ResourceType = resourceType
}

// WriteToRequest writes these params to a swagger request
func (o *GetVMTypesForVerticalScalingParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.EnvironmentCrn != nil {

		// query param environmentCrn
		var qrEnvironmentCrn string
		if o.EnvironmentCrn != nil {
			qrEnvironmentCrn = *o.EnvironmentCrn
		}
		qEnvironmentCrn := qrEnvironmentCrn
		if qEnvironmentCrn != "" {
			if err := r.SetQueryParam("environmentCrn", qEnvironmentCrn); err != nil {
				return err
			}
		}

	}

	if o.InstanceType != nil {

		// query param instanceType
		var qrInstanceType string
		if o.InstanceType != nil {
			qrInstanceType = *o.InstanceType
		}
		qInstanceType := qrInstanceType
		if qInstanceType != "" {
			if err := r.SetQueryParam("instanceType", qInstanceType); err != nil {
				return err
			}
		}

	}

	if o.ResourceType != nil {

		// query param resourceType
		var qrResourceType string
		if o.ResourceType != nil {
			qrResourceType = *o.ResourceType
		}
		qResourceType := qrResourceType
		if qResourceType != "" {
			if err := r.SetQueryParam("resourceType", qResourceType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
