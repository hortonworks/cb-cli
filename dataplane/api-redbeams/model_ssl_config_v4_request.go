/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the SslConfigV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SslConfigV4Request{}

// SslConfigV4Request Request for the SSL config of a database server
type SslConfigV4Request struct {
	// SSL enforcement mode for the database server
	SslMode *string `json:"sslMode,omitempty"`
}

// NewSslConfigV4Request instantiates a new SslConfigV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSslConfigV4Request() *SslConfigV4Request {
	this := SslConfigV4Request{}
	return &this
}

// NewSslConfigV4RequestWithDefaults instantiates a new SslConfigV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSslConfigV4RequestWithDefaults() *SslConfigV4Request {
	this := SslConfigV4Request{}
	return &this
}

// GetSslMode returns the SslMode field value if set, zero value otherwise.
func (o *SslConfigV4Request) GetSslMode() string {
	if o == nil || isNil(o.SslMode) {
		var ret string
		return ret
	}
	return *o.SslMode
}

// GetSslModeOk returns a tuple with the SslMode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SslConfigV4Request) GetSslModeOk() (*string, bool) {
	if o == nil || isNil(o.SslMode) {
		return nil, false
	}
	return o.SslMode, true
}

// HasSslMode returns a boolean if a field has been set.
func (o *SslConfigV4Request) HasSslMode() bool {
	if o != nil && !isNil(o.SslMode) {
		return true
	}

	return false
}

// SetSslMode gets a reference to the given string and assigns it to the SslMode field.
func (o *SslConfigV4Request) SetSslMode(v string) {
	o.SslMode = &v
}

func (o SslConfigV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SslConfigV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SslMode) {
		toSerialize["sslMode"] = o.SslMode
	}
	return toSerialize, nil
}

type NullableSslConfigV4Request struct {
	value *SslConfigV4Request
	isSet bool
}

func (v NullableSslConfigV4Request) Get() *SslConfigV4Request {
	return v.value
}

func (v *NullableSslConfigV4Request) Set(val *SslConfigV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableSslConfigV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableSslConfigV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSslConfigV4Request(val *SslConfigV4Request) *NullableSslConfigV4Request {
	return &NullableSslConfigV4Request{value: val, isSet: true}
}

func (v NullableSslConfigV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSslConfigV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
