/*
Redbeams API

Testing DatabaseServersApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DatabaseServersApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DatabaseServersApiService CreateDatabaseOnServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.CreateDatabaseOnServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService CreateDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.CreateDatabaseServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService CreateDatabaseServerInternal", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.CreateDatabaseServerInternal(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService DeleteDatabaseServerByCrn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		resp, httpRes, err := apiClient.DatabaseServersApi.DeleteDatabaseServerByCrn(context.Background(), crn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService DeleteDatabaseServerByName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.DatabaseServersApi.DeleteDatabaseServerByName(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService DeleteMultipleDatabaseServersByCrn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.DeleteMultipleDatabaseServersByCrn(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService GetDatabaseServerByClusterCrn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var clusterCrn string

		resp, httpRes, err := apiClient.DatabaseServersApi.GetDatabaseServerByClusterCrn(context.Background(), clusterCrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService GetDatabaseServerByCrn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		resp, httpRes, err := apiClient.DatabaseServersApi.GetDatabaseServerByCrn(context.Background(), crn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService GetDatabaseServerByName", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var name string

		resp, httpRes, err := apiClient.DatabaseServersApi.GetDatabaseServerByName(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService GetUsedSubnetsByEnvironment", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.GetUsedSubnetsByEnvironment(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService ListDatabaseServers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.ListDatabaseServers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService RegisterDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.RegisterDatabaseServer(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService ReleaseManagedDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		resp, httpRes, err := apiClient.DatabaseServersApi.ReleaseManagedDatabaseServer(context.Background(), crn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService StartDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		httpRes, err := apiClient.DatabaseServersApi.StartDatabaseServer(context.Background(), crn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService StopDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		httpRes, err := apiClient.DatabaseServersApi.StopDatabaseServer(context.Background(), crn).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService TestDatabaseServerConnection", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DatabaseServersApi.TestDatabaseServerConnection(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService UpdateClusterCrn", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		httpRes, err := apiClient.DatabaseServersApi.UpdateClusterCrn(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService UpgradeDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		resp, httpRes, err := apiClient.DatabaseServersApi.UpgradeDatabaseServer(context.Background(), crn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DatabaseServersApiService ValidateUpgradeDatabaseServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var crn string

		resp, httpRes, err := apiClient.DatabaseServersApi.ValidateUpgradeDatabaseServer(context.Background(), crn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
