/*
Redbeams API

Testing FlowApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_FlowApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlowApiService GetFlowChainsStatusesByChainIds1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlowApi.GetFlowChainsStatusesByChainIds1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetFlowLogsByFlowId1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flowId string

		resp, httpRes, err := apiClient.FlowApi.GetFlowLogsByFlowId1(context.Background(), flowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetFlowLogsByFlowIds1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.FlowApi.GetFlowLogsByFlowIds1(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetFlowLogsByResourceCrn1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var resourceCrn string

		resp, httpRes, err := apiClient.FlowApi.GetFlowLogsByResourceCrn1(context.Background(), resourceCrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetFlowLogsByResourceName1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var resourceName string

		resp, httpRes, err := apiClient.FlowApi.GetFlowLogsByResourceName1(context.Background(), resourceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetLastFlowById1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flowId string

		resp, httpRes, err := apiClient.FlowApi.GetLastFlowById1(context.Background(), flowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetLastFlowByResourceCrn1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var resourceCrn string

		resp, httpRes, err := apiClient.FlowApi.GetLastFlowByResourceCrn1(context.Background(), resourceCrn).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService GetLastFlowByResourceName1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var resourceName string

		resp, httpRes, err := apiClient.FlowApi.GetLastFlowByResourceName1(context.Background(), resourceName).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService HasFlowRunningByChainId1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var chainId string

		resp, httpRes, err := apiClient.FlowApi.HasFlowRunningByChainId1(context.Background(), chainId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowApiService HasFlowRunningByFlowId1", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var flowId string

		resp, httpRes, err := apiClient.FlowApi.HasFlowRunningByFlowId1(context.Background(), flowId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
