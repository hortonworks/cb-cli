/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// FlowPublicApiService FlowPublicApi service
type FlowPublicApiService service

type ApiHasFlowRunningByChainIdAndResourceCrnRequest struct {
	ctx         context.Context
	ApiService  *FlowPublicApiService
	chainId     string
	resourceCrn *string
}

func (r ApiHasFlowRunningByChainIdAndResourceCrnRequest) ResourceCrn(resourceCrn string) ApiHasFlowRunningByChainIdAndResourceCrnRequest {
	r.resourceCrn = &resourceCrn
	return r
}

func (r ApiHasFlowRunningByChainIdAndResourceCrnRequest) Execute() (*FlowCheckResponse, *http.Response, error) {
	return r.ApiService.HasFlowRunningByChainIdAndResourceCrnExecute(r)
}

/*
HasFlowRunningByChainIdAndResourceCrn Check if there is a running flow for chain id and resourceCrn

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chainId
	@return ApiHasFlowRunningByChainIdAndResourceCrnRequest
*/
func (a *FlowPublicApiService) HasFlowRunningByChainIdAndResourceCrn(ctx context.Context, chainId string) ApiHasFlowRunningByChainIdAndResourceCrnRequest {
	return ApiHasFlowRunningByChainIdAndResourceCrnRequest{
		ApiService: a,
		ctx:        ctx,
		chainId:    chainId,
	}
}

// Execute executes the request
//
//	@return FlowCheckResponse
func (a *FlowPublicApiService) HasFlowRunningByChainIdAndResourceCrnExecute(r ApiHasFlowRunningByChainIdAndResourceCrnRequest) (*FlowCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowPublicApiService.HasFlowRunningByChainIdAndResourceCrn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow-public/check/chainId/{chainId}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainId"+"}", url.PathEscape(parameterValueToString(r.chainId, "chainId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resourceCrn != nil {
		parameterAddToQuery(localVarQueryParams, "resourceCrn", r.resourceCrn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowCheckResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHasFlowRunningByFlowIdAndResourceCrnRequest struct {
	ctx         context.Context
	ApiService  *FlowPublicApiService
	flowId      string
	resourceCrn *string
}

func (r ApiHasFlowRunningByFlowIdAndResourceCrnRequest) ResourceCrn(resourceCrn string) ApiHasFlowRunningByFlowIdAndResourceCrnRequest {
	r.resourceCrn = &resourceCrn
	return r
}

func (r ApiHasFlowRunningByFlowIdAndResourceCrnRequest) Execute() (*FlowCheckResponse, *http.Response, error) {
	return r.ApiService.HasFlowRunningByFlowIdAndResourceCrnExecute(r)
}

/*
HasFlowRunningByFlowIdAndResourceCrn Check if there is a running flow for flow id and resourceId

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param flowId
	@return ApiHasFlowRunningByFlowIdAndResourceCrnRequest
*/
func (a *FlowPublicApiService) HasFlowRunningByFlowIdAndResourceCrn(ctx context.Context, flowId string) ApiHasFlowRunningByFlowIdAndResourceCrnRequest {
	return ApiHasFlowRunningByFlowIdAndResourceCrnRequest{
		ApiService: a,
		ctx:        ctx,
		flowId:     flowId,
	}
}

// Execute executes the request
//
//	@return FlowCheckResponse
func (a *FlowPublicApiService) HasFlowRunningByFlowIdAndResourceCrnExecute(r ApiHasFlowRunningByFlowIdAndResourceCrnRequest) (*FlowCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowPublicApiService.HasFlowRunningByFlowIdAndResourceCrn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow-public/check/flowId/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.resourceCrn != nil {
		parameterAddToQuery(localVarQueryParams, "resourceCrn", r.resourceCrn, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowCheckResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
