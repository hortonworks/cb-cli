/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the UpgradeDatabaseServerV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpgradeDatabaseServerV4Response{}

// UpgradeDatabaseServerV4Response Response for upgrading a database server
type UpgradeDatabaseServerV4Response struct {
	// The current version of the database server
	CurrentVersion string `json:"currentVersion"`
	// The status reason if upgrade flow is not started due to some validation
	Reason         *string         `json:"reason,omitempty"`
	FlowIdentifier *FlowIdentifier `json:"flowIdentifier,omitempty"`
}

// NewUpgradeDatabaseServerV4Response instantiates a new UpgradeDatabaseServerV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpgradeDatabaseServerV4Response(currentVersion string) *UpgradeDatabaseServerV4Response {
	this := UpgradeDatabaseServerV4Response{}
	this.CurrentVersion = currentVersion
	return &this
}

// NewUpgradeDatabaseServerV4ResponseWithDefaults instantiates a new UpgradeDatabaseServerV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpgradeDatabaseServerV4ResponseWithDefaults() *UpgradeDatabaseServerV4Response {
	this := UpgradeDatabaseServerV4Response{}
	return &this
}

// GetCurrentVersion returns the CurrentVersion field value
func (o *UpgradeDatabaseServerV4Response) GetCurrentVersion() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CurrentVersion
}

// GetCurrentVersionOk returns a tuple with the CurrentVersion field value
// and a boolean to check if the value has been set.
func (o *UpgradeDatabaseServerV4Response) GetCurrentVersionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CurrentVersion, true
}

// SetCurrentVersion sets field value
func (o *UpgradeDatabaseServerV4Response) SetCurrentVersion(v string) {
	o.CurrentVersion = v
}

// GetReason returns the Reason field value if set, zero value otherwise.
func (o *UpgradeDatabaseServerV4Response) GetReason() string {
	if o == nil || isNil(o.Reason) {
		var ret string
		return ret
	}
	return *o.Reason
}

// GetReasonOk returns a tuple with the Reason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeDatabaseServerV4Response) GetReasonOk() (*string, bool) {
	if o == nil || isNil(o.Reason) {
		return nil, false
	}
	return o.Reason, true
}

// HasReason returns a boolean if a field has been set.
func (o *UpgradeDatabaseServerV4Response) HasReason() bool {
	if o != nil && !isNil(o.Reason) {
		return true
	}

	return false
}

// SetReason gets a reference to the given string and assigns it to the Reason field.
func (o *UpgradeDatabaseServerV4Response) SetReason(v string) {
	o.Reason = &v
}

// GetFlowIdentifier returns the FlowIdentifier field value if set, zero value otherwise.
func (o *UpgradeDatabaseServerV4Response) GetFlowIdentifier() FlowIdentifier {
	if o == nil || isNil(o.FlowIdentifier) {
		var ret FlowIdentifier
		return ret
	}
	return *o.FlowIdentifier
}

// GetFlowIdentifierOk returns a tuple with the FlowIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpgradeDatabaseServerV4Response) GetFlowIdentifierOk() (*FlowIdentifier, bool) {
	if o == nil || isNil(o.FlowIdentifier) {
		return nil, false
	}
	return o.FlowIdentifier, true
}

// HasFlowIdentifier returns a boolean if a field has been set.
func (o *UpgradeDatabaseServerV4Response) HasFlowIdentifier() bool {
	if o != nil && !isNil(o.FlowIdentifier) {
		return true
	}

	return false
}

// SetFlowIdentifier gets a reference to the given FlowIdentifier and assigns it to the FlowIdentifier field.
func (o *UpgradeDatabaseServerV4Response) SetFlowIdentifier(v FlowIdentifier) {
	o.FlowIdentifier = &v
}

func (o UpgradeDatabaseServerV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpgradeDatabaseServerV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["currentVersion"] = o.CurrentVersion
	if !isNil(o.Reason) {
		toSerialize["reason"] = o.Reason
	}
	if !isNil(o.FlowIdentifier) {
		toSerialize["flowIdentifier"] = o.FlowIdentifier
	}
	return toSerialize, nil
}

type NullableUpgradeDatabaseServerV4Response struct {
	value *UpgradeDatabaseServerV4Response
	isSet bool
}

func (v NullableUpgradeDatabaseServerV4Response) Get() *UpgradeDatabaseServerV4Response {
	return v.value
}

func (v *NullableUpgradeDatabaseServerV4Response) Set(val *UpgradeDatabaseServerV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableUpgradeDatabaseServerV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableUpgradeDatabaseServerV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpgradeDatabaseServerV4Response(val *UpgradeDatabaseServerV4Response) *NullableUpgradeDatabaseServerV4Response {
	return &NullableUpgradeDatabaseServerV4Response{value: val, isSet: true}
}

func (v NullableUpgradeDatabaseServerV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpgradeDatabaseServerV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
