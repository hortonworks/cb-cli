/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseServerV4StackRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerV4StackRequest{}

// DatabaseServerV4StackRequest Database server information for the database stack
type DatabaseServerV4StackRequest struct {
	// Instance type of the database server
	InstanceType *string `json:"instanceType,omitempty"`
	// Name of the database vendor (MYSQL, POSTGRES, ...)
	DatabaseVendor *string `json:"databaseVendor,omitempty"`
	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver *string `json:"connectionDriver,omitempty"`
	// Storage size of the database server, in GB
	StorageSize *int64 `json:"storageSize,omitempty"`
	// Username of the administrative user of the database server
	RootUserName *string `json:"rootUserName,omitempty"`
	// Password of the administrative user of the database server
	RootUserPassword *string `json:"rootUserPassword,omitempty"`
	// Port of the database server
	Port          *int32                           `json:"port,omitempty"`
	Aws           *AwsDatabaseServerV4Parameters   `json:"aws,omitempty"`
	Azure         *AzureDatabaseServerV4Parameters `json:"azure,omitempty"`
	Gcp           *GcpDatabaseServerV4Parameters   `json:"gcp,omitempty"`
	SecurityGroup *SecurityGroupV4StackRequest     `json:"securityGroup,omitempty"`
}

// NewDatabaseServerV4StackRequest instantiates a new DatabaseServerV4StackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerV4StackRequest() *DatabaseServerV4StackRequest {
	this := DatabaseServerV4StackRequest{}
	return &this
}

// NewDatabaseServerV4StackRequestWithDefaults instantiates a new DatabaseServerV4StackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerV4StackRequestWithDefaults() *DatabaseServerV4StackRequest {
	this := DatabaseServerV4StackRequest{}
	return &this
}

// GetInstanceType returns the InstanceType field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetInstanceType() string {
	if o == nil || isNil(o.InstanceType) {
		var ret string
		return ret
	}
	return *o.InstanceType
}

// GetInstanceTypeOk returns a tuple with the InstanceType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetInstanceTypeOk() (*string, bool) {
	if o == nil || isNil(o.InstanceType) {
		return nil, false
	}
	return o.InstanceType, true
}

// HasInstanceType returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasInstanceType() bool {
	if o != nil && !isNil(o.InstanceType) {
		return true
	}

	return false
}

// SetInstanceType gets a reference to the given string and assigns it to the InstanceType field.
func (o *DatabaseServerV4StackRequest) SetInstanceType(v string) {
	o.InstanceType = &v
}

// GetDatabaseVendor returns the DatabaseVendor field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetDatabaseVendor() string {
	if o == nil || isNil(o.DatabaseVendor) {
		var ret string
		return ret
	}
	return *o.DatabaseVendor
}

// GetDatabaseVendorOk returns a tuple with the DatabaseVendor field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetDatabaseVendorOk() (*string, bool) {
	if o == nil || isNil(o.DatabaseVendor) {
		return nil, false
	}
	return o.DatabaseVendor, true
}

// HasDatabaseVendor returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasDatabaseVendor() bool {
	if o != nil && !isNil(o.DatabaseVendor) {
		return true
	}

	return false
}

// SetDatabaseVendor gets a reference to the given string and assigns it to the DatabaseVendor field.
func (o *DatabaseServerV4StackRequest) SetDatabaseVendor(v string) {
	o.DatabaseVendor = &v
}

// GetConnectionDriver returns the ConnectionDriver field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetConnectionDriver() string {
	if o == nil || isNil(o.ConnectionDriver) {
		var ret string
		return ret
	}
	return *o.ConnectionDriver
}

// GetConnectionDriverOk returns a tuple with the ConnectionDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetConnectionDriverOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionDriver) {
		return nil, false
	}
	return o.ConnectionDriver, true
}

// HasConnectionDriver returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasConnectionDriver() bool {
	if o != nil && !isNil(o.ConnectionDriver) {
		return true
	}

	return false
}

// SetConnectionDriver gets a reference to the given string and assigns it to the ConnectionDriver field.
func (o *DatabaseServerV4StackRequest) SetConnectionDriver(v string) {
	o.ConnectionDriver = &v
}

// GetStorageSize returns the StorageSize field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetStorageSize() int64 {
	if o == nil || isNil(o.StorageSize) {
		var ret int64
		return ret
	}
	return *o.StorageSize
}

// GetStorageSizeOk returns a tuple with the StorageSize field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetStorageSizeOk() (*int64, bool) {
	if o == nil || isNil(o.StorageSize) {
		return nil, false
	}
	return o.StorageSize, true
}

// HasStorageSize returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasStorageSize() bool {
	if o != nil && !isNil(o.StorageSize) {
		return true
	}

	return false
}

// SetStorageSize gets a reference to the given int64 and assigns it to the StorageSize field.
func (o *DatabaseServerV4StackRequest) SetStorageSize(v int64) {
	o.StorageSize = &v
}

// GetRootUserName returns the RootUserName field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetRootUserName() string {
	if o == nil || isNil(o.RootUserName) {
		var ret string
		return ret
	}
	return *o.RootUserName
}

// GetRootUserNameOk returns a tuple with the RootUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetRootUserNameOk() (*string, bool) {
	if o == nil || isNil(o.RootUserName) {
		return nil, false
	}
	return o.RootUserName, true
}

// HasRootUserName returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasRootUserName() bool {
	if o != nil && !isNil(o.RootUserName) {
		return true
	}

	return false
}

// SetRootUserName gets a reference to the given string and assigns it to the RootUserName field.
func (o *DatabaseServerV4StackRequest) SetRootUserName(v string) {
	o.RootUserName = &v
}

// GetRootUserPassword returns the RootUserPassword field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetRootUserPassword() string {
	if o == nil || isNil(o.RootUserPassword) {
		var ret string
		return ret
	}
	return *o.RootUserPassword
}

// GetRootUserPasswordOk returns a tuple with the RootUserPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetRootUserPasswordOk() (*string, bool) {
	if o == nil || isNil(o.RootUserPassword) {
		return nil, false
	}
	return o.RootUserPassword, true
}

// HasRootUserPassword returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasRootUserPassword() bool {
	if o != nil && !isNil(o.RootUserPassword) {
		return true
	}

	return false
}

// SetRootUserPassword gets a reference to the given string and assigns it to the RootUserPassword field.
func (o *DatabaseServerV4StackRequest) SetRootUserPassword(v string) {
	o.RootUserPassword = &v
}

// GetPort returns the Port field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetPort() int32 {
	if o == nil || isNil(o.Port) {
		var ret int32
		return ret
	}
	return *o.Port
}

// GetPortOk returns a tuple with the Port field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetPortOk() (*int32, bool) {
	if o == nil || isNil(o.Port) {
		return nil, false
	}
	return o.Port, true
}

// HasPort returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasPort() bool {
	if o != nil && !isNil(o.Port) {
		return true
	}

	return false
}

// SetPort gets a reference to the given int32 and assigns it to the Port field.
func (o *DatabaseServerV4StackRequest) SetPort(v int32) {
	o.Port = &v
}

// GetAws returns the Aws field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetAws() AwsDatabaseServerV4Parameters {
	if o == nil || isNil(o.Aws) {
		var ret AwsDatabaseServerV4Parameters
		return ret
	}
	return *o.Aws
}

// GetAwsOk returns a tuple with the Aws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetAwsOk() (*AwsDatabaseServerV4Parameters, bool) {
	if o == nil || isNil(o.Aws) {
		return nil, false
	}
	return o.Aws, true
}

// HasAws returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasAws() bool {
	if o != nil && !isNil(o.Aws) {
		return true
	}

	return false
}

// SetAws gets a reference to the given AwsDatabaseServerV4Parameters and assigns it to the Aws field.
func (o *DatabaseServerV4StackRequest) SetAws(v AwsDatabaseServerV4Parameters) {
	o.Aws = &v
}

// GetAzure returns the Azure field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetAzure() AzureDatabaseServerV4Parameters {
	if o == nil || isNil(o.Azure) {
		var ret AzureDatabaseServerV4Parameters
		return ret
	}
	return *o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetAzureOk() (*AzureDatabaseServerV4Parameters, bool) {
	if o == nil || isNil(o.Azure) {
		return nil, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasAzure() bool {
	if o != nil && !isNil(o.Azure) {
		return true
	}

	return false
}

// SetAzure gets a reference to the given AzureDatabaseServerV4Parameters and assigns it to the Azure field.
func (o *DatabaseServerV4StackRequest) SetAzure(v AzureDatabaseServerV4Parameters) {
	o.Azure = &v
}

// GetGcp returns the Gcp field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetGcp() GcpDatabaseServerV4Parameters {
	if o == nil || isNil(o.Gcp) {
		var ret GcpDatabaseServerV4Parameters
		return ret
	}
	return *o.Gcp
}

// GetGcpOk returns a tuple with the Gcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetGcpOk() (*GcpDatabaseServerV4Parameters, bool) {
	if o == nil || isNil(o.Gcp) {
		return nil, false
	}
	return o.Gcp, true
}

// HasGcp returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasGcp() bool {
	if o != nil && !isNil(o.Gcp) {
		return true
	}

	return false
}

// SetGcp gets a reference to the given GcpDatabaseServerV4Parameters and assigns it to the Gcp field.
func (o *DatabaseServerV4StackRequest) SetGcp(v GcpDatabaseServerV4Parameters) {
	o.Gcp = &v
}

// GetSecurityGroup returns the SecurityGroup field value if set, zero value otherwise.
func (o *DatabaseServerV4StackRequest) GetSecurityGroup() SecurityGroupV4StackRequest {
	if o == nil || isNil(o.SecurityGroup) {
		var ret SecurityGroupV4StackRequest
		return ret
	}
	return *o.SecurityGroup
}

// GetSecurityGroupOk returns a tuple with the SecurityGroup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4StackRequest) GetSecurityGroupOk() (*SecurityGroupV4StackRequest, bool) {
	if o == nil || isNil(o.SecurityGroup) {
		return nil, false
	}
	return o.SecurityGroup, true
}

// HasSecurityGroup returns a boolean if a field has been set.
func (o *DatabaseServerV4StackRequest) HasSecurityGroup() bool {
	if o != nil && !isNil(o.SecurityGroup) {
		return true
	}

	return false
}

// SetSecurityGroup gets a reference to the given SecurityGroupV4StackRequest and assigns it to the SecurityGroup field.
func (o *DatabaseServerV4StackRequest) SetSecurityGroup(v SecurityGroupV4StackRequest) {
	o.SecurityGroup = &v
}

func (o DatabaseServerV4StackRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerV4StackRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.InstanceType) {
		toSerialize["instanceType"] = o.InstanceType
	}
	if !isNil(o.DatabaseVendor) {
		toSerialize["databaseVendor"] = o.DatabaseVendor
	}
	if !isNil(o.ConnectionDriver) {
		toSerialize["connectionDriver"] = o.ConnectionDriver
	}
	if !isNil(o.StorageSize) {
		toSerialize["storageSize"] = o.StorageSize
	}
	if !isNil(o.RootUserName) {
		toSerialize["rootUserName"] = o.RootUserName
	}
	if !isNil(o.RootUserPassword) {
		toSerialize["rootUserPassword"] = o.RootUserPassword
	}
	if !isNil(o.Port) {
		toSerialize["port"] = o.Port
	}
	if !isNil(o.Aws) {
		toSerialize["aws"] = o.Aws
	}
	if !isNil(o.Azure) {
		toSerialize["azure"] = o.Azure
	}
	if !isNil(o.Gcp) {
		toSerialize["gcp"] = o.Gcp
	}
	if !isNil(o.SecurityGroup) {
		toSerialize["securityGroup"] = o.SecurityGroup
	}
	return toSerialize, nil
}

type NullableDatabaseServerV4StackRequest struct {
	value *DatabaseServerV4StackRequest
	isSet bool
}

func (v NullableDatabaseServerV4StackRequest) Get() *DatabaseServerV4StackRequest {
	return v.value
}

func (v *NullableDatabaseServerV4StackRequest) Set(val *DatabaseServerV4StackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerV4StackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerV4StackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerV4StackRequest(val *DatabaseServerV4StackRequest) *NullableDatabaseServerV4StackRequest {
	return &NullableDatabaseServerV4StackRequest{value: val, isSet: true}
}

func (v NullableDatabaseServerV4StackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerV4StackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
