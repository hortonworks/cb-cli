/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseServerV4Responses type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerV4Responses{}

// DatabaseServerV4Responses A set of multiple database server responses
type DatabaseServerV4Responses struct {
	Responses []DatabaseServerV4Response `json:"responses,omitempty"`
}

// NewDatabaseServerV4Responses instantiates a new DatabaseServerV4Responses object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerV4Responses() *DatabaseServerV4Responses {
	this := DatabaseServerV4Responses{}
	return &this
}

// NewDatabaseServerV4ResponsesWithDefaults instantiates a new DatabaseServerV4Responses object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerV4ResponsesWithDefaults() *DatabaseServerV4Responses {
	this := DatabaseServerV4Responses{}
	return &this
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *DatabaseServerV4Responses) GetResponses() []DatabaseServerV4Response {
	if o == nil || isNil(o.Responses) {
		var ret []DatabaseServerV4Response
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Responses) GetResponsesOk() ([]DatabaseServerV4Response, bool) {
	if o == nil || isNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *DatabaseServerV4Responses) HasResponses() bool {
	if o != nil && !isNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []DatabaseServerV4Response and assigns it to the Responses field.
func (o *DatabaseServerV4Responses) SetResponses(v []DatabaseServerV4Response) {
	o.Responses = v
}

func (o DatabaseServerV4Responses) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerV4Responses) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	return toSerialize, nil
}

type NullableDatabaseServerV4Responses struct {
	value *DatabaseServerV4Responses
	isSet bool
}

func (v NullableDatabaseServerV4Responses) Get() *DatabaseServerV4Responses {
	return v.value
}

func (v *NullableDatabaseServerV4Responses) Set(val *DatabaseServerV4Responses) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerV4Responses) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerV4Responses) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerV4Responses(val *DatabaseServerV4Responses) *NullableDatabaseServerV4Responses {
	return &NullableDatabaseServerV4Responses{value: val, isSet: true}
}

func (v NullableDatabaseServerV4Responses) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerV4Responses) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
