// Code generated by go-swagger; DO NOT EDIT.

package v4databases

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4databases API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4databases API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDatabase creates database config

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) CreateDatabase(params *CreateDatabaseParams) (*CreateDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatabaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDatabase",
		Method:             "POST",
		PathPattern:        "/v4/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDatabaseOK), nil

}

/*
DeleteDatabase deletes database config by name

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) DeleteDatabase(params *DeleteDatabaseParams) (*DeleteDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatabaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatabase",
		Method:             "DELETE",
		PathPattern:        "/v4/databases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDatabaseOK), nil

}

/*
DeleteMultipleDatabases deletes multiple database configs by name

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) DeleteMultipleDatabases(params *DeleteMultipleDatabasesParams) (*DeleteMultipleDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleDatabasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultipleDatabases",
		Method:             "DELETE",
		PathPattern:        "/v4/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMultipleDatabasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMultipleDatabasesOK), nil

}

/*
GetDatabase gets database config by name

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) GetDatabase(params *GetDatabaseParams) (*GetDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatabase",
		Method:             "GET",
		PathPattern:        "/v4/databases/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatabaseOK), nil

}

/*
ListDatabases lists database configs

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) ListDatabases(params *ListDatabasesParams) (*ListDatabasesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatabasesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDatabases",
		Method:             "GET",
		PathPattern:        "/v4/databases",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDatabasesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDatabasesOK), nil

}

/*
RegisterDatabase registers database config of existing database

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) RegisterDatabase(params *RegisterDatabaseParams) (*RegisterDatabaseOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDatabaseParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerDatabase",
		Method:             "POST",
		PathPattern:        "/v4/databases/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterDatabaseReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterDatabaseOK), nil

}

/*
TestDatabaseConnection tests database connectivity

A database describes an external relational database that can be used for any of several services, e.g., for Hive as its metastore.
*/
func (a *Client) TestDatabaseConnection(params *TestDatabaseConnectionParams) (*TestDatabaseConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestDatabaseConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testDatabaseConnection",
		Method:             "POST",
		PathPattern:        "/v4/databases/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestDatabaseConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestDatabaseConnectionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
