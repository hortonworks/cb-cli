// Code generated by go-swagger; DO NOT EDIT.

package v4databaseservers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v4databaseservers API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v4databaseservers API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateDatabaseOnServer creates a database on an existing database server

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) CreateDatabaseOnServer(params *CreateDatabaseOnServerParams) (*CreateDatabaseOnServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateDatabaseOnServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createDatabaseOnServer",
		Method:             "POST",
		PathPattern:        "/v4/databaseservers/createDatabase",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateDatabaseOnServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateDatabaseOnServerOK), nil

}

/*
DeleteDatabaseServer deregisters or terminate a database server by name

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) DeleteDatabaseServer(params *DeleteDatabaseServerParams) (*DeleteDatabaseServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteDatabaseServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteDatabaseServer",
		Method:             "DELETE",
		PathPattern:        "/v4/databaseservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteDatabaseServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteDatabaseServerOK), nil

}

/*
DeleteMultipleDatabaseServers deregisters or terminate multiple database servers by name

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) DeleteMultipleDatabaseServers(params *DeleteMultipleDatabaseServersParams) (*DeleteMultipleDatabaseServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteMultipleDatabaseServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteMultipleDatabaseServers",
		Method:             "DELETE",
		PathPattern:        "/v4/databaseservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteMultipleDatabaseServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteMultipleDatabaseServersOK), nil

}

/*
GetDatabaseServer gets a database server by name

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) GetDatabaseServer(params *GetDatabaseServerParams) (*GetDatabaseServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetDatabaseServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getDatabaseServer",
		Method:             "GET",
		PathPattern:        "/v4/databaseservers/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetDatabaseServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetDatabaseServerOK), nil

}

/*
ListDatabaseServers lists database servers

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) ListDatabaseServers(params *ListDatabaseServersParams) (*ListDatabaseServersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListDatabaseServersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listDatabaseServers",
		Method:             "GET",
		PathPattern:        "/v4/databaseservers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListDatabaseServersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListDatabaseServersOK), nil

}

/*
RegisterDatabaseServer registers a database server

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) RegisterDatabaseServer(params *RegisterDatabaseServerParams) (*RegisterDatabaseServerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRegisterDatabaseServerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "registerDatabaseServer",
		Method:             "POST",
		PathPattern:        "/v4/databaseservers/register",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RegisterDatabaseServerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RegisterDatabaseServerOK), nil

}

/*
TestDatabaseServerConnection tests database server connectivity

A database server describes an external relational database server that can be used to host databases.
*/
func (a *Client) TestDatabaseServerConnection(params *TestDatabaseServerConnectionParams) (*TestDatabaseServerConnectionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTestDatabaseServerConnectionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "testDatabaseServerConnection",
		Method:             "POST",
		PathPattern:        "/v4/databaseservers/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &TestDatabaseServerConnectionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*TestDatabaseServerConnectionOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
