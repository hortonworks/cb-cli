// Code generated by go-swagger; DO NOT EDIT.

package database_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewDeleteDatabaseServerByNameParams creates a new DeleteDatabaseServerByNameParams object
// with the default values initialized.
func NewDeleteDatabaseServerByNameParams() *DeleteDatabaseServerByNameParams {
	var (
		forceDefault = bool(false)
	)
	return &DeleteDatabaseServerByNameParams{
		Force: &forceDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewDeleteDatabaseServerByNameParamsWithTimeout creates a new DeleteDatabaseServerByNameParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewDeleteDatabaseServerByNameParamsWithTimeout(timeout time.Duration) *DeleteDatabaseServerByNameParams {
	var (
		forceDefault = bool(false)
	)
	return &DeleteDatabaseServerByNameParams{
		Force: &forceDefault,

		timeout: timeout,
	}
}

// NewDeleteDatabaseServerByNameParamsWithContext creates a new DeleteDatabaseServerByNameParams object
// with the default values initialized, and the ability to set a context for a request
func NewDeleteDatabaseServerByNameParamsWithContext(ctx context.Context) *DeleteDatabaseServerByNameParams {
	var (
		forceDefault = bool(false)
	)
	return &DeleteDatabaseServerByNameParams{
		Force: &forceDefault,

		Context: ctx,
	}
}

// NewDeleteDatabaseServerByNameParamsWithHTTPClient creates a new DeleteDatabaseServerByNameParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewDeleteDatabaseServerByNameParamsWithHTTPClient(client *http.Client) *DeleteDatabaseServerByNameParams {
	var (
		forceDefault = bool(false)
	)
	return &DeleteDatabaseServerByNameParams{
		Force:      &forceDefault,
		HTTPClient: client,
	}
}

/*DeleteDatabaseServerByNameParams contains all the parameters to send to the API endpoint
for the delete database server by name operation typically these are written to a http.Request
*/
type DeleteDatabaseServerByNameParams struct {

	/*EnvironmentCrn
	  CRN of the environment of the database server(s)

	*/
	EnvironmentCrn string
	/*Force*/
	Force *bool
	/*Name
	  Name of the database server

	*/
	Name string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithTimeout(timeout time.Duration) *DeleteDatabaseServerByNameParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithContext(ctx context.Context) *DeleteDatabaseServerByNameParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithHTTPClient(client *http.Client) *DeleteDatabaseServerByNameParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithEnvironmentCrn adds the environmentCrn to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithEnvironmentCrn(environmentCrn string) *DeleteDatabaseServerByNameParams {
	o.SetEnvironmentCrn(environmentCrn)
	return o
}

// SetEnvironmentCrn adds the environmentCrn to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetEnvironmentCrn(environmentCrn string) {
	o.EnvironmentCrn = environmentCrn
}

// WithForce adds the force to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithForce(force *bool) *DeleteDatabaseServerByNameParams {
	o.SetForce(force)
	return o
}

// SetForce adds the force to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetForce(force *bool) {
	o.Force = force
}

// WithName adds the name to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) WithName(name string) *DeleteDatabaseServerByNameParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the delete database server by name params
func (o *DeleteDatabaseServerByNameParams) SetName(name string) {
	o.Name = name
}

// WriteToRequest writes these params to a swagger request
func (o *DeleteDatabaseServerByNameParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param environmentCrn
	qrEnvironmentCrn := o.EnvironmentCrn
	qEnvironmentCrn := qrEnvironmentCrn
	if qEnvironmentCrn != "" {
		if err := r.SetQueryParam("environmentCrn", qEnvironmentCrn); err != nil {
			return err
		}
	}

	if o.Force != nil {

		// query param force
		var qrForce bool
		if o.Force != nil {
			qrForce = *o.Force
		}
		qForce := swag.FormatBool(qrForce)
		if qForce != "" {
			if err := r.SetQueryParam("force", qForce); err != nil {
				return err
			}
		}

	}

	// path param name
	if err := r.SetPathParam("name", o.Name); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
