// Code generated by go-swagger; DO NOT EDIT.

package database_servers

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewUpdateClusterCrnParams creates a new UpdateClusterCrnParams object
// with the default values initialized.
func NewUpdateClusterCrnParams() *UpdateClusterCrnParams {
	var ()
	return &UpdateClusterCrnParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateClusterCrnParamsWithTimeout creates a new UpdateClusterCrnParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateClusterCrnParamsWithTimeout(timeout time.Duration) *UpdateClusterCrnParams {
	var ()
	return &UpdateClusterCrnParams{

		timeout: timeout,
	}
}

// NewUpdateClusterCrnParamsWithContext creates a new UpdateClusterCrnParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateClusterCrnParamsWithContext(ctx context.Context) *UpdateClusterCrnParams {
	var ()
	return &UpdateClusterCrnParams{

		Context: ctx,
	}
}

// NewUpdateClusterCrnParamsWithHTTPClient creates a new UpdateClusterCrnParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateClusterCrnParamsWithHTTPClient(client *http.Client) *UpdateClusterCrnParams {
	var ()
	return &UpdateClusterCrnParams{
		HTTPClient: client,
	}
}

/*UpdateClusterCrnParams contains all the parameters to send to the API endpoint
for the update cluster crn operation typically these are written to a http.Request
*/
type UpdateClusterCrnParams struct {

	/*CurrentClusterCrn*/
	CurrentClusterCrn *string
	/*EnvironmentCrn*/
	EnvironmentCrn *string
	/*InitiatorUserCrn*/
	InitiatorUserCrn *string
	/*NewClusterCrn*/
	NewClusterCrn *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update cluster crn params
func (o *UpdateClusterCrnParams) WithTimeout(timeout time.Duration) *UpdateClusterCrnParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update cluster crn params
func (o *UpdateClusterCrnParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update cluster crn params
func (o *UpdateClusterCrnParams) WithContext(ctx context.Context) *UpdateClusterCrnParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update cluster crn params
func (o *UpdateClusterCrnParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update cluster crn params
func (o *UpdateClusterCrnParams) WithHTTPClient(client *http.Client) *UpdateClusterCrnParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update cluster crn params
func (o *UpdateClusterCrnParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrentClusterCrn adds the currentClusterCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) WithCurrentClusterCrn(currentClusterCrn *string) *UpdateClusterCrnParams {
	o.SetCurrentClusterCrn(currentClusterCrn)
	return o
}

// SetCurrentClusterCrn adds the currentClusterCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) SetCurrentClusterCrn(currentClusterCrn *string) {
	o.CurrentClusterCrn = currentClusterCrn
}

// WithEnvironmentCrn adds the environmentCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) WithEnvironmentCrn(environmentCrn *string) *UpdateClusterCrnParams {
	o.SetEnvironmentCrn(environmentCrn)
	return o
}

// SetEnvironmentCrn adds the environmentCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) SetEnvironmentCrn(environmentCrn *string) {
	o.EnvironmentCrn = environmentCrn
}

// WithInitiatorUserCrn adds the initiatorUserCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) WithInitiatorUserCrn(initiatorUserCrn *string) *UpdateClusterCrnParams {
	o.SetInitiatorUserCrn(initiatorUserCrn)
	return o
}

// SetInitiatorUserCrn adds the initiatorUserCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) SetInitiatorUserCrn(initiatorUserCrn *string) {
	o.InitiatorUserCrn = initiatorUserCrn
}

// WithNewClusterCrn adds the newClusterCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) WithNewClusterCrn(newClusterCrn *string) *UpdateClusterCrnParams {
	o.SetNewClusterCrn(newClusterCrn)
	return o
}

// SetNewClusterCrn adds the newClusterCrn to the update cluster crn params
func (o *UpdateClusterCrnParams) SetNewClusterCrn(newClusterCrn *string) {
	o.NewClusterCrn = newClusterCrn
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateClusterCrnParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CurrentClusterCrn != nil {

		// query param currentClusterCrn
		var qrCurrentClusterCrn string
		if o.CurrentClusterCrn != nil {
			qrCurrentClusterCrn = *o.CurrentClusterCrn
		}
		qCurrentClusterCrn := qrCurrentClusterCrn
		if qCurrentClusterCrn != "" {
			if err := r.SetQueryParam("currentClusterCrn", qCurrentClusterCrn); err != nil {
				return err
			}
		}

	}

	if o.EnvironmentCrn != nil {

		// query param environmentCrn
		var qrEnvironmentCrn string
		if o.EnvironmentCrn != nil {
			qrEnvironmentCrn = *o.EnvironmentCrn
		}
		qEnvironmentCrn := qrEnvironmentCrn
		if qEnvironmentCrn != "" {
			if err := r.SetQueryParam("environmentCrn", qEnvironmentCrn); err != nil {
				return err
			}
		}

	}

	if o.InitiatorUserCrn != nil {

		// query param initiatorUserCrn
		var qrInitiatorUserCrn string
		if o.InitiatorUserCrn != nil {
			qrInitiatorUserCrn = *o.InitiatorUserCrn
		}
		qInitiatorUserCrn := qrInitiatorUserCrn
		if qInitiatorUserCrn != "" {
			if err := r.SetQueryParam("initiatorUserCrn", qInitiatorUserCrn); err != nil {
				return err
			}
		}

	}

	if o.NewClusterCrn != nil {

		// query param newClusterCrn
		var qrNewClusterCrn string
		if o.NewClusterCrn != nil {
			qrNewClusterCrn = *o.NewClusterCrn
		}
		qNewClusterCrn := qrNewClusterCrn
		if qNewClusterCrn != "" {
			if err := r.SetQueryParam("newClusterCrn", qNewClusterCrn); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
