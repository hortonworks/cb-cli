/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the FlowStateTransitionResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FlowStateTransitionResponse{}

// FlowStateTransitionResponse struct for FlowStateTransitionResponse
type FlowStateTransitionResponse struct {
	State                *string  `json:"state,omitempty"`
	NextEvent            *string  `json:"nextEvent,omitempty"`
	Status               *string  `json:"status,omitempty"`
	ElapsedTimeInSeconds *float64 `json:"elapsedTimeInSeconds,omitempty"`
}

// NewFlowStateTransitionResponse instantiates a new FlowStateTransitionResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFlowStateTransitionResponse() *FlowStateTransitionResponse {
	this := FlowStateTransitionResponse{}
	return &this
}

// NewFlowStateTransitionResponseWithDefaults instantiates a new FlowStateTransitionResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFlowStateTransitionResponseWithDefaults() *FlowStateTransitionResponse {
	this := FlowStateTransitionResponse{}
	return &this
}

// GetState returns the State field value if set, zero value otherwise.
func (o *FlowStateTransitionResponse) GetState() string {
	if o == nil || isNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowStateTransitionResponse) GetStateOk() (*string, bool) {
	if o == nil || isNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *FlowStateTransitionResponse) HasState() bool {
	if o != nil && !isNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *FlowStateTransitionResponse) SetState(v string) {
	o.State = &v
}

// GetNextEvent returns the NextEvent field value if set, zero value otherwise.
func (o *FlowStateTransitionResponse) GetNextEvent() string {
	if o == nil || isNil(o.NextEvent) {
		var ret string
		return ret
	}
	return *o.NextEvent
}

// GetNextEventOk returns a tuple with the NextEvent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowStateTransitionResponse) GetNextEventOk() (*string, bool) {
	if o == nil || isNil(o.NextEvent) {
		return nil, false
	}
	return o.NextEvent, true
}

// HasNextEvent returns a boolean if a field has been set.
func (o *FlowStateTransitionResponse) HasNextEvent() bool {
	if o != nil && !isNil(o.NextEvent) {
		return true
	}

	return false
}

// SetNextEvent gets a reference to the given string and assigns it to the NextEvent field.
func (o *FlowStateTransitionResponse) SetNextEvent(v string) {
	o.NextEvent = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *FlowStateTransitionResponse) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowStateTransitionResponse) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *FlowStateTransitionResponse) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *FlowStateTransitionResponse) SetStatus(v string) {
	o.Status = &v
}

// GetElapsedTimeInSeconds returns the ElapsedTimeInSeconds field value if set, zero value otherwise.
func (o *FlowStateTransitionResponse) GetElapsedTimeInSeconds() float64 {
	if o == nil || isNil(o.ElapsedTimeInSeconds) {
		var ret float64
		return ret
	}
	return *o.ElapsedTimeInSeconds
}

// GetElapsedTimeInSecondsOk returns a tuple with the ElapsedTimeInSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FlowStateTransitionResponse) GetElapsedTimeInSecondsOk() (*float64, bool) {
	if o == nil || isNil(o.ElapsedTimeInSeconds) {
		return nil, false
	}
	return o.ElapsedTimeInSeconds, true
}

// HasElapsedTimeInSeconds returns a boolean if a field has been set.
func (o *FlowStateTransitionResponse) HasElapsedTimeInSeconds() bool {
	if o != nil && !isNil(o.ElapsedTimeInSeconds) {
		return true
	}

	return false
}

// SetElapsedTimeInSeconds gets a reference to the given float64 and assigns it to the ElapsedTimeInSeconds field.
func (o *FlowStateTransitionResponse) SetElapsedTimeInSeconds(v float64) {
	o.ElapsedTimeInSeconds = &v
}

func (o FlowStateTransitionResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FlowStateTransitionResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !isNil(o.NextEvent) {
		toSerialize["nextEvent"] = o.NextEvent
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.ElapsedTimeInSeconds) {
		toSerialize["elapsedTimeInSeconds"] = o.ElapsedTimeInSeconds
	}
	return toSerialize, nil
}

type NullableFlowStateTransitionResponse struct {
	value *FlowStateTransitionResponse
	isSet bool
}

func (v NullableFlowStateTransitionResponse) Get() *FlowStateTransitionResponse {
	return v.value
}

func (v *NullableFlowStateTransitionResponse) Set(val *FlowStateTransitionResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableFlowStateTransitionResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableFlowStateTransitionResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFlowStateTransitionResponse(val *FlowStateTransitionResponse) *NullableFlowStateTransitionResponse {
	return &NullableFlowStateTransitionResponse{value: val, isSet: true}
}

func (v NullableFlowStateTransitionResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFlowStateTransitionResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
