/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseServerTestV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerTestV4Request{}

// DatabaseServerTestV4Request Request for testing connectivity to a database server
type DatabaseServerTestV4Request struct {
	// CRN of registered database server to be tested for connectivity
	ExistingDatabaseServerCrn *string                  `json:"existingDatabaseServerCrn,omitempty"`
	DatabaseServer            *DatabaseServerV4Request `json:"databaseServer,omitempty"`
}

// NewDatabaseServerTestV4Request instantiates a new DatabaseServerTestV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerTestV4Request() *DatabaseServerTestV4Request {
	this := DatabaseServerTestV4Request{}
	return &this
}

// NewDatabaseServerTestV4RequestWithDefaults instantiates a new DatabaseServerTestV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerTestV4RequestWithDefaults() *DatabaseServerTestV4Request {
	this := DatabaseServerTestV4Request{}
	return &this
}

// GetExistingDatabaseServerCrn returns the ExistingDatabaseServerCrn field value if set, zero value otherwise.
func (o *DatabaseServerTestV4Request) GetExistingDatabaseServerCrn() string {
	if o == nil || isNil(o.ExistingDatabaseServerCrn) {
		var ret string
		return ret
	}
	return *o.ExistingDatabaseServerCrn
}

// GetExistingDatabaseServerCrnOk returns a tuple with the ExistingDatabaseServerCrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerTestV4Request) GetExistingDatabaseServerCrnOk() (*string, bool) {
	if o == nil || isNil(o.ExistingDatabaseServerCrn) {
		return nil, false
	}
	return o.ExistingDatabaseServerCrn, true
}

// HasExistingDatabaseServerCrn returns a boolean if a field has been set.
func (o *DatabaseServerTestV4Request) HasExistingDatabaseServerCrn() bool {
	if o != nil && !isNil(o.ExistingDatabaseServerCrn) {
		return true
	}

	return false
}

// SetExistingDatabaseServerCrn gets a reference to the given string and assigns it to the ExistingDatabaseServerCrn field.
func (o *DatabaseServerTestV4Request) SetExistingDatabaseServerCrn(v string) {
	o.ExistingDatabaseServerCrn = &v
}

// GetDatabaseServer returns the DatabaseServer field value if set, zero value otherwise.
func (o *DatabaseServerTestV4Request) GetDatabaseServer() DatabaseServerV4Request {
	if o == nil || isNil(o.DatabaseServer) {
		var ret DatabaseServerV4Request
		return ret
	}
	return *o.DatabaseServer
}

// GetDatabaseServerOk returns a tuple with the DatabaseServer field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerTestV4Request) GetDatabaseServerOk() (*DatabaseServerV4Request, bool) {
	if o == nil || isNil(o.DatabaseServer) {
		return nil, false
	}
	return o.DatabaseServer, true
}

// HasDatabaseServer returns a boolean if a field has been set.
func (o *DatabaseServerTestV4Request) HasDatabaseServer() bool {
	if o != nil && !isNil(o.DatabaseServer) {
		return true
	}

	return false
}

// SetDatabaseServer gets a reference to the given DatabaseServerV4Request and assigns it to the DatabaseServer field.
func (o *DatabaseServerTestV4Request) SetDatabaseServer(v DatabaseServerV4Request) {
	o.DatabaseServer = &v
}

func (o DatabaseServerTestV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerTestV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExistingDatabaseServerCrn) {
		toSerialize["existingDatabaseServerCrn"] = o.ExistingDatabaseServerCrn
	}
	if !isNil(o.DatabaseServer) {
		toSerialize["databaseServer"] = o.DatabaseServer
	}
	return toSerialize, nil
}

type NullableDatabaseServerTestV4Request struct {
	value *DatabaseServerTestV4Request
	isSet bool
}

func (v NullableDatabaseServerTestV4Request) Get() *DatabaseServerTestV4Request {
	return v.value
}

func (v *NullableDatabaseServerTestV4Request) Set(val *DatabaseServerTestV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerTestV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerTestV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerTestV4Request(val *DatabaseServerTestV4Request) *NullableDatabaseServerTestV4Request {
	return &NullableDatabaseServerTestV4Request{value: val, isSet: true}
}

func (v NullableDatabaseServerTestV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerTestV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
