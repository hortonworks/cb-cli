/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the UsedSubnetWithResourceResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsedSubnetWithResourceResponse{}

// UsedSubnetWithResourceResponse struct for UsedSubnetWithResourceResponse
type UsedSubnetWithResourceResponse struct {
	Name        *string `json:"name,omitempty"`
	SubnetId    *string `json:"subnetId,omitempty"`
	ResourceCrn *string `json:"resourceCrn,omitempty"`
	Type        *string `json:"type,omitempty"`
}

// NewUsedSubnetWithResourceResponse instantiates a new UsedSubnetWithResourceResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedSubnetWithResourceResponse() *UsedSubnetWithResourceResponse {
	this := UsedSubnetWithResourceResponse{}
	return &this
}

// NewUsedSubnetWithResourceResponseWithDefaults instantiates a new UsedSubnetWithResourceResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedSubnetWithResourceResponseWithDefaults() *UsedSubnetWithResourceResponse {
	this := UsedSubnetWithResourceResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *UsedSubnetWithResourceResponse) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedSubnetWithResourceResponse) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *UsedSubnetWithResourceResponse) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *UsedSubnetWithResourceResponse) SetName(v string) {
	o.Name = &v
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *UsedSubnetWithResourceResponse) GetSubnetId() string {
	if o == nil || isNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedSubnetWithResourceResponse) GetSubnetIdOk() (*string, bool) {
	if o == nil || isNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *UsedSubnetWithResourceResponse) HasSubnetId() bool {
	if o != nil && !isNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *UsedSubnetWithResourceResponse) SetSubnetId(v string) {
	o.SubnetId = &v
}

// GetResourceCrn returns the ResourceCrn field value if set, zero value otherwise.
func (o *UsedSubnetWithResourceResponse) GetResourceCrn() string {
	if o == nil || isNil(o.ResourceCrn) {
		var ret string
		return ret
	}
	return *o.ResourceCrn
}

// GetResourceCrnOk returns a tuple with the ResourceCrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedSubnetWithResourceResponse) GetResourceCrnOk() (*string, bool) {
	if o == nil || isNil(o.ResourceCrn) {
		return nil, false
	}
	return o.ResourceCrn, true
}

// HasResourceCrn returns a boolean if a field has been set.
func (o *UsedSubnetWithResourceResponse) HasResourceCrn() bool {
	if o != nil && !isNil(o.ResourceCrn) {
		return true
	}

	return false
}

// SetResourceCrn gets a reference to the given string and assigns it to the ResourceCrn field.
func (o *UsedSubnetWithResourceResponse) SetResourceCrn(v string) {
	o.ResourceCrn = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UsedSubnetWithResourceResponse) GetType() string {
	if o == nil || isNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedSubnetWithResourceResponse) GetTypeOk() (*string, bool) {
	if o == nil || isNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UsedSubnetWithResourceResponse) HasType() bool {
	if o != nil && !isNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UsedSubnetWithResourceResponse) SetType(v string) {
	o.Type = &v
}

func (o UsedSubnetWithResourceResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsedSubnetWithResourceResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.SubnetId) {
		toSerialize["subnetId"] = o.SubnetId
	}
	if !isNil(o.ResourceCrn) {
		toSerialize["resourceCrn"] = o.ResourceCrn
	}
	if !isNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	return toSerialize, nil
}

type NullableUsedSubnetWithResourceResponse struct {
	value *UsedSubnetWithResourceResponse
	isSet bool
}

func (v NullableUsedSubnetWithResourceResponse) Get() *UsedSubnetWithResourceResponse {
	return v.value
}

func (v *NullableUsedSubnetWithResourceResponse) Set(val *UsedSubnetWithResourceResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedSubnetWithResourceResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedSubnetWithResourceResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedSubnetWithResourceResponse(val *UsedSubnetWithResourceResponse) *NullableUsedSubnetWithResourceResponse {
	return &NullableUsedSubnetWithResourceResponse{value: val, isSet: true}
}

func (v NullableUsedSubnetWithResourceResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedSubnetWithResourceResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
