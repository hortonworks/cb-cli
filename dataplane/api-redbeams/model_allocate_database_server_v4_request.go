/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the AllocateDatabaseServerV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AllocateDatabaseServerV4Request{}

// AllocateDatabaseServerV4Request Request for allocating a new database server in a provider
type AllocateDatabaseServerV4Request struct {
	// Name of the database stack
	Name *string `json:"name,omitempty"`
	// CRN of the environment of the database server
	EnvironmentCrn string `json:"environmentCrn"`
	// CRN of the cluster of the database server
	ClusterCrn     string                       `json:"clusterCrn"`
	Network        *NetworkV4StackRequest       `json:"network,omitempty"`
	DatabaseServer DatabaseServerV4StackRequest `json:"databaseServer"`
	// AWS-specific parameters for the database stack
	Aws   map[string]interface{} `json:"aws,omitempty"`
	Azure map[string]interface{} `json:"azure,omitempty"`
	// Azure-specific parameters for the database stack
	Gcp       map[string]interface{} `json:"gcp,omitempty"`
	SslConfig *SslConfigV4Request    `json:"sslConfig,omitempty"`
	// UserDefined tags for the DB
	Tags *map[string]string `json:"tags,omitempty"`
}

// NewAllocateDatabaseServerV4Request instantiates a new AllocateDatabaseServerV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAllocateDatabaseServerV4Request(environmentCrn string, clusterCrn string, databaseServer DatabaseServerV4StackRequest) *AllocateDatabaseServerV4Request {
	this := AllocateDatabaseServerV4Request{}
	this.EnvironmentCrn = environmentCrn
	this.ClusterCrn = clusterCrn
	this.DatabaseServer = databaseServer
	return &this
}

// NewAllocateDatabaseServerV4RequestWithDefaults instantiates a new AllocateDatabaseServerV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAllocateDatabaseServerV4RequestWithDefaults() *AllocateDatabaseServerV4Request {
	this := AllocateDatabaseServerV4Request{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *AllocateDatabaseServerV4Request) SetName(v string) {
	o.Name = &v
}

// GetEnvironmentCrn returns the EnvironmentCrn field value
func (o *AllocateDatabaseServerV4Request) GetEnvironmentCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentCrn
}

// GetEnvironmentCrnOk returns a tuple with the EnvironmentCrn field value
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetEnvironmentCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentCrn, true
}

// SetEnvironmentCrn sets field value
func (o *AllocateDatabaseServerV4Request) SetEnvironmentCrn(v string) {
	o.EnvironmentCrn = v
}

// GetClusterCrn returns the ClusterCrn field value
func (o *AllocateDatabaseServerV4Request) GetClusterCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ClusterCrn
}

// GetClusterCrnOk returns a tuple with the ClusterCrn field value
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetClusterCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ClusterCrn, true
}

// SetClusterCrn sets field value
func (o *AllocateDatabaseServerV4Request) SetClusterCrn(v string) {
	o.ClusterCrn = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetNetwork() NetworkV4StackRequest {
	if o == nil || isNil(o.Network) {
		var ret NetworkV4StackRequest
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetNetworkOk() (*NetworkV4StackRequest, bool) {
	if o == nil || isNil(o.Network) {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasNetwork() bool {
	if o != nil && !isNil(o.Network) {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given NetworkV4StackRequest and assigns it to the Network field.
func (o *AllocateDatabaseServerV4Request) SetNetwork(v NetworkV4StackRequest) {
	o.Network = &v
}

// GetDatabaseServer returns the DatabaseServer field value
func (o *AllocateDatabaseServerV4Request) GetDatabaseServer() DatabaseServerV4StackRequest {
	if o == nil {
		var ret DatabaseServerV4StackRequest
		return ret
	}

	return o.DatabaseServer
}

// GetDatabaseServerOk returns a tuple with the DatabaseServer field value
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetDatabaseServerOk() (*DatabaseServerV4StackRequest, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseServer, true
}

// SetDatabaseServer sets field value
func (o *AllocateDatabaseServerV4Request) SetDatabaseServer(v DatabaseServerV4StackRequest) {
	o.DatabaseServer = v
}

// GetAws returns the Aws field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetAws() map[string]interface{} {
	if o == nil || isNil(o.Aws) {
		var ret map[string]interface{}
		return ret
	}
	return o.Aws
}

// GetAwsOk returns a tuple with the Aws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetAwsOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Aws) {
		return map[string]interface{}{}, false
	}
	return o.Aws, true
}

// HasAws returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasAws() bool {
	if o != nil && !isNil(o.Aws) {
		return true
	}

	return false
}

// SetAws gets a reference to the given map[string]interface{} and assigns it to the Aws field.
func (o *AllocateDatabaseServerV4Request) SetAws(v map[string]interface{}) {
	o.Aws = v
}

// GetAzure returns the Azure field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetAzure() map[string]interface{} {
	if o == nil || isNil(o.Azure) {
		var ret map[string]interface{}
		return ret
	}
	return o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetAzureOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Azure) {
		return map[string]interface{}{}, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasAzure() bool {
	if o != nil && !isNil(o.Azure) {
		return true
	}

	return false
}

// SetAzure gets a reference to the given map[string]interface{} and assigns it to the Azure field.
func (o *AllocateDatabaseServerV4Request) SetAzure(v map[string]interface{}) {
	o.Azure = v
}

// GetGcp returns the Gcp field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetGcp() map[string]interface{} {
	if o == nil || isNil(o.Gcp) {
		var ret map[string]interface{}
		return ret
	}
	return o.Gcp
}

// GetGcpOk returns a tuple with the Gcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetGcpOk() (map[string]interface{}, bool) {
	if o == nil || isNil(o.Gcp) {
		return map[string]interface{}{}, false
	}
	return o.Gcp, true
}

// HasGcp returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasGcp() bool {
	if o != nil && !isNil(o.Gcp) {
		return true
	}

	return false
}

// SetGcp gets a reference to the given map[string]interface{} and assigns it to the Gcp field.
func (o *AllocateDatabaseServerV4Request) SetGcp(v map[string]interface{}) {
	o.Gcp = v
}

// GetSslConfig returns the SslConfig field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetSslConfig() SslConfigV4Request {
	if o == nil || isNil(o.SslConfig) {
		var ret SslConfigV4Request
		return ret
	}
	return *o.SslConfig
}

// GetSslConfigOk returns a tuple with the SslConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetSslConfigOk() (*SslConfigV4Request, bool) {
	if o == nil || isNil(o.SslConfig) {
		return nil, false
	}
	return o.SslConfig, true
}

// HasSslConfig returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasSslConfig() bool {
	if o != nil && !isNil(o.SslConfig) {
		return true
	}

	return false
}

// SetSslConfig gets a reference to the given SslConfigV4Request and assigns it to the SslConfig field.
func (o *AllocateDatabaseServerV4Request) SetSslConfig(v SslConfigV4Request) {
	o.SslConfig = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *AllocateDatabaseServerV4Request) GetTags() map[string]string {
	if o == nil || isNil(o.Tags) {
		var ret map[string]string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AllocateDatabaseServerV4Request) GetTagsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *AllocateDatabaseServerV4Request) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given map[string]string and assigns it to the Tags field.
func (o *AllocateDatabaseServerV4Request) SetTags(v map[string]string) {
	o.Tags = &v
}

func (o AllocateDatabaseServerV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AllocateDatabaseServerV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	toSerialize["environmentCrn"] = o.EnvironmentCrn
	toSerialize["clusterCrn"] = o.ClusterCrn
	if !isNil(o.Network) {
		toSerialize["network"] = o.Network
	}
	toSerialize["databaseServer"] = o.DatabaseServer
	if !isNil(o.Aws) {
		toSerialize["aws"] = o.Aws
	}
	if !isNil(o.Azure) {
		toSerialize["azure"] = o.Azure
	}
	if !isNil(o.Gcp) {
		toSerialize["gcp"] = o.Gcp
	}
	if !isNil(o.SslConfig) {
		toSerialize["sslConfig"] = o.SslConfig
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableAllocateDatabaseServerV4Request struct {
	value *AllocateDatabaseServerV4Request
	isSet bool
}

func (v NullableAllocateDatabaseServerV4Request) Get() *AllocateDatabaseServerV4Request {
	return v.value
}

func (v *NullableAllocateDatabaseServerV4Request) Set(val *AllocateDatabaseServerV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableAllocateDatabaseServerV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableAllocateDatabaseServerV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAllocateDatabaseServerV4Request(val *AllocateDatabaseServerV4Request) *NullableAllocateDatabaseServerV4Request {
	return &NullableAllocateDatabaseServerV4Request{value: val, isSet: true}
}

func (v NullableAllocateDatabaseServerV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAllocateDatabaseServerV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
