/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"reflect"
	"strings"
)

// FlowApiService FlowApi service
type FlowApiService service

type ApiGetFlowChainsStatusesByChainIds1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	chainIds   *[]string
	size       *int32
	page       *int32
}

func (r ApiGetFlowChainsStatusesByChainIds1Request) ChainIds(chainIds []string) ApiGetFlowChainsStatusesByChainIds1Request {
	r.chainIds = &chainIds
	return r
}

func (r ApiGetFlowChainsStatusesByChainIds1Request) Size(size int32) ApiGetFlowChainsStatusesByChainIds1Request {
	r.size = &size
	return r
}

func (r ApiGetFlowChainsStatusesByChainIds1Request) Page(page int32) ApiGetFlowChainsStatusesByChainIds1Request {
	r.page = &page
	return r
}

func (r ApiGetFlowChainsStatusesByChainIds1Request) Execute() (*PageFlowCheckResponse, *http.Response, error) {
	return r.ApiService.GetFlowChainsStatusesByChainIds1Execute(r)
}

/*
GetFlowChainsStatusesByChainIds1 Gets flow check responses for parent chains - Input size max 50

Flow check log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFlowChainsStatusesByChainIds1Request
*/
func (a *FlowApiService) GetFlowChainsStatusesByChainIds1(ctx context.Context) ApiGetFlowChainsStatusesByChainIds1Request {
	return ApiGetFlowChainsStatusesByChainIds1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageFlowCheckResponse
func (a *FlowApiService) GetFlowChainsStatusesByChainIds1Execute(r ApiGetFlowChainsStatusesByChainIds1Request) (*PageFlowCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageFlowCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetFlowChainsStatusesByChainIds1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/check/chainIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.chainIds == nil {
		return localVarReturnValue, nil, reportError("chainIds is required and must be specified")
	}
	if len(*r.chainIds) < 0 {
		return localVarReturnValue, nil, reportError("chainIds must have at least 0 elements")
	}
	if len(*r.chainIds) > 50 {
		return localVarReturnValue, nil, reportError("chainIds must have less than 50 elements")
	}

	{
		t := *r.chainIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToQuery(localVarQueryParams, "chainIds", s.Index(i), "multi")
			}
		} else {
			parameterAddToQuery(localVarQueryParams, "chainIds", t, "multi")
		}
	}
	if r.size != nil {
		parameterAddToQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.page != nil {
		parameterAddToQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v PageFlowCheckResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFlowLogsByFlowId1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	flowId     string
}

func (r ApiGetFlowLogsByFlowId1Request) Execute() ([]FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetFlowLogsByFlowId1Execute(r)
}

/*
GetFlowLogsByFlowId1 Get flow logs by flow id

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param flowId
	@return ApiGetFlowLogsByFlowId1Request
*/
func (a *FlowApiService) GetFlowLogsByFlowId1(ctx context.Context, flowId string) ApiGetFlowLogsByFlowId1Request {
	return ApiGetFlowLogsByFlowId1Request{
		ApiService: a,
		ctx:        ctx,
		flowId:     flowId,
	}
}

// Execute executes the request
//
//	@return []FlowLogResponse
func (a *FlowApiService) GetFlowLogsByFlowId1Execute(r ApiGetFlowLogsByFlowId1Request) ([]FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetFlowLogsByFlowId1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v []FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFlowLogsByFlowIds1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	flowIds    *[]string
	size       *int32
	page       *int32
}

func (r ApiGetFlowLogsByFlowIds1Request) FlowIds(flowIds []string) ApiGetFlowLogsByFlowIds1Request {
	r.flowIds = &flowIds
	return r
}

func (r ApiGetFlowLogsByFlowIds1Request) Size(size int32) ApiGetFlowLogsByFlowIds1Request {
	r.size = &size
	return r
}

func (r ApiGetFlowLogsByFlowIds1Request) Page(page int32) ApiGetFlowLogsByFlowIds1Request {
	r.page = &page
	return r
}

func (r ApiGetFlowLogsByFlowIds1Request) Execute() (*PageFlowLogResponse, *http.Response, error) {
	return r.ApiService.GetFlowLogsByFlowIds1Execute(r)
}

/*
GetFlowLogsByFlowIds1 Get flow logs by a list of flow ids - Input size max 50

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@return ApiGetFlowLogsByFlowIds1Request
*/
func (a *FlowApiService) GetFlowLogsByFlowIds1(ctx context.Context) ApiGetFlowLogsByFlowIds1Request {
	return ApiGetFlowLogsByFlowIds1Request{
		ApiService: a,
		ctx:        ctx,
	}
}

// Execute executes the request
//
//	@return PageFlowLogResponse
func (a *FlowApiService) GetFlowLogsByFlowIds1Execute(r ApiGetFlowLogsByFlowIds1Request) (*PageFlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *PageFlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetFlowLogsByFlowIds1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/flowIds"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.flowIds == nil {
		return localVarReturnValue, nil, reportError("flowIds is required and must be specified")
	}
	if len(*r.flowIds) < 0 {
		return localVarReturnValue, nil, reportError("flowIds must have at least 0 elements")
	}
	if len(*r.flowIds) > 50 {
		return localVarReturnValue, nil, reportError("flowIds must have less than 50 elements")
	}

	{
		t := *r.flowIds
		if reflect.TypeOf(t).Kind() == reflect.Slice {
			s := reflect.ValueOf(t)
			for i := 0; i < s.Len(); i++ {
				parameterAddToQuery(localVarQueryParams, "flowIds", s.Index(i), "multi")
			}
		} else {
			parameterAddToQuery(localVarQueryParams, "flowIds", t, "multi")
		}
	}
	if r.size != nil {
		parameterAddToQuery(localVarQueryParams, "size", r.size, "")
	}
	if r.page != nil {
		parameterAddToQuery(localVarQueryParams, "page", r.page, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v PageFlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFlowLogsByResourceCrn1Request struct {
	ctx         context.Context
	ApiService  *FlowApiService
	resourceCrn string
}

func (r ApiGetFlowLogsByResourceCrn1Request) Execute() ([]FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetFlowLogsByResourceCrn1Execute(r)
}

/*
GetFlowLogsByResourceCrn1 Get flow logs for resource by resource CRN

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceCrn
	@return ApiGetFlowLogsByResourceCrn1Request
*/
func (a *FlowApiService) GetFlowLogsByResourceCrn1(ctx context.Context, resourceCrn string) ApiGetFlowLogsByResourceCrn1Request {
	return ApiGetFlowLogsByResourceCrn1Request{
		ApiService:  a,
		ctx:         ctx,
		resourceCrn: resourceCrn,
	}
}

// Execute executes the request
//
//	@return []FlowLogResponse
func (a *FlowApiService) GetFlowLogsByResourceCrn1Execute(r ApiGetFlowLogsByResourceCrn1Request) ([]FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetFlowLogsByResourceCrn1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/resource/crn/{resourceCrn}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceCrn"+"}", url.PathEscape(parameterValueToString(r.resourceCrn, "resourceCrn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v []FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetFlowLogsByResourceName1Request struct {
	ctx          context.Context
	ApiService   *FlowApiService
	resourceName string
	accountId    *string
}

func (r ApiGetFlowLogsByResourceName1Request) AccountId(accountId string) ApiGetFlowLogsByResourceName1Request {
	r.accountId = &accountId
	return r
}

func (r ApiGetFlowLogsByResourceName1Request) Execute() ([]FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetFlowLogsByResourceName1Execute(r)
}

/*
GetFlowLogsByResourceName1 Get flow logs for resource by resource name

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceName
	@return ApiGetFlowLogsByResourceName1Request
*/
func (a *FlowApiService) GetFlowLogsByResourceName1(ctx context.Context, resourceName string) ApiGetFlowLogsByResourceName1Request {
	return ApiGetFlowLogsByResourceName1Request{
		ApiService:   a,
		ctx:          ctx,
		resourceName: resourceName,
	}
}

// Execute executes the request
//
//	@return []FlowLogResponse
func (a *FlowApiService) GetFlowLogsByResourceName1Execute(r ApiGetFlowLogsByResourceName1Request) ([]FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue []FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetFlowLogsByResourceName1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/resource/name/{resourceName}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceName"+"}", url.PathEscape(parameterValueToString(r.resourceName, "resourceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToQuery(localVarQueryParams, "accountId", r.accountId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v []FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastFlowById1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	flowId     string
}

func (r ApiGetLastFlowById1Request) Execute() (*FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetLastFlowById1Execute(r)
}

/*
GetLastFlowById1 Get last flow log by flow id

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param flowId
	@return ApiGetLastFlowById1Request
*/
func (a *FlowApiService) GetLastFlowById1(ctx context.Context, flowId string) ApiGetLastFlowById1Request {
	return ApiGetLastFlowById1Request{
		ApiService: a,
		ctx:        ctx,
		flowId:     flowId,
	}
}

// Execute executes the request
//
//	@return FlowLogResponse
func (a *FlowApiService) GetLastFlowById1Execute(r ApiGetLastFlowById1Request) (*FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetLastFlowById1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/{flowId}/last"
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastFlowByResourceCrn1Request struct {
	ctx         context.Context
	ApiService  *FlowApiService
	resourceCrn string
}

func (r ApiGetLastFlowByResourceCrn1Request) Execute() (*FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetLastFlowByResourceCrn1Execute(r)
}

/*
GetLastFlowByResourceCrn1 Get last flow log for resource by resource CRN

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceCrn
	@return ApiGetLastFlowByResourceCrn1Request
*/
func (a *FlowApiService) GetLastFlowByResourceCrn1(ctx context.Context, resourceCrn string) ApiGetLastFlowByResourceCrn1Request {
	return ApiGetLastFlowByResourceCrn1Request{
		ApiService:  a,
		ctx:         ctx,
		resourceCrn: resourceCrn,
	}
}

// Execute executes the request
//
//	@return FlowLogResponse
func (a *FlowApiService) GetLastFlowByResourceCrn1Execute(r ApiGetLastFlowByResourceCrn1Request) (*FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetLastFlowByResourceCrn1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/resource/crn/{resourceCrn}/last"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceCrn"+"}", url.PathEscape(parameterValueToString(r.resourceCrn, "resourceCrn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGetLastFlowByResourceName1Request struct {
	ctx          context.Context
	ApiService   *FlowApiService
	resourceName string
	accountId    *string
}

func (r ApiGetLastFlowByResourceName1Request) AccountId(accountId string) ApiGetLastFlowByResourceName1Request {
	r.accountId = &accountId
	return r
}

func (r ApiGetLastFlowByResourceName1Request) Execute() (*FlowLogResponse, *http.Response, error) {
	return r.ApiService.GetLastFlowByResourceName1Execute(r)
}

/*
GetLastFlowByResourceName1 Get last flow log for resource by resource name

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceName
	@return ApiGetLastFlowByResourceName1Request
*/
func (a *FlowApiService) GetLastFlowByResourceName1(ctx context.Context, resourceName string) ApiGetLastFlowByResourceName1Request {
	return ApiGetLastFlowByResourceName1Request{
		ApiService:   a,
		ctx:          ctx,
		resourceName: resourceName,
	}
}

// Execute executes the request
//
//	@return FlowLogResponse
func (a *FlowApiService) GetLastFlowByResourceName1Execute(r ApiGetLastFlowByResourceName1Request) (*FlowLogResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowLogResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.GetLastFlowByResourceName1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/logs/resource/name/{resourceName}/last"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceName"+"}", url.PathEscape(parameterValueToString(r.resourceName, "resourceName")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.accountId != nil {
		parameterAddToQuery(localVarQueryParams, "accountId", r.accountId, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowLogResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHasFlowRunningByChainId1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	chainId    string
}

func (r ApiHasFlowRunningByChainId1Request) Execute() (*FlowCheckResponse, *http.Response, error) {
	return r.ApiService.HasFlowRunningByChainId1Execute(r)
}

/*
HasFlowRunningByChainId1 Check if there is a running flow for chain id

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param chainId
	@return ApiHasFlowRunningByChainId1Request
*/
func (a *FlowApiService) HasFlowRunningByChainId1(ctx context.Context, chainId string) ApiHasFlowRunningByChainId1Request {
	return ApiHasFlowRunningByChainId1Request{
		ApiService: a,
		ctx:        ctx,
		chainId:    chainId,
	}
}

// Execute executes the request
//
//	@return FlowCheckResponse
func (a *FlowApiService) HasFlowRunningByChainId1Execute(r ApiHasFlowRunningByChainId1Request) (*FlowCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.HasFlowRunningByChainId1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/check/chainId/{chainId}"
	localVarPath = strings.Replace(localVarPath, "{"+"chainId"+"}", url.PathEscape(parameterValueToString(r.chainId, "chainId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowCheckResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiHasFlowRunningByFlowId1Request struct {
	ctx        context.Context
	ApiService *FlowApiService
	flowId     string
}

func (r ApiHasFlowRunningByFlowId1Request) Execute() (*FlowCheckResponse, *http.Response, error) {
	return r.ApiService.HasFlowRunningByFlowId1Execute(r)
}

/*
HasFlowRunningByFlowId1 Check if there is a running flow for flow id

Flow log operations

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param flowId
	@return ApiHasFlowRunningByFlowId1Request
*/
func (a *FlowApiService) HasFlowRunningByFlowId1(ctx context.Context, flowId string) ApiHasFlowRunningByFlowId1Request {
	return ApiHasFlowRunningByFlowId1Request{
		ApiService: a,
		ctx:        ctx,
		flowId:     flowId,
	}
}

// Execute executes the request
//
//	@return FlowCheckResponse
func (a *FlowApiService) HasFlowRunningByFlowId1Execute(r ApiHasFlowRunningByFlowId1Request) (*FlowCheckResponse, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *FlowCheckResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "FlowApiService.HasFlowRunningByFlowId1")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/flow/check/flowId/{flowId}"
	localVarPath = strings.Replace(localVarPath, "{"+"flowId"+"}", url.PathEscape(parameterValueToString(r.flowId, "flowId")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v FlowCheckResponse
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
