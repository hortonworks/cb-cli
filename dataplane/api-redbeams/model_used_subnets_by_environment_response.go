/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the UsedSubnetsByEnvironmentResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UsedSubnetsByEnvironmentResponse{}

// UsedSubnetsByEnvironmentResponse struct for UsedSubnetsByEnvironmentResponse
type UsedSubnetsByEnvironmentResponse struct {
	Responses []UsedSubnetWithResourceResponse `json:"responses,omitempty"`
}

// NewUsedSubnetsByEnvironmentResponse instantiates a new UsedSubnetsByEnvironmentResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUsedSubnetsByEnvironmentResponse() *UsedSubnetsByEnvironmentResponse {
	this := UsedSubnetsByEnvironmentResponse{}
	return &this
}

// NewUsedSubnetsByEnvironmentResponseWithDefaults instantiates a new UsedSubnetsByEnvironmentResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUsedSubnetsByEnvironmentResponseWithDefaults() *UsedSubnetsByEnvironmentResponse {
	this := UsedSubnetsByEnvironmentResponse{}
	return &this
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *UsedSubnetsByEnvironmentResponse) GetResponses() []UsedSubnetWithResourceResponse {
	if o == nil || isNil(o.Responses) {
		var ret []UsedSubnetWithResourceResponse
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UsedSubnetsByEnvironmentResponse) GetResponsesOk() ([]UsedSubnetWithResourceResponse, bool) {
	if o == nil || isNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *UsedSubnetsByEnvironmentResponse) HasResponses() bool {
	if o != nil && !isNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []UsedSubnetWithResourceResponse and assigns it to the Responses field.
func (o *UsedSubnetsByEnvironmentResponse) SetResponses(v []UsedSubnetWithResourceResponse) {
	o.Responses = v
}

func (o UsedSubnetsByEnvironmentResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UsedSubnetsByEnvironmentResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	return toSerialize, nil
}

type NullableUsedSubnetsByEnvironmentResponse struct {
	value *UsedSubnetsByEnvironmentResponse
	isSet bool
}

func (v NullableUsedSubnetsByEnvironmentResponse) Get() *UsedSubnetsByEnvironmentResponse {
	return v.value
}

func (v *NullableUsedSubnetsByEnvironmentResponse) Set(val *UsedSubnetsByEnvironmentResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableUsedSubnetsByEnvironmentResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableUsedSubnetsByEnvironmentResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUsedSubnetsByEnvironmentResponse(val *UsedSubnetsByEnvironmentResponse) *NullableUsedSubnetsByEnvironmentResponse {
	return &NullableUsedSubnetsByEnvironmentResponse{value: val, isSet: true}
}

func (v NullableUsedSubnetsByEnvironmentResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUsedSubnetsByEnvironmentResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
