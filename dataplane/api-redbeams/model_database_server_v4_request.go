/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseServerV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerV4Request{}

// DatabaseServerV4Request Request containing information about a database server to be registered
type DatabaseServerV4Request struct {
	// Name of the database server
	Name string `json:"name"`
	// Description of the database server
	Description *string `json:"description,omitempty"`
	// Host of the database server
	Host string `json:"host"`
	// Port of the database server
	Port int32 `json:"port"`
	// Name of the database vendor (MYSQL, POSTGRES, ...)
	DatabaseVendor string `json:"databaseVendor"`
	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver *string `json:"connectionDriver,omitempty"`
	// CRN of the environment of the database server
	EnvironmentCrn string `json:"environmentCrn"`
	// Username of the administrative user of the database server
	ConnectionUserName string `json:"connectionUserName"`
	// Password of the administrative user of the database server
	ConnectionPassword string `json:"connectionPassword"`
}

// NewDatabaseServerV4Request instantiates a new DatabaseServerV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerV4Request(name string, host string, port int32, databaseVendor string, environmentCrn string, connectionUserName string, connectionPassword string) *DatabaseServerV4Request {
	this := DatabaseServerV4Request{}
	this.Name = name
	this.Host = host
	this.Port = port
	this.DatabaseVendor = databaseVendor
	this.EnvironmentCrn = environmentCrn
	this.ConnectionUserName = connectionUserName
	this.ConnectionPassword = connectionPassword
	return &this
}

// NewDatabaseServerV4RequestWithDefaults instantiates a new DatabaseServerV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerV4RequestWithDefaults() *DatabaseServerV4Request {
	this := DatabaseServerV4Request{}
	return &this
}

// GetName returns the Name field value
func (o *DatabaseServerV4Request) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseServerV4Request) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatabaseServerV4Request) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatabaseServerV4Request) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatabaseServerV4Request) SetDescription(v string) {
	o.Description = &v
}

// GetHost returns the Host field value
func (o *DatabaseServerV4Request) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *DatabaseServerV4Request) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *DatabaseServerV4Request) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DatabaseServerV4Request) SetPort(v int32) {
	o.Port = v
}

// GetDatabaseVendor returns the DatabaseVendor field value
func (o *DatabaseServerV4Request) GetDatabaseVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseVendor
}

// GetDatabaseVendorOk returns a tuple with the DatabaseVendor field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetDatabaseVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseVendor, true
}

// SetDatabaseVendor sets field value
func (o *DatabaseServerV4Request) SetDatabaseVendor(v string) {
	o.DatabaseVendor = v
}

// GetConnectionDriver returns the ConnectionDriver field value if set, zero value otherwise.
func (o *DatabaseServerV4Request) GetConnectionDriver() string {
	if o == nil || isNil(o.ConnectionDriver) {
		var ret string
		return ret
	}
	return *o.ConnectionDriver
}

// GetConnectionDriverOk returns a tuple with the ConnectionDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetConnectionDriverOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionDriver) {
		return nil, false
	}
	return o.ConnectionDriver, true
}

// HasConnectionDriver returns a boolean if a field has been set.
func (o *DatabaseServerV4Request) HasConnectionDriver() bool {
	if o != nil && !isNil(o.ConnectionDriver) {
		return true
	}

	return false
}

// SetConnectionDriver gets a reference to the given string and assigns it to the ConnectionDriver field.
func (o *DatabaseServerV4Request) SetConnectionDriver(v string) {
	o.ConnectionDriver = &v
}

// GetEnvironmentCrn returns the EnvironmentCrn field value
func (o *DatabaseServerV4Request) GetEnvironmentCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentCrn
}

// GetEnvironmentCrnOk returns a tuple with the EnvironmentCrn field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetEnvironmentCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentCrn, true
}

// SetEnvironmentCrn sets field value
func (o *DatabaseServerV4Request) SetEnvironmentCrn(v string) {
	o.EnvironmentCrn = v
}

// GetConnectionUserName returns the ConnectionUserName field value
func (o *DatabaseServerV4Request) GetConnectionUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionUserName
}

// GetConnectionUserNameOk returns a tuple with the ConnectionUserName field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetConnectionUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionUserName, true
}

// SetConnectionUserName sets field value
func (o *DatabaseServerV4Request) SetConnectionUserName(v string) {
	o.ConnectionUserName = v
}

// GetConnectionPassword returns the ConnectionPassword field value
func (o *DatabaseServerV4Request) GetConnectionPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionPassword
}

// GetConnectionPasswordOk returns a tuple with the ConnectionPassword field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Request) GetConnectionPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionPassword, true
}

// SetConnectionPassword sets field value
func (o *DatabaseServerV4Request) SetConnectionPassword(v string) {
	o.ConnectionPassword = v
}

func (o DatabaseServerV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["databaseVendor"] = o.DatabaseVendor
	if !isNil(o.ConnectionDriver) {
		toSerialize["connectionDriver"] = o.ConnectionDriver
	}
	toSerialize["environmentCrn"] = o.EnvironmentCrn
	toSerialize["connectionUserName"] = o.ConnectionUserName
	toSerialize["connectionPassword"] = o.ConnectionPassword
	return toSerialize, nil
}

type NullableDatabaseServerV4Request struct {
	value *DatabaseServerV4Request
	isSet bool
}

func (v NullableDatabaseServerV4Request) Get() *DatabaseServerV4Request {
	return v.value
}

func (v *NullableDatabaseServerV4Request) Set(val *DatabaseServerV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerV4Request(val *DatabaseServerV4Request) *NullableDatabaseServerV4Request {
	return &NullableDatabaseServerV4Request{value: val, isSet: true}
}

func (v NullableDatabaseServerV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
