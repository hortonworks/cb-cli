/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CheckRightV4SingleResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckRightV4SingleResponse{}

// CheckRightV4SingleResponse struct for CheckRightV4SingleResponse
type CheckRightV4SingleResponse struct {
	Right  *string `json:"right,omitempty"`
	Result *bool   `json:"result,omitempty"`
}

// NewCheckRightV4SingleResponse instantiates a new CheckRightV4SingleResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckRightV4SingleResponse() *CheckRightV4SingleResponse {
	this := CheckRightV4SingleResponse{}
	return &this
}

// NewCheckRightV4SingleResponseWithDefaults instantiates a new CheckRightV4SingleResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckRightV4SingleResponseWithDefaults() *CheckRightV4SingleResponse {
	this := CheckRightV4SingleResponse{}
	return &this
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *CheckRightV4SingleResponse) GetRight() string {
	if o == nil || isNil(o.Right) {
		var ret string
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckRightV4SingleResponse) GetRightOk() (*string, bool) {
	if o == nil || isNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *CheckRightV4SingleResponse) HasRight() bool {
	if o != nil && !isNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given string and assigns it to the Right field.
func (o *CheckRightV4SingleResponse) SetRight(v string) {
	o.Right = &v
}

// GetResult returns the Result field value if set, zero value otherwise.
func (o *CheckRightV4SingleResponse) GetResult() bool {
	if o == nil || isNil(o.Result) {
		var ret bool
		return ret
	}
	return *o.Result
}

// GetResultOk returns a tuple with the Result field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckRightV4SingleResponse) GetResultOk() (*bool, bool) {
	if o == nil || isNil(o.Result) {
		return nil, false
	}
	return o.Result, true
}

// HasResult returns a boolean if a field has been set.
func (o *CheckRightV4SingleResponse) HasResult() bool {
	if o != nil && !isNil(o.Result) {
		return true
	}

	return false
}

// SetResult gets a reference to the given bool and assigns it to the Result field.
func (o *CheckRightV4SingleResponse) SetResult(v bool) {
	o.Result = &v
}

func (o CheckRightV4SingleResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckRightV4SingleResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !isNil(o.Result) {
		toSerialize["result"] = o.Result
	}
	return toSerialize, nil
}

type NullableCheckRightV4SingleResponse struct {
	value *CheckRightV4SingleResponse
	isSet bool
}

func (v NullableCheckRightV4SingleResponse) Get() *CheckRightV4SingleResponse {
	return v.value
}

func (v *NullableCheckRightV4SingleResponse) Set(val *CheckRightV4SingleResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckRightV4SingleResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckRightV4SingleResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckRightV4SingleResponse(val *CheckRightV4SingleResponse) *NullableCheckRightV4SingleResponse {
	return &NullableCheckRightV4SingleResponse{value: val, isSet: true}
}

func (v NullableCheckRightV4SingleResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckRightV4SingleResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
