/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseTestV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseTestV4Response{}

// DatabaseTestV4Response Response for testing connectivity to a database
type DatabaseTestV4Response struct {
	// Result of database connection test
	Result string `json:"result"`
}

// NewDatabaseTestV4Response instantiates a new DatabaseTestV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseTestV4Response(result string) *DatabaseTestV4Response {
	this := DatabaseTestV4Response{}
	this.Result = result
	return &this
}

// NewDatabaseTestV4ResponseWithDefaults instantiates a new DatabaseTestV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseTestV4ResponseWithDefaults() *DatabaseTestV4Response {
	this := DatabaseTestV4Response{}
	return &this
}

// GetResult returns the Result field value
func (o *DatabaseTestV4Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *DatabaseTestV4Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *DatabaseTestV4Response) SetResult(v string) {
	o.Result = v
}

func (o DatabaseTestV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseTestV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

type NullableDatabaseTestV4Response struct {
	value *DatabaseTestV4Response
	isSet bool
}

func (v NullableDatabaseTestV4Response) Get() *DatabaseTestV4Response {
	return v.value
}

func (v *NullableDatabaseTestV4Response) Set(val *DatabaseTestV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseTestV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseTestV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseTestV4Response(val *DatabaseTestV4Response) *NullableDatabaseTestV4Response {
	return &NullableDatabaseTestV4Response{value: val, isSet: true}
}

func (v NullableDatabaseTestV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseTestV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
