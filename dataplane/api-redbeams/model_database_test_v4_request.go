/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseTestV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseTestV4Request{}

// DatabaseTestV4Request Request for testing connectivity to a database
type DatabaseTestV4Request struct {
	ExistingDatabase *DatabaseV4Identifiers `json:"existingDatabase,omitempty"`
	Database         *DatabaseV4Request     `json:"database,omitempty"`
}

// NewDatabaseTestV4Request instantiates a new DatabaseTestV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseTestV4Request() *DatabaseTestV4Request {
	this := DatabaseTestV4Request{}
	return &this
}

// NewDatabaseTestV4RequestWithDefaults instantiates a new DatabaseTestV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseTestV4RequestWithDefaults() *DatabaseTestV4Request {
	this := DatabaseTestV4Request{}
	return &this
}

// GetExistingDatabase returns the ExistingDatabase field value if set, zero value otherwise.
func (o *DatabaseTestV4Request) GetExistingDatabase() DatabaseV4Identifiers {
	if o == nil || isNil(o.ExistingDatabase) {
		var ret DatabaseV4Identifiers
		return ret
	}
	return *o.ExistingDatabase
}

// GetExistingDatabaseOk returns a tuple with the ExistingDatabase field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTestV4Request) GetExistingDatabaseOk() (*DatabaseV4Identifiers, bool) {
	if o == nil || isNil(o.ExistingDatabase) {
		return nil, false
	}
	return o.ExistingDatabase, true
}

// HasExistingDatabase returns a boolean if a field has been set.
func (o *DatabaseTestV4Request) HasExistingDatabase() bool {
	if o != nil && !isNil(o.ExistingDatabase) {
		return true
	}

	return false
}

// SetExistingDatabase gets a reference to the given DatabaseV4Identifiers and assigns it to the ExistingDatabase field.
func (o *DatabaseTestV4Request) SetExistingDatabase(v DatabaseV4Identifiers) {
	o.ExistingDatabase = &v
}

// GetDatabase returns the Database field value if set, zero value otherwise.
func (o *DatabaseTestV4Request) GetDatabase() DatabaseV4Request {
	if o == nil || isNil(o.Database) {
		var ret DatabaseV4Request
		return ret
	}
	return *o.Database
}

// GetDatabaseOk returns a tuple with the Database field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseTestV4Request) GetDatabaseOk() (*DatabaseV4Request, bool) {
	if o == nil || isNil(o.Database) {
		return nil, false
	}
	return o.Database, true
}

// HasDatabase returns a boolean if a field has been set.
func (o *DatabaseTestV4Request) HasDatabase() bool {
	if o != nil && !isNil(o.Database) {
		return true
	}

	return false
}

// SetDatabase gets a reference to the given DatabaseV4Request and assigns it to the Database field.
func (o *DatabaseTestV4Request) SetDatabase(v DatabaseV4Request) {
	o.Database = &v
}

func (o DatabaseTestV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseTestV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ExistingDatabase) {
		toSerialize["existingDatabase"] = o.ExistingDatabase
	}
	if !isNil(o.Database) {
		toSerialize["database"] = o.Database
	}
	return toSerialize, nil
}

type NullableDatabaseTestV4Request struct {
	value *DatabaseTestV4Request
	isSet bool
}

func (v NullableDatabaseTestV4Request) Get() *DatabaseTestV4Request {
	return v.value
}

func (v *NullableDatabaseTestV4Request) Set(val *DatabaseTestV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseTestV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseTestV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseTestV4Request(val *DatabaseTestV4Request) *NullableDatabaseTestV4Request {
	return &NullableDatabaseTestV4Request{value: val, isSet: true}
}

func (v NullableDatabaseTestV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseTestV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
