/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the AzureDatabaseServerV4Parameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AzureDatabaseServerV4Parameters{}

// AzureDatabaseServerV4Parameters Azure-specific parameters for the database server
type AzureDatabaseServerV4Parameters struct {
	// Time to retain backups, in days
	BackupRetentionDays *int32 `json:"backupRetentionDays,omitempty"`
	// The version of the database software to use
	DbVersion *string `json:"dbVersion,omitempty"`
	// Whether backups are geographically redundant
	GeoRedundantBackup *bool `json:"geoRedundantBackup,omitempty"`
	// The number of vCPUs assigned to the database server
	SkuCapacity *int32 `json:"skuCapacity,omitempty"`
	// The family of hardware used for the database server
	SkuFamily *string `json:"skuFamily,omitempty"`
	// The tier of SKU for the database server
	SkuTier *string `json:"skuTier,omitempty"`
	// Whether the database server will automatically grow storage when necessary
	StorageAutoGrow *bool `json:"storageAutoGrow,omitempty"`
}

// NewAzureDatabaseServerV4Parameters instantiates a new AzureDatabaseServerV4Parameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAzureDatabaseServerV4Parameters() *AzureDatabaseServerV4Parameters {
	this := AzureDatabaseServerV4Parameters{}
	return &this
}

// NewAzureDatabaseServerV4ParametersWithDefaults instantiates a new AzureDatabaseServerV4Parameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAzureDatabaseServerV4ParametersWithDefaults() *AzureDatabaseServerV4Parameters {
	this := AzureDatabaseServerV4Parameters{}
	return &this
}

// GetBackupRetentionDays returns the BackupRetentionDays field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetBackupRetentionDays() int32 {
	if o == nil || isNil(o.BackupRetentionDays) {
		var ret int32
		return ret
	}
	return *o.BackupRetentionDays
}

// GetBackupRetentionDaysOk returns a tuple with the BackupRetentionDays field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetBackupRetentionDaysOk() (*int32, bool) {
	if o == nil || isNil(o.BackupRetentionDays) {
		return nil, false
	}
	return o.BackupRetentionDays, true
}

// HasBackupRetentionDays returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasBackupRetentionDays() bool {
	if o != nil && !isNil(o.BackupRetentionDays) {
		return true
	}

	return false
}

// SetBackupRetentionDays gets a reference to the given int32 and assigns it to the BackupRetentionDays field.
func (o *AzureDatabaseServerV4Parameters) SetBackupRetentionDays(v int32) {
	o.BackupRetentionDays = &v
}

// GetDbVersion returns the DbVersion field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetDbVersion() string {
	if o == nil || isNil(o.DbVersion) {
		var ret string
		return ret
	}
	return *o.DbVersion
}

// GetDbVersionOk returns a tuple with the DbVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetDbVersionOk() (*string, bool) {
	if o == nil || isNil(o.DbVersion) {
		return nil, false
	}
	return o.DbVersion, true
}

// HasDbVersion returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasDbVersion() bool {
	if o != nil && !isNil(o.DbVersion) {
		return true
	}

	return false
}

// SetDbVersion gets a reference to the given string and assigns it to the DbVersion field.
func (o *AzureDatabaseServerV4Parameters) SetDbVersion(v string) {
	o.DbVersion = &v
}

// GetGeoRedundantBackup returns the GeoRedundantBackup field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetGeoRedundantBackup() bool {
	if o == nil || isNil(o.GeoRedundantBackup) {
		var ret bool
		return ret
	}
	return *o.GeoRedundantBackup
}

// GetGeoRedundantBackupOk returns a tuple with the GeoRedundantBackup field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetGeoRedundantBackupOk() (*bool, bool) {
	if o == nil || isNil(o.GeoRedundantBackup) {
		return nil, false
	}
	return o.GeoRedundantBackup, true
}

// HasGeoRedundantBackup returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasGeoRedundantBackup() bool {
	if o != nil && !isNil(o.GeoRedundantBackup) {
		return true
	}

	return false
}

// SetGeoRedundantBackup gets a reference to the given bool and assigns it to the GeoRedundantBackup field.
func (o *AzureDatabaseServerV4Parameters) SetGeoRedundantBackup(v bool) {
	o.GeoRedundantBackup = &v
}

// GetSkuCapacity returns the SkuCapacity field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetSkuCapacity() int32 {
	if o == nil || isNil(o.SkuCapacity) {
		var ret int32
		return ret
	}
	return *o.SkuCapacity
}

// GetSkuCapacityOk returns a tuple with the SkuCapacity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetSkuCapacityOk() (*int32, bool) {
	if o == nil || isNil(o.SkuCapacity) {
		return nil, false
	}
	return o.SkuCapacity, true
}

// HasSkuCapacity returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasSkuCapacity() bool {
	if o != nil && !isNil(o.SkuCapacity) {
		return true
	}

	return false
}

// SetSkuCapacity gets a reference to the given int32 and assigns it to the SkuCapacity field.
func (o *AzureDatabaseServerV4Parameters) SetSkuCapacity(v int32) {
	o.SkuCapacity = &v
}

// GetSkuFamily returns the SkuFamily field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetSkuFamily() string {
	if o == nil || isNil(o.SkuFamily) {
		var ret string
		return ret
	}
	return *o.SkuFamily
}

// GetSkuFamilyOk returns a tuple with the SkuFamily field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetSkuFamilyOk() (*string, bool) {
	if o == nil || isNil(o.SkuFamily) {
		return nil, false
	}
	return o.SkuFamily, true
}

// HasSkuFamily returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasSkuFamily() bool {
	if o != nil && !isNil(o.SkuFamily) {
		return true
	}

	return false
}

// SetSkuFamily gets a reference to the given string and assigns it to the SkuFamily field.
func (o *AzureDatabaseServerV4Parameters) SetSkuFamily(v string) {
	o.SkuFamily = &v
}

// GetSkuTier returns the SkuTier field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetSkuTier() string {
	if o == nil || isNil(o.SkuTier) {
		var ret string
		return ret
	}
	return *o.SkuTier
}

// GetSkuTierOk returns a tuple with the SkuTier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetSkuTierOk() (*string, bool) {
	if o == nil || isNil(o.SkuTier) {
		return nil, false
	}
	return o.SkuTier, true
}

// HasSkuTier returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasSkuTier() bool {
	if o != nil && !isNil(o.SkuTier) {
		return true
	}

	return false
}

// SetSkuTier gets a reference to the given string and assigns it to the SkuTier field.
func (o *AzureDatabaseServerV4Parameters) SetSkuTier(v string) {
	o.SkuTier = &v
}

// GetStorageAutoGrow returns the StorageAutoGrow field value if set, zero value otherwise.
func (o *AzureDatabaseServerV4Parameters) GetStorageAutoGrow() bool {
	if o == nil || isNil(o.StorageAutoGrow) {
		var ret bool
		return ret
	}
	return *o.StorageAutoGrow
}

// GetStorageAutoGrowOk returns a tuple with the StorageAutoGrow field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AzureDatabaseServerV4Parameters) GetStorageAutoGrowOk() (*bool, bool) {
	if o == nil || isNil(o.StorageAutoGrow) {
		return nil, false
	}
	return o.StorageAutoGrow, true
}

// HasStorageAutoGrow returns a boolean if a field has been set.
func (o *AzureDatabaseServerV4Parameters) HasStorageAutoGrow() bool {
	if o != nil && !isNil(o.StorageAutoGrow) {
		return true
	}

	return false
}

// SetStorageAutoGrow gets a reference to the given bool and assigns it to the StorageAutoGrow field.
func (o *AzureDatabaseServerV4Parameters) SetStorageAutoGrow(v bool) {
	o.StorageAutoGrow = &v
}

func (o AzureDatabaseServerV4Parameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AzureDatabaseServerV4Parameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BackupRetentionDays) {
		toSerialize["backupRetentionDays"] = o.BackupRetentionDays
	}
	if !isNil(o.DbVersion) {
		toSerialize["dbVersion"] = o.DbVersion
	}
	if !isNil(o.GeoRedundantBackup) {
		toSerialize["geoRedundantBackup"] = o.GeoRedundantBackup
	}
	if !isNil(o.SkuCapacity) {
		toSerialize["skuCapacity"] = o.SkuCapacity
	}
	if !isNil(o.SkuFamily) {
		toSerialize["skuFamily"] = o.SkuFamily
	}
	if !isNil(o.SkuTier) {
		toSerialize["skuTier"] = o.SkuTier
	}
	if !isNil(o.StorageAutoGrow) {
		toSerialize["storageAutoGrow"] = o.StorageAutoGrow
	}
	return toSerialize, nil
}

type NullableAzureDatabaseServerV4Parameters struct {
	value *AzureDatabaseServerV4Parameters
	isSet bool
}

func (v NullableAzureDatabaseServerV4Parameters) Get() *AzureDatabaseServerV4Parameters {
	return v.value
}

func (v *NullableAzureDatabaseServerV4Parameters) Set(val *AzureDatabaseServerV4Parameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAzureDatabaseServerV4Parameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAzureDatabaseServerV4Parameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAzureDatabaseServerV4Parameters(val *AzureDatabaseServerV4Parameters) *NullableAzureDatabaseServerV4Parameters {
	return &NullableAzureDatabaseServerV4Parameters{value: val, isSet: true}
}

func (v NullableAzureDatabaseServerV4Parameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAzureDatabaseServerV4Parameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
