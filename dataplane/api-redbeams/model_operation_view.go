/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the OperationView type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OperationView{}

// OperationView struct for OperationView
type OperationView struct {
	OperationId            *string                   `json:"operationId,omitempty"`
	OperationType          *string                   `json:"operationType,omitempty"`
	OperationResource      *string                   `json:"operationResource,omitempty"`
	Operations             []FlowProgressResponse    `json:"operations,omitempty"`
	SubOperations          *map[string]OperationView `json:"subOperations,omitempty"`
	SubOperationConditions *map[string]string        `json:"subOperationConditions,omitempty"`
	ProgressStatus         *string                   `json:"progressStatus,omitempty"`
	Progress               *int32                    `json:"progress,omitempty"`
}

// NewOperationView instantiates a new OperationView object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOperationView() *OperationView {
	this := OperationView{}
	return &this
}

// NewOperationViewWithDefaults instantiates a new OperationView object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOperationViewWithDefaults() *OperationView {
	this := OperationView{}
	return &this
}

// GetOperationId returns the OperationId field value if set, zero value otherwise.
func (o *OperationView) GetOperationId() string {
	if o == nil || isNil(o.OperationId) {
		var ret string
		return ret
	}
	return *o.OperationId
}

// GetOperationIdOk returns a tuple with the OperationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetOperationIdOk() (*string, bool) {
	if o == nil || isNil(o.OperationId) {
		return nil, false
	}
	return o.OperationId, true
}

// HasOperationId returns a boolean if a field has been set.
func (o *OperationView) HasOperationId() bool {
	if o != nil && !isNil(o.OperationId) {
		return true
	}

	return false
}

// SetOperationId gets a reference to the given string and assigns it to the OperationId field.
func (o *OperationView) SetOperationId(v string) {
	o.OperationId = &v
}

// GetOperationType returns the OperationType field value if set, zero value otherwise.
func (o *OperationView) GetOperationType() string {
	if o == nil || isNil(o.OperationType) {
		var ret string
		return ret
	}
	return *o.OperationType
}

// GetOperationTypeOk returns a tuple with the OperationType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetOperationTypeOk() (*string, bool) {
	if o == nil || isNil(o.OperationType) {
		return nil, false
	}
	return o.OperationType, true
}

// HasOperationType returns a boolean if a field has been set.
func (o *OperationView) HasOperationType() bool {
	if o != nil && !isNil(o.OperationType) {
		return true
	}

	return false
}

// SetOperationType gets a reference to the given string and assigns it to the OperationType field.
func (o *OperationView) SetOperationType(v string) {
	o.OperationType = &v
}

// GetOperationResource returns the OperationResource field value if set, zero value otherwise.
func (o *OperationView) GetOperationResource() string {
	if o == nil || isNil(o.OperationResource) {
		var ret string
		return ret
	}
	return *o.OperationResource
}

// GetOperationResourceOk returns a tuple with the OperationResource field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetOperationResourceOk() (*string, bool) {
	if o == nil || isNil(o.OperationResource) {
		return nil, false
	}
	return o.OperationResource, true
}

// HasOperationResource returns a boolean if a field has been set.
func (o *OperationView) HasOperationResource() bool {
	if o != nil && !isNil(o.OperationResource) {
		return true
	}

	return false
}

// SetOperationResource gets a reference to the given string and assigns it to the OperationResource field.
func (o *OperationView) SetOperationResource(v string) {
	o.OperationResource = &v
}

// GetOperations returns the Operations field value if set, zero value otherwise.
func (o *OperationView) GetOperations() []FlowProgressResponse {
	if o == nil || isNil(o.Operations) {
		var ret []FlowProgressResponse
		return ret
	}
	return o.Operations
}

// GetOperationsOk returns a tuple with the Operations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetOperationsOk() ([]FlowProgressResponse, bool) {
	if o == nil || isNil(o.Operations) {
		return nil, false
	}
	return o.Operations, true
}

// HasOperations returns a boolean if a field has been set.
func (o *OperationView) HasOperations() bool {
	if o != nil && !isNil(o.Operations) {
		return true
	}

	return false
}

// SetOperations gets a reference to the given []FlowProgressResponse and assigns it to the Operations field.
func (o *OperationView) SetOperations(v []FlowProgressResponse) {
	o.Operations = v
}

// GetSubOperations returns the SubOperations field value if set, zero value otherwise.
func (o *OperationView) GetSubOperations() map[string]OperationView {
	if o == nil || isNil(o.SubOperations) {
		var ret map[string]OperationView
		return ret
	}
	return *o.SubOperations
}

// GetSubOperationsOk returns a tuple with the SubOperations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetSubOperationsOk() (*map[string]OperationView, bool) {
	if o == nil || isNil(o.SubOperations) {
		return nil, false
	}
	return o.SubOperations, true
}

// HasSubOperations returns a boolean if a field has been set.
func (o *OperationView) HasSubOperations() bool {
	if o != nil && !isNil(o.SubOperations) {
		return true
	}

	return false
}

// SetSubOperations gets a reference to the given map[string]OperationView and assigns it to the SubOperations field.
func (o *OperationView) SetSubOperations(v map[string]OperationView) {
	o.SubOperations = &v
}

// GetSubOperationConditions returns the SubOperationConditions field value if set, zero value otherwise.
func (o *OperationView) GetSubOperationConditions() map[string]string {
	if o == nil || isNil(o.SubOperationConditions) {
		var ret map[string]string
		return ret
	}
	return *o.SubOperationConditions
}

// GetSubOperationConditionsOk returns a tuple with the SubOperationConditions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetSubOperationConditionsOk() (*map[string]string, bool) {
	if o == nil || isNil(o.SubOperationConditions) {
		return nil, false
	}
	return o.SubOperationConditions, true
}

// HasSubOperationConditions returns a boolean if a field has been set.
func (o *OperationView) HasSubOperationConditions() bool {
	if o != nil && !isNil(o.SubOperationConditions) {
		return true
	}

	return false
}

// SetSubOperationConditions gets a reference to the given map[string]string and assigns it to the SubOperationConditions field.
func (o *OperationView) SetSubOperationConditions(v map[string]string) {
	o.SubOperationConditions = &v
}

// GetProgressStatus returns the ProgressStatus field value if set, zero value otherwise.
func (o *OperationView) GetProgressStatus() string {
	if o == nil || isNil(o.ProgressStatus) {
		var ret string
		return ret
	}
	return *o.ProgressStatus
}

// GetProgressStatusOk returns a tuple with the ProgressStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetProgressStatusOk() (*string, bool) {
	if o == nil || isNil(o.ProgressStatus) {
		return nil, false
	}
	return o.ProgressStatus, true
}

// HasProgressStatus returns a boolean if a field has been set.
func (o *OperationView) HasProgressStatus() bool {
	if o != nil && !isNil(o.ProgressStatus) {
		return true
	}

	return false
}

// SetProgressStatus gets a reference to the given string and assigns it to the ProgressStatus field.
func (o *OperationView) SetProgressStatus(v string) {
	o.ProgressStatus = &v
}

// GetProgress returns the Progress field value if set, zero value otherwise.
func (o *OperationView) GetProgress() int32 {
	if o == nil || isNil(o.Progress) {
		var ret int32
		return ret
	}
	return *o.Progress
}

// GetProgressOk returns a tuple with the Progress field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OperationView) GetProgressOk() (*int32, bool) {
	if o == nil || isNil(o.Progress) {
		return nil, false
	}
	return o.Progress, true
}

// HasProgress returns a boolean if a field has been set.
func (o *OperationView) HasProgress() bool {
	if o != nil && !isNil(o.Progress) {
		return true
	}

	return false
}

// SetProgress gets a reference to the given int32 and assigns it to the Progress field.
func (o *OperationView) SetProgress(v int32) {
	o.Progress = &v
}

func (o OperationView) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OperationView) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.OperationId) {
		toSerialize["operationId"] = o.OperationId
	}
	if !isNil(o.OperationType) {
		toSerialize["operationType"] = o.OperationType
	}
	if !isNil(o.OperationResource) {
		toSerialize["operationResource"] = o.OperationResource
	}
	if !isNil(o.Operations) {
		toSerialize["operations"] = o.Operations
	}
	if !isNil(o.SubOperations) {
		toSerialize["subOperations"] = o.SubOperations
	}
	if !isNil(o.SubOperationConditions) {
		toSerialize["subOperationConditions"] = o.SubOperationConditions
	}
	if !isNil(o.ProgressStatus) {
		toSerialize["progressStatus"] = o.ProgressStatus
	}
	if !isNil(o.Progress) {
		toSerialize["progress"] = o.Progress
	}
	return toSerialize, nil
}

type NullableOperationView struct {
	value *OperationView
	isSet bool
}

func (v NullableOperationView) Get() *OperationView {
	return v.value
}

func (v *NullableOperationView) Set(val *OperationView) {
	v.value = val
	v.isSet = true
}

func (v NullableOperationView) IsSet() bool {
	return v.isSet
}

func (v *NullableOperationView) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOperationView(val *OperationView) *NullableOperationView {
	return &NullableOperationView{value: val, isSet: true}
}

func (v NullableOperationView) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOperationView) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
