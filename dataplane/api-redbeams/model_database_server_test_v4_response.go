/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseServerTestV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerTestV4Response{}

// DatabaseServerTestV4Response Response for testing connectivity to a database server
type DatabaseServerTestV4Response struct {
	// Result of database server connection test
	Result string `json:"result"`
}

// NewDatabaseServerTestV4Response instantiates a new DatabaseServerTestV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerTestV4Response(result string) *DatabaseServerTestV4Response {
	this := DatabaseServerTestV4Response{}
	this.Result = result
	return &this
}

// NewDatabaseServerTestV4ResponseWithDefaults instantiates a new DatabaseServerTestV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerTestV4ResponseWithDefaults() *DatabaseServerTestV4Response {
	this := DatabaseServerTestV4Response{}
	return &this
}

// GetResult returns the Result field value
func (o *DatabaseServerTestV4Response) GetResult() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Result
}

// GetResultOk returns a tuple with the Result field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerTestV4Response) GetResultOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Result, true
}

// SetResult sets field value
func (o *DatabaseServerTestV4Response) SetResult(v string) {
	o.Result = v
}

func (o DatabaseServerTestV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerTestV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["result"] = o.Result
	return toSerialize, nil
}

type NullableDatabaseServerTestV4Response struct {
	value *DatabaseServerTestV4Response
	isSet bool
}

func (v NullableDatabaseServerTestV4Response) Get() *DatabaseServerTestV4Response {
	return v.value
}

func (v *NullableDatabaseServerTestV4Response) Set(val *DatabaseServerTestV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerTestV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerTestV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerTestV4Response(val *DatabaseServerTestV4Response) *NullableDatabaseServerTestV4Response {
	return &NullableDatabaseServerTestV4Response{value: val, isSet: true}
}

func (v NullableDatabaseServerTestV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerTestV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
