/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the Sort type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sort{}

// Sort struct for Sort
type Sort struct {
	Empty    *bool `json:"empty,omitempty"`
	Sorted   *bool `json:"sorted,omitempty"`
	Unsorted *bool `json:"unsorted,omitempty"`
}

// NewSort instantiates a new Sort object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSort() *Sort {
	this := Sort{}
	return &this
}

// NewSortWithDefaults instantiates a new Sort object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSortWithDefaults() *Sort {
	this := Sort{}
	return &this
}

// GetEmpty returns the Empty field value if set, zero value otherwise.
func (o *Sort) GetEmpty() bool {
	if o == nil || isNil(o.Empty) {
		var ret bool
		return ret
	}
	return *o.Empty
}

// GetEmptyOk returns a tuple with the Empty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sort) GetEmptyOk() (*bool, bool) {
	if o == nil || isNil(o.Empty) {
		return nil, false
	}
	return o.Empty, true
}

// HasEmpty returns a boolean if a field has been set.
func (o *Sort) HasEmpty() bool {
	if o != nil && !isNil(o.Empty) {
		return true
	}

	return false
}

// SetEmpty gets a reference to the given bool and assigns it to the Empty field.
func (o *Sort) SetEmpty(v bool) {
	o.Empty = &v
}

// GetSorted returns the Sorted field value if set, zero value otherwise.
func (o *Sort) GetSorted() bool {
	if o == nil || isNil(o.Sorted) {
		var ret bool
		return ret
	}
	return *o.Sorted
}

// GetSortedOk returns a tuple with the Sorted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sort) GetSortedOk() (*bool, bool) {
	if o == nil || isNil(o.Sorted) {
		return nil, false
	}
	return o.Sorted, true
}

// HasSorted returns a boolean if a field has been set.
func (o *Sort) HasSorted() bool {
	if o != nil && !isNil(o.Sorted) {
		return true
	}

	return false
}

// SetSorted gets a reference to the given bool and assigns it to the Sorted field.
func (o *Sort) SetSorted(v bool) {
	o.Sorted = &v
}

// GetUnsorted returns the Unsorted field value if set, zero value otherwise.
func (o *Sort) GetUnsorted() bool {
	if o == nil || isNil(o.Unsorted) {
		var ret bool
		return ret
	}
	return *o.Unsorted
}

// GetUnsortedOk returns a tuple with the Unsorted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sort) GetUnsortedOk() (*bool, bool) {
	if o == nil || isNil(o.Unsorted) {
		return nil, false
	}
	return o.Unsorted, true
}

// HasUnsorted returns a boolean if a field has been set.
func (o *Sort) HasUnsorted() bool {
	if o != nil && !isNil(o.Unsorted) {
		return true
	}

	return false
}

// SetUnsorted gets a reference to the given bool and assigns it to the Unsorted field.
func (o *Sort) SetUnsorted(v bool) {
	o.Unsorted = &v
}

func (o Sort) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sort) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Empty) {
		toSerialize["empty"] = o.Empty
	}
	if !isNil(o.Sorted) {
		toSerialize["sorted"] = o.Sorted
	}
	if !isNil(o.Unsorted) {
		toSerialize["unsorted"] = o.Unsorted
	}
	return toSerialize, nil
}

type NullableSort struct {
	value *Sort
	isSet bool
}

func (v NullableSort) Get() *Sort {
	return v.value
}

func (v *NullableSort) Set(val *Sort) {
	v.value = val
	v.isSet = true
}

func (v NullableSort) IsSet() bool {
	return v.isSet
}

func (v *NullableSort) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSort(val *Sort) *NullableSort {
	return &NullableSort{value: val, isSet: true}
}

func (v NullableSort) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSort) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
