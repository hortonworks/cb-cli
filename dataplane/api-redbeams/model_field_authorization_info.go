/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the FieldAuthorizationInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &FieldAuthorizationInfo{}

// FieldAuthorizationInfo struct for FieldAuthorizationInfo
type FieldAuthorizationInfo struct {
	FieldName  *string `json:"fieldName,omitempty"`
	Permission *string `json:"permission,omitempty"`
}

// NewFieldAuthorizationInfo instantiates a new FieldAuthorizationInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFieldAuthorizationInfo() *FieldAuthorizationInfo {
	this := FieldAuthorizationInfo{}
	return &this
}

// NewFieldAuthorizationInfoWithDefaults instantiates a new FieldAuthorizationInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFieldAuthorizationInfoWithDefaults() *FieldAuthorizationInfo {
	this := FieldAuthorizationInfo{}
	return &this
}

// GetFieldName returns the FieldName field value if set, zero value otherwise.
func (o *FieldAuthorizationInfo) GetFieldName() string {
	if o == nil || isNil(o.FieldName) {
		var ret string
		return ret
	}
	return *o.FieldName
}

// GetFieldNameOk returns a tuple with the FieldName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldAuthorizationInfo) GetFieldNameOk() (*string, bool) {
	if o == nil || isNil(o.FieldName) {
		return nil, false
	}
	return o.FieldName, true
}

// HasFieldName returns a boolean if a field has been set.
func (o *FieldAuthorizationInfo) HasFieldName() bool {
	if o != nil && !isNil(o.FieldName) {
		return true
	}

	return false
}

// SetFieldName gets a reference to the given string and assigns it to the FieldName field.
func (o *FieldAuthorizationInfo) SetFieldName(v string) {
	o.FieldName = &v
}

// GetPermission returns the Permission field value if set, zero value otherwise.
func (o *FieldAuthorizationInfo) GetPermission() string {
	if o == nil || isNil(o.Permission) {
		var ret string
		return ret
	}
	return *o.Permission
}

// GetPermissionOk returns a tuple with the Permission field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FieldAuthorizationInfo) GetPermissionOk() (*string, bool) {
	if o == nil || isNil(o.Permission) {
		return nil, false
	}
	return o.Permission, true
}

// HasPermission returns a boolean if a field has been set.
func (o *FieldAuthorizationInfo) HasPermission() bool {
	if o != nil && !isNil(o.Permission) {
		return true
	}

	return false
}

// SetPermission gets a reference to the given string and assigns it to the Permission field.
func (o *FieldAuthorizationInfo) SetPermission(v string) {
	o.Permission = &v
}

func (o FieldAuthorizationInfo) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o FieldAuthorizationInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.FieldName) {
		toSerialize["fieldName"] = o.FieldName
	}
	if !isNil(o.Permission) {
		toSerialize["permission"] = o.Permission
	}
	return toSerialize, nil
}

type NullableFieldAuthorizationInfo struct {
	value *FieldAuthorizationInfo
	isSet bool
}

func (v NullableFieldAuthorizationInfo) Get() *FieldAuthorizationInfo {
	return v.value
}

func (v *NullableFieldAuthorizationInfo) Set(val *FieldAuthorizationInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableFieldAuthorizationInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableFieldAuthorizationInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFieldAuthorizationInfo(val *FieldAuthorizationInfo) *NullableFieldAuthorizationInfo {
	return &NullableFieldAuthorizationInfo{value: val, isSet: true}
}

func (v NullableFieldAuthorizationInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFieldAuthorizationInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
