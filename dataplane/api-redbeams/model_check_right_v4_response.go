/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CheckRightV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckRightV4Response{}

// CheckRightV4Response struct for CheckRightV4Response
type CheckRightV4Response struct {
	Responses []CheckRightV4SingleResponse `json:"responses,omitempty"`
}

// NewCheckRightV4Response instantiates a new CheckRightV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckRightV4Response() *CheckRightV4Response {
	this := CheckRightV4Response{}
	return &this
}

// NewCheckRightV4ResponseWithDefaults instantiates a new CheckRightV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckRightV4ResponseWithDefaults() *CheckRightV4Response {
	this := CheckRightV4Response{}
	return &this
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *CheckRightV4Response) GetResponses() []CheckRightV4SingleResponse {
	if o == nil || isNil(o.Responses) {
		var ret []CheckRightV4SingleResponse
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckRightV4Response) GetResponsesOk() ([]CheckRightV4SingleResponse, bool) {
	if o == nil || isNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *CheckRightV4Response) HasResponses() bool {
	if o != nil && !isNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []CheckRightV4SingleResponse and assigns it to the Responses field.
func (o *CheckRightV4Response) SetResponses(v []CheckRightV4SingleResponse) {
	o.Responses = v
}

func (o CheckRightV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckRightV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	return toSerialize, nil
}

type NullableCheckRightV4Response struct {
	value *CheckRightV4Response
	isSet bool
}

func (v NullableCheckRightV4Response) Get() *CheckRightV4Response {
	return v.value
}

func (v *NullableCheckRightV4Response) Set(val *CheckRightV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckRightV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckRightV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckRightV4Response(val *CheckRightV4Response) *NullableCheckRightV4Response {
	return &NullableCheckRightV4Response{value: val, isSet: true}
}

func (v NullableCheckRightV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckRightV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
