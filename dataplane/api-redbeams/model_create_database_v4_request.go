/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CreateDatabaseV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CreateDatabaseV4Request{}

// CreateDatabaseV4Request Request for creating a new database on a registered database server
type CreateDatabaseV4Request struct {
	// CRN of the database server
	ExistingDatabaseServerCrn string `json:"existingDatabaseServerCrn"`
	// Name of the database
	DatabaseName string `json:"databaseName"`
	// Type of database, i.e., the service name that will use the database (HIVE, DRUID, SUPERSET, RANGER, ...)
	Type string `json:"type"`
	// Description of the database
	DatabaseDescription *string `json:"databaseDescription,omitempty"`
}

// NewCreateDatabaseV4Request instantiates a new CreateDatabaseV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateDatabaseV4Request(existingDatabaseServerCrn string, databaseName string, type_ string) *CreateDatabaseV4Request {
	this := CreateDatabaseV4Request{}
	this.ExistingDatabaseServerCrn = existingDatabaseServerCrn
	this.DatabaseName = databaseName
	this.Type = type_
	return &this
}

// NewCreateDatabaseV4RequestWithDefaults instantiates a new CreateDatabaseV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateDatabaseV4RequestWithDefaults() *CreateDatabaseV4Request {
	this := CreateDatabaseV4Request{}
	return &this
}

// GetExistingDatabaseServerCrn returns the ExistingDatabaseServerCrn field value
func (o *CreateDatabaseV4Request) GetExistingDatabaseServerCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ExistingDatabaseServerCrn
}

// GetExistingDatabaseServerCrnOk returns a tuple with the ExistingDatabaseServerCrn field value
// and a boolean to check if the value has been set.
func (o *CreateDatabaseV4Request) GetExistingDatabaseServerCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ExistingDatabaseServerCrn, true
}

// SetExistingDatabaseServerCrn sets field value
func (o *CreateDatabaseV4Request) SetExistingDatabaseServerCrn(v string) {
	o.ExistingDatabaseServerCrn = v
}

// GetDatabaseName returns the DatabaseName field value
func (o *CreateDatabaseV4Request) GetDatabaseName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseName
}

// GetDatabaseNameOk returns a tuple with the DatabaseName field value
// and a boolean to check if the value has been set.
func (o *CreateDatabaseV4Request) GetDatabaseNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseName, true
}

// SetDatabaseName sets field value
func (o *CreateDatabaseV4Request) SetDatabaseName(v string) {
	o.DatabaseName = v
}

// GetType returns the Type field value
func (o *CreateDatabaseV4Request) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *CreateDatabaseV4Request) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *CreateDatabaseV4Request) SetType(v string) {
	o.Type = v
}

// GetDatabaseDescription returns the DatabaseDescription field value if set, zero value otherwise.
func (o *CreateDatabaseV4Request) GetDatabaseDescription() string {
	if o == nil || isNil(o.DatabaseDescription) {
		var ret string
		return ret
	}
	return *o.DatabaseDescription
}

// GetDatabaseDescriptionOk returns a tuple with the DatabaseDescription field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateDatabaseV4Request) GetDatabaseDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.DatabaseDescription) {
		return nil, false
	}
	return o.DatabaseDescription, true
}

// HasDatabaseDescription returns a boolean if a field has been set.
func (o *CreateDatabaseV4Request) HasDatabaseDescription() bool {
	if o != nil && !isNil(o.DatabaseDescription) {
		return true
	}

	return false
}

// SetDatabaseDescription gets a reference to the given string and assigns it to the DatabaseDescription field.
func (o *CreateDatabaseV4Request) SetDatabaseDescription(v string) {
	o.DatabaseDescription = &v
}

func (o CreateDatabaseV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CreateDatabaseV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["existingDatabaseServerCrn"] = o.ExistingDatabaseServerCrn
	toSerialize["databaseName"] = o.DatabaseName
	toSerialize["type"] = o.Type
	if !isNil(o.DatabaseDescription) {
		toSerialize["databaseDescription"] = o.DatabaseDescription
	}
	return toSerialize, nil
}

type NullableCreateDatabaseV4Request struct {
	value *CreateDatabaseV4Request
	isSet bool
}

func (v NullableCreateDatabaseV4Request) Get() *CreateDatabaseV4Request {
	return v.value
}

func (v *NullableCreateDatabaseV4Request) Set(val *CreateDatabaseV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDatabaseV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDatabaseV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDatabaseV4Request(val *CreateDatabaseV4Request) *NullableCreateDatabaseV4Request {
	return &NullableCreateDatabaseV4Request{value: val, isSet: true}
}

func (v NullableCreateDatabaseV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDatabaseV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
