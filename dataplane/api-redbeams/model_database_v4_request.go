/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the DatabaseV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseV4Request{}

// DatabaseV4Request Request containing information about a database to be registered
type DatabaseV4Request struct {
	// Name of the database
	Name string `json:"name"`
	// Description of the database
	Description *string `json:"description,omitempty"`
	// JDBC connection URL in the form of jdbc:<db-type>:<driver-specific-part>
	ConnectionURL string `json:"connectionURL"`
	// Type of database, i.e., the service name that will use the database (HIVE, DRUID, SUPERSET, RANGER, ...)
	Type string `json:"type"`
	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver *string `json:"connectionDriver,omitempty"`
	// CRN of the environment of the database
	EnvironmentCrn string `json:"environmentCrn"`
	// Username to use for authentication
	ConnectionUserName string `json:"connectionUserName"`
	// Password to use for authentication
	ConnectionPassword string `json:"connectionPassword"`
}

// NewDatabaseV4Request instantiates a new DatabaseV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseV4Request(name string, connectionURL string, type_ string, environmentCrn string, connectionUserName string, connectionPassword string) *DatabaseV4Request {
	this := DatabaseV4Request{}
	this.Name = name
	this.ConnectionURL = connectionURL
	this.Type = type_
	this.EnvironmentCrn = environmentCrn
	this.ConnectionUserName = connectionUserName
	this.ConnectionPassword = connectionPassword
	return &this
}

// NewDatabaseV4RequestWithDefaults instantiates a new DatabaseV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseV4RequestWithDefaults() *DatabaseV4Request {
	this := DatabaseV4Request{}
	return &this
}

// GetName returns the Name field value
func (o *DatabaseV4Request) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseV4Request) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatabaseV4Request) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatabaseV4Request) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatabaseV4Request) SetDescription(v string) {
	o.Description = &v
}

// GetConnectionURL returns the ConnectionURL field value
func (o *DatabaseV4Request) GetConnectionURL() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionURL
}

// GetConnectionURLOk returns a tuple with the ConnectionURL field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetConnectionURLOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionURL, true
}

// SetConnectionURL sets field value
func (o *DatabaseV4Request) SetConnectionURL(v string) {
	o.ConnectionURL = v
}

// GetType returns the Type field value
func (o *DatabaseV4Request) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *DatabaseV4Request) SetType(v string) {
	o.Type = v
}

// GetConnectionDriver returns the ConnectionDriver field value if set, zero value otherwise.
func (o *DatabaseV4Request) GetConnectionDriver() string {
	if o == nil || isNil(o.ConnectionDriver) {
		var ret string
		return ret
	}
	return *o.ConnectionDriver
}

// GetConnectionDriverOk returns a tuple with the ConnectionDriver field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetConnectionDriverOk() (*string, bool) {
	if o == nil || isNil(o.ConnectionDriver) {
		return nil, false
	}
	return o.ConnectionDriver, true
}

// HasConnectionDriver returns a boolean if a field has been set.
func (o *DatabaseV4Request) HasConnectionDriver() bool {
	if o != nil && !isNil(o.ConnectionDriver) {
		return true
	}

	return false
}

// SetConnectionDriver gets a reference to the given string and assigns it to the ConnectionDriver field.
func (o *DatabaseV4Request) SetConnectionDriver(v string) {
	o.ConnectionDriver = &v
}

// GetEnvironmentCrn returns the EnvironmentCrn field value
func (o *DatabaseV4Request) GetEnvironmentCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentCrn
}

// GetEnvironmentCrnOk returns a tuple with the EnvironmentCrn field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetEnvironmentCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentCrn, true
}

// SetEnvironmentCrn sets field value
func (o *DatabaseV4Request) SetEnvironmentCrn(v string) {
	o.EnvironmentCrn = v
}

// GetConnectionUserName returns the ConnectionUserName field value
func (o *DatabaseV4Request) GetConnectionUserName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionUserName
}

// GetConnectionUserNameOk returns a tuple with the ConnectionUserName field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetConnectionUserNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionUserName, true
}

// SetConnectionUserName sets field value
func (o *DatabaseV4Request) SetConnectionUserName(v string) {
	o.ConnectionUserName = v
}

// GetConnectionPassword returns the ConnectionPassword field value
func (o *DatabaseV4Request) GetConnectionPassword() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionPassword
}

// GetConnectionPasswordOk returns a tuple with the ConnectionPassword field value
// and a boolean to check if the value has been set.
func (o *DatabaseV4Request) GetConnectionPasswordOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionPassword, true
}

// SetConnectionPassword sets field value
func (o *DatabaseV4Request) SetConnectionPassword(v string) {
	o.ConnectionPassword = v
}

func (o DatabaseV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["connectionURL"] = o.ConnectionURL
	toSerialize["type"] = o.Type
	if !isNil(o.ConnectionDriver) {
		toSerialize["connectionDriver"] = o.ConnectionDriver
	}
	toSerialize["environmentCrn"] = o.EnvironmentCrn
	toSerialize["connectionUserName"] = o.ConnectionUserName
	toSerialize["connectionPassword"] = o.ConnectionPassword
	return toSerialize, nil
}

type NullableDatabaseV4Request struct {
	value *DatabaseV4Request
	isSet bool
}

func (v NullableDatabaseV4Request) Get() *DatabaseV4Request {
	return v.value
}

func (v *NullableDatabaseV4Request) Set(val *DatabaseV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseV4Request(val *DatabaseV4Request) *NullableDatabaseV4Request {
	return &NullableDatabaseV4Request{value: val, isSet: true}
}

func (v NullableDatabaseV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
