/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the NetworkV4StackRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &NetworkV4StackRequest{}

// NetworkV4StackRequest Network information for the database stack
type NetworkV4StackRequest struct {
	Aws   *AwsNetworkV4Parameters   `json:"aws,omitempty"`
	Azure *AzureNetworkV4Parameters `json:"azure,omitempty"`
	Gcp   *GcpNetworkV4Parameters   `json:"gcp,omitempty"`
}

// NewNetworkV4StackRequest instantiates a new NetworkV4StackRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewNetworkV4StackRequest() *NetworkV4StackRequest {
	this := NetworkV4StackRequest{}
	return &this
}

// NewNetworkV4StackRequestWithDefaults instantiates a new NetworkV4StackRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewNetworkV4StackRequestWithDefaults() *NetworkV4StackRequest {
	this := NetworkV4StackRequest{}
	return &this
}

// GetAws returns the Aws field value if set, zero value otherwise.
func (o *NetworkV4StackRequest) GetAws() AwsNetworkV4Parameters {
	if o == nil || isNil(o.Aws) {
		var ret AwsNetworkV4Parameters
		return ret
	}
	return *o.Aws
}

// GetAwsOk returns a tuple with the Aws field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkV4StackRequest) GetAwsOk() (*AwsNetworkV4Parameters, bool) {
	if o == nil || isNil(o.Aws) {
		return nil, false
	}
	return o.Aws, true
}

// HasAws returns a boolean if a field has been set.
func (o *NetworkV4StackRequest) HasAws() bool {
	if o != nil && !isNil(o.Aws) {
		return true
	}

	return false
}

// SetAws gets a reference to the given AwsNetworkV4Parameters and assigns it to the Aws field.
func (o *NetworkV4StackRequest) SetAws(v AwsNetworkV4Parameters) {
	o.Aws = &v
}

// GetAzure returns the Azure field value if set, zero value otherwise.
func (o *NetworkV4StackRequest) GetAzure() AzureNetworkV4Parameters {
	if o == nil || isNil(o.Azure) {
		var ret AzureNetworkV4Parameters
		return ret
	}
	return *o.Azure
}

// GetAzureOk returns a tuple with the Azure field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkV4StackRequest) GetAzureOk() (*AzureNetworkV4Parameters, bool) {
	if o == nil || isNil(o.Azure) {
		return nil, false
	}
	return o.Azure, true
}

// HasAzure returns a boolean if a field has been set.
func (o *NetworkV4StackRequest) HasAzure() bool {
	if o != nil && !isNil(o.Azure) {
		return true
	}

	return false
}

// SetAzure gets a reference to the given AzureNetworkV4Parameters and assigns it to the Azure field.
func (o *NetworkV4StackRequest) SetAzure(v AzureNetworkV4Parameters) {
	o.Azure = &v
}

// GetGcp returns the Gcp field value if set, zero value otherwise.
func (o *NetworkV4StackRequest) GetGcp() GcpNetworkV4Parameters {
	if o == nil || isNil(o.Gcp) {
		var ret GcpNetworkV4Parameters
		return ret
	}
	return *o.Gcp
}

// GetGcpOk returns a tuple with the Gcp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *NetworkV4StackRequest) GetGcpOk() (*GcpNetworkV4Parameters, bool) {
	if o == nil || isNil(o.Gcp) {
		return nil, false
	}
	return o.Gcp, true
}

// HasGcp returns a boolean if a field has been set.
func (o *NetworkV4StackRequest) HasGcp() bool {
	if o != nil && !isNil(o.Gcp) {
		return true
	}

	return false
}

// SetGcp gets a reference to the given GcpNetworkV4Parameters and assigns it to the Gcp field.
func (o *NetworkV4StackRequest) SetGcp(v GcpNetworkV4Parameters) {
	o.Gcp = &v
}

func (o NetworkV4StackRequest) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o NetworkV4StackRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Aws) {
		toSerialize["aws"] = o.Aws
	}
	if !isNil(o.Azure) {
		toSerialize["azure"] = o.Azure
	}
	if !isNil(o.Gcp) {
		toSerialize["gcp"] = o.Gcp
	}
	return toSerialize, nil
}

type NullableNetworkV4StackRequest struct {
	value *NetworkV4StackRequest
	isSet bool
}

func (v NullableNetworkV4StackRequest) Get() *NetworkV4StackRequest {
	return v.value
}

func (v *NullableNetworkV4StackRequest) Set(val *NetworkV4StackRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableNetworkV4StackRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableNetworkV4StackRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNetworkV4StackRequest(val *NetworkV4StackRequest) *NullableNetworkV4StackRequest {
	return &NullableNetworkV4StackRequest{value: val, isSet: true}
}

func (v NullableNetworkV4StackRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNetworkV4StackRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
