/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CheckRightOnResourcesV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckRightOnResourcesV4Response{}

// CheckRightOnResourcesV4Response struct for CheckRightOnResourcesV4Response
type CheckRightOnResourcesV4Response struct {
	Right     *string                        `json:"right,omitempty"`
	Responses []CheckResourceRightV4Response `json:"responses,omitempty"`
}

// NewCheckRightOnResourcesV4Response instantiates a new CheckRightOnResourcesV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckRightOnResourcesV4Response() *CheckRightOnResourcesV4Response {
	this := CheckRightOnResourcesV4Response{}
	return &this
}

// NewCheckRightOnResourcesV4ResponseWithDefaults instantiates a new CheckRightOnResourcesV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckRightOnResourcesV4ResponseWithDefaults() *CheckRightOnResourcesV4Response {
	this := CheckRightOnResourcesV4Response{}
	return &this
}

// GetRight returns the Right field value if set, zero value otherwise.
func (o *CheckRightOnResourcesV4Response) GetRight() string {
	if o == nil || isNil(o.Right) {
		var ret string
		return ret
	}
	return *o.Right
}

// GetRightOk returns a tuple with the Right field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckRightOnResourcesV4Response) GetRightOk() (*string, bool) {
	if o == nil || isNil(o.Right) {
		return nil, false
	}
	return o.Right, true
}

// HasRight returns a boolean if a field has been set.
func (o *CheckRightOnResourcesV4Response) HasRight() bool {
	if o != nil && !isNil(o.Right) {
		return true
	}

	return false
}

// SetRight gets a reference to the given string and assigns it to the Right field.
func (o *CheckRightOnResourcesV4Response) SetRight(v string) {
	o.Right = &v
}

// GetResponses returns the Responses field value if set, zero value otherwise.
func (o *CheckRightOnResourcesV4Response) GetResponses() []CheckResourceRightV4Response {
	if o == nil || isNil(o.Responses) {
		var ret []CheckResourceRightV4Response
		return ret
	}
	return o.Responses
}

// GetResponsesOk returns a tuple with the Responses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckRightOnResourcesV4Response) GetResponsesOk() ([]CheckResourceRightV4Response, bool) {
	if o == nil || isNil(o.Responses) {
		return nil, false
	}
	return o.Responses, true
}

// HasResponses returns a boolean if a field has been set.
func (o *CheckRightOnResourcesV4Response) HasResponses() bool {
	if o != nil && !isNil(o.Responses) {
		return true
	}

	return false
}

// SetResponses gets a reference to the given []CheckResourceRightV4Response and assigns it to the Responses field.
func (o *CheckRightOnResourcesV4Response) SetResponses(v []CheckResourceRightV4Response) {
	o.Responses = v
}

func (o CheckRightOnResourcesV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckRightOnResourcesV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Right) {
		toSerialize["right"] = o.Right
	}
	if !isNil(o.Responses) {
		toSerialize["responses"] = o.Responses
	}
	return toSerialize, nil
}

type NullableCheckRightOnResourcesV4Response struct {
	value *CheckRightOnResourcesV4Response
	isSet bool
}

func (v NullableCheckRightOnResourcesV4Response) Get() *CheckRightOnResourcesV4Response {
	return v.value
}

func (v *NullableCheckRightOnResourcesV4Response) Set(val *CheckRightOnResourcesV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckRightOnResourcesV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckRightOnResourcesV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckRightOnResourcesV4Response(val *CheckRightOnResourcesV4Response) *NullableCheckRightOnResourcesV4Response {
	return &NullableCheckRightOnResourcesV4Response{value: val, isSet: true}
}

func (v NullableCheckRightOnResourcesV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckRightOnResourcesV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
