/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the AwsNetworkV4Parameters type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &AwsNetworkV4Parameters{}

// AwsNetworkV4Parameters AWS-specific parameters for the network
type AwsNetworkV4Parameters struct {
	// Subnet ID(s) of the specified AWS network
	SubnetId *string `json:"subnetId,omitempty"`
}

// NewAwsNetworkV4Parameters instantiates a new AwsNetworkV4Parameters object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAwsNetworkV4Parameters() *AwsNetworkV4Parameters {
	this := AwsNetworkV4Parameters{}
	return &this
}

// NewAwsNetworkV4ParametersWithDefaults instantiates a new AwsNetworkV4Parameters object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAwsNetworkV4ParametersWithDefaults() *AwsNetworkV4Parameters {
	this := AwsNetworkV4Parameters{}
	return &this
}

// GetSubnetId returns the SubnetId field value if set, zero value otherwise.
func (o *AwsNetworkV4Parameters) GetSubnetId() string {
	if o == nil || isNil(o.SubnetId) {
		var ret string
		return ret
	}
	return *o.SubnetId
}

// GetSubnetIdOk returns a tuple with the SubnetId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *AwsNetworkV4Parameters) GetSubnetIdOk() (*string, bool) {
	if o == nil || isNil(o.SubnetId) {
		return nil, false
	}
	return o.SubnetId, true
}

// HasSubnetId returns a boolean if a field has been set.
func (o *AwsNetworkV4Parameters) HasSubnetId() bool {
	if o != nil && !isNil(o.SubnetId) {
		return true
	}

	return false
}

// SetSubnetId gets a reference to the given string and assigns it to the SubnetId field.
func (o *AwsNetworkV4Parameters) SetSubnetId(v string) {
	o.SubnetId = &v
}

func (o AwsNetworkV4Parameters) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o AwsNetworkV4Parameters) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.SubnetId) {
		toSerialize["subnetId"] = o.SubnetId
	}
	return toSerialize, nil
}

type NullableAwsNetworkV4Parameters struct {
	value *AwsNetworkV4Parameters
	isSet bool
}

func (v NullableAwsNetworkV4Parameters) Get() *AwsNetworkV4Parameters {
	return v.value
}

func (v *NullableAwsNetworkV4Parameters) Set(val *AwsNetworkV4Parameters) {
	v.value = val
	v.isSet = true
}

func (v NullableAwsNetworkV4Parameters) IsSet() bool {
	return v.isSet
}

func (v *NullableAwsNetworkV4Parameters) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAwsNetworkV4Parameters(val *AwsNetworkV4Parameters) *NullableAwsNetworkV4Parameters {
	return &NullableAwsNetworkV4Parameters{value: val, isSet: true}
}

func (v NullableAwsNetworkV4Parameters) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAwsNetworkV4Parameters) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
