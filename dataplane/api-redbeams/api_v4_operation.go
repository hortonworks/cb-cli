/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// V4OperationApiService V4OperationApi service
type V4OperationApiService service

type ApiGetRedbeamsOperationProgressByResourceCrnRequest struct {
	ctx         context.Context
	ApiService  *V4OperationApiService
	resourceCrn string
	detailed    *bool
}

func (r ApiGetRedbeamsOperationProgressByResourceCrnRequest) Detailed(detailed bool) ApiGetRedbeamsOperationProgressByResourceCrnRequest {
	r.detailed = &detailed
	return r
}

func (r ApiGetRedbeamsOperationProgressByResourceCrnRequest) Execute() (*OperationView, *http.Response, error) {
	return r.ApiService.GetRedbeamsOperationProgressByResourceCrnExecute(r)
}

/*
GetRedbeamsOperationProgressByResourceCrn Get flow operation progress details for resource by resource crn

Flow operation details

	@param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
	@param resourceCrn
	@return ApiGetRedbeamsOperationProgressByResourceCrnRequest
*/
func (a *V4OperationApiService) GetRedbeamsOperationProgressByResourceCrn(ctx context.Context, resourceCrn string) ApiGetRedbeamsOperationProgressByResourceCrnRequest {
	return ApiGetRedbeamsOperationProgressByResourceCrnRequest{
		ApiService:  a,
		ctx:         ctx,
		resourceCrn: resourceCrn,
	}
}

// Execute executes the request
//
//	@return OperationView
func (a *V4OperationApiService) GetRedbeamsOperationProgressByResourceCrnExecute(r ApiGetRedbeamsOperationProgressByResourceCrnRequest) (*OperationView, *http.Response, error) {
	var (
		localVarHTTPMethod  = http.MethodGet
		localVarPostBody    interface{}
		formFiles           []formFile
		localVarReturnValue *OperationView
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "V4OperationApiService.GetRedbeamsOperationProgressByResourceCrn")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v4/operation/resource/crn/{resourceCrn}"
	localVarPath = strings.Replace(localVarPath, "{"+"resourceCrn"+"}", url.PathEscape(parameterValueToString(r.resourceCrn, "resourceCrn")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.detailed != nil {
		parameterAddToQuery(localVarQueryParams, "detailed", r.detailed, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = ioutil.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		var v OperationView
		err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
		if err != nil {
			newErr.error = err.Error()
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
		newErr.model = v
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
