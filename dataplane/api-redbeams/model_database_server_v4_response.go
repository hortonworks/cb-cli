/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package model

import (
	"encoding/json"
)

// checks if the DatabaseServerV4Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &DatabaseServerV4Response{}

// DatabaseServerV4Response Response containing information about a database server that was acted upon, e.g., retrieved, deleted, listed
type DatabaseServerV4Response struct {
	// Name of the database server
	Name string `json:"name"`
	// Description of the database server
	Description *string `json:"description,omitempty"`
	// Host of the database server
	Host string `json:"host"`
	// Port of the database server
	Port int32 `json:"port"`
	// Name of the database vendor (MYSQL, POSTGRES, ...)
	DatabaseVendor string `json:"databaseVendor"`
	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver string `json:"connectionDriver"`
	// CRN of the environment of the database server
	EnvironmentCrn string `json:"environmentCrn"`
	// Internal ID of the database server
	Id *int64 `json:"id,omitempty"`
	// CRN of the database server
	Crn *string `json:"crn,omitempty"`
	// Display name of the database vendor (MySQL, PostgreSQL, ...)
	DatabaseVendorDisplayName string          `json:"databaseVendorDisplayName"`
	ConnectionUserName        *SecretResponse `json:"connectionUserName,omitempty"`
	ConnectionPassword        *SecretResponse `json:"connectionPassword,omitempty"`
	// Creation date / time of the database server, in epoch milliseconds
	CreationDate *int64 `json:"creationDate,omitempty"`
	// Ownership status of the database server
	ResourceStatus *string `json:"resourceStatus,omitempty"`
	// Status of the database server stack
	Status *string `json:"status,omitempty"`
	// Additional status information about the database server stack
	StatusReason *string              `json:"statusReason,omitempty"`
	SslConfig    *SslConfigV4Response `json:"sslConfig,omitempty"`
	// CRN of the cluster of the database server
	ClusterCrn *string `json:"clusterCrn,omitempty"`
	// Major version of the database server engine
	MajorVersion *string `json:"majorVersion,omitempty"`
}

// NewDatabaseServerV4Response instantiates a new DatabaseServerV4Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDatabaseServerV4Response(name string, host string, port int32, databaseVendor string, connectionDriver string, environmentCrn string, databaseVendorDisplayName string) *DatabaseServerV4Response {
	this := DatabaseServerV4Response{}
	this.Name = name
	this.Host = host
	this.Port = port
	this.DatabaseVendor = databaseVendor
	this.ConnectionDriver = connectionDriver
	this.EnvironmentCrn = environmentCrn
	this.DatabaseVendorDisplayName = databaseVendorDisplayName
	return &this
}

// NewDatabaseServerV4ResponseWithDefaults instantiates a new DatabaseServerV4Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDatabaseServerV4ResponseWithDefaults() *DatabaseServerV4Response {
	this := DatabaseServerV4Response{}
	return &this
}

// GetName returns the Name field value
func (o *DatabaseServerV4Response) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *DatabaseServerV4Response) SetName(v string) {
	o.Name = v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetDescription() string {
	if o == nil || isNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetDescriptionOk() (*string, bool) {
	if o == nil || isNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasDescription() bool {
	if o != nil && !isNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *DatabaseServerV4Response) SetDescription(v string) {
	o.Description = &v
}

// GetHost returns the Host field value
func (o *DatabaseServerV4Response) GetHost() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Host
}

// GetHostOk returns a tuple with the Host field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetHostOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Host, true
}

// SetHost sets field value
func (o *DatabaseServerV4Response) SetHost(v string) {
	o.Host = v
}

// GetPort returns the Port field value
func (o *DatabaseServerV4Response) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *DatabaseServerV4Response) SetPort(v int32) {
	o.Port = v
}

// GetDatabaseVendor returns the DatabaseVendor field value
func (o *DatabaseServerV4Response) GetDatabaseVendor() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseVendor
}

// GetDatabaseVendorOk returns a tuple with the DatabaseVendor field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetDatabaseVendorOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseVendor, true
}

// SetDatabaseVendor sets field value
func (o *DatabaseServerV4Response) SetDatabaseVendor(v string) {
	o.DatabaseVendor = v
}

// GetConnectionDriver returns the ConnectionDriver field value
func (o *DatabaseServerV4Response) GetConnectionDriver() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.ConnectionDriver
}

// GetConnectionDriverOk returns a tuple with the ConnectionDriver field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetConnectionDriverOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.ConnectionDriver, true
}

// SetConnectionDriver sets field value
func (o *DatabaseServerV4Response) SetConnectionDriver(v string) {
	o.ConnectionDriver = v
}

// GetEnvironmentCrn returns the EnvironmentCrn field value
func (o *DatabaseServerV4Response) GetEnvironmentCrn() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.EnvironmentCrn
}

// GetEnvironmentCrnOk returns a tuple with the EnvironmentCrn field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetEnvironmentCrnOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.EnvironmentCrn, true
}

// SetEnvironmentCrn sets field value
func (o *DatabaseServerV4Response) SetEnvironmentCrn(v string) {
	o.EnvironmentCrn = v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetId() int64 {
	if o == nil || isNil(o.Id) {
		var ret int64
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetIdOk() (*int64, bool) {
	if o == nil || isNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasId() bool {
	if o != nil && !isNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given int64 and assigns it to the Id field.
func (o *DatabaseServerV4Response) SetId(v int64) {
	o.Id = &v
}

// GetCrn returns the Crn field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetCrn() string {
	if o == nil || isNil(o.Crn) {
		var ret string
		return ret
	}
	return *o.Crn
}

// GetCrnOk returns a tuple with the Crn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetCrnOk() (*string, bool) {
	if o == nil || isNil(o.Crn) {
		return nil, false
	}
	return o.Crn, true
}

// HasCrn returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasCrn() bool {
	if o != nil && !isNil(o.Crn) {
		return true
	}

	return false
}

// SetCrn gets a reference to the given string and assigns it to the Crn field.
func (o *DatabaseServerV4Response) SetCrn(v string) {
	o.Crn = &v
}

// GetDatabaseVendorDisplayName returns the DatabaseVendorDisplayName field value
func (o *DatabaseServerV4Response) GetDatabaseVendorDisplayName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.DatabaseVendorDisplayName
}

// GetDatabaseVendorDisplayNameOk returns a tuple with the DatabaseVendorDisplayName field value
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetDatabaseVendorDisplayNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.DatabaseVendorDisplayName, true
}

// SetDatabaseVendorDisplayName sets field value
func (o *DatabaseServerV4Response) SetDatabaseVendorDisplayName(v string) {
	o.DatabaseVendorDisplayName = v
}

// GetConnectionUserName returns the ConnectionUserName field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetConnectionUserName() SecretResponse {
	if o == nil || isNil(o.ConnectionUserName) {
		var ret SecretResponse
		return ret
	}
	return *o.ConnectionUserName
}

// GetConnectionUserNameOk returns a tuple with the ConnectionUserName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetConnectionUserNameOk() (*SecretResponse, bool) {
	if o == nil || isNil(o.ConnectionUserName) {
		return nil, false
	}
	return o.ConnectionUserName, true
}

// HasConnectionUserName returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasConnectionUserName() bool {
	if o != nil && !isNil(o.ConnectionUserName) {
		return true
	}

	return false
}

// SetConnectionUserName gets a reference to the given SecretResponse and assigns it to the ConnectionUserName field.
func (o *DatabaseServerV4Response) SetConnectionUserName(v SecretResponse) {
	o.ConnectionUserName = &v
}

// GetConnectionPassword returns the ConnectionPassword field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetConnectionPassword() SecretResponse {
	if o == nil || isNil(o.ConnectionPassword) {
		var ret SecretResponse
		return ret
	}
	return *o.ConnectionPassword
}

// GetConnectionPasswordOk returns a tuple with the ConnectionPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetConnectionPasswordOk() (*SecretResponse, bool) {
	if o == nil || isNil(o.ConnectionPassword) {
		return nil, false
	}
	return o.ConnectionPassword, true
}

// HasConnectionPassword returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasConnectionPassword() bool {
	if o != nil && !isNil(o.ConnectionPassword) {
		return true
	}

	return false
}

// SetConnectionPassword gets a reference to the given SecretResponse and assigns it to the ConnectionPassword field.
func (o *DatabaseServerV4Response) SetConnectionPassword(v SecretResponse) {
	o.ConnectionPassword = &v
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetCreationDate() int64 {
	if o == nil || isNil(o.CreationDate) {
		var ret int64
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetCreationDateOk() (*int64, bool) {
	if o == nil || isNil(o.CreationDate) {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasCreationDate() bool {
	if o != nil && !isNil(o.CreationDate) {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given int64 and assigns it to the CreationDate field.
func (o *DatabaseServerV4Response) SetCreationDate(v int64) {
	o.CreationDate = &v
}

// GetResourceStatus returns the ResourceStatus field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetResourceStatus() string {
	if o == nil || isNil(o.ResourceStatus) {
		var ret string
		return ret
	}
	return *o.ResourceStatus
}

// GetResourceStatusOk returns a tuple with the ResourceStatus field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetResourceStatusOk() (*string, bool) {
	if o == nil || isNil(o.ResourceStatus) {
		return nil, false
	}
	return o.ResourceStatus, true
}

// HasResourceStatus returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasResourceStatus() bool {
	if o != nil && !isNil(o.ResourceStatus) {
		return true
	}

	return false
}

// SetResourceStatus gets a reference to the given string and assigns it to the ResourceStatus field.
func (o *DatabaseServerV4Response) SetResourceStatus(v string) {
	o.ResourceStatus = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetStatus() string {
	if o == nil || isNil(o.Status) {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetStatusOk() (*string, bool) {
	if o == nil || isNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasStatus() bool {
	if o != nil && !isNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *DatabaseServerV4Response) SetStatus(v string) {
	o.Status = &v
}

// GetStatusReason returns the StatusReason field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetStatusReason() string {
	if o == nil || isNil(o.StatusReason) {
		var ret string
		return ret
	}
	return *o.StatusReason
}

// GetStatusReasonOk returns a tuple with the StatusReason field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetStatusReasonOk() (*string, bool) {
	if o == nil || isNil(o.StatusReason) {
		return nil, false
	}
	return o.StatusReason, true
}

// HasStatusReason returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasStatusReason() bool {
	if o != nil && !isNil(o.StatusReason) {
		return true
	}

	return false
}

// SetStatusReason gets a reference to the given string and assigns it to the StatusReason field.
func (o *DatabaseServerV4Response) SetStatusReason(v string) {
	o.StatusReason = &v
}

// GetSslConfig returns the SslConfig field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetSslConfig() SslConfigV4Response {
	if o == nil || isNil(o.SslConfig) {
		var ret SslConfigV4Response
		return ret
	}
	return *o.SslConfig
}

// GetSslConfigOk returns a tuple with the SslConfig field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetSslConfigOk() (*SslConfigV4Response, bool) {
	if o == nil || isNil(o.SslConfig) {
		return nil, false
	}
	return o.SslConfig, true
}

// HasSslConfig returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasSslConfig() bool {
	if o != nil && !isNil(o.SslConfig) {
		return true
	}

	return false
}

// SetSslConfig gets a reference to the given SslConfigV4Response and assigns it to the SslConfig field.
func (o *DatabaseServerV4Response) SetSslConfig(v SslConfigV4Response) {
	o.SslConfig = &v
}

// GetClusterCrn returns the ClusterCrn field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetClusterCrn() string {
	if o == nil || isNil(o.ClusterCrn) {
		var ret string
		return ret
	}
	return *o.ClusterCrn
}

// GetClusterCrnOk returns a tuple with the ClusterCrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetClusterCrnOk() (*string, bool) {
	if o == nil || isNil(o.ClusterCrn) {
		return nil, false
	}
	return o.ClusterCrn, true
}

// HasClusterCrn returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasClusterCrn() bool {
	if o != nil && !isNil(o.ClusterCrn) {
		return true
	}

	return false
}

// SetClusterCrn gets a reference to the given string and assigns it to the ClusterCrn field.
func (o *DatabaseServerV4Response) SetClusterCrn(v string) {
	o.ClusterCrn = &v
}

// GetMajorVersion returns the MajorVersion field value if set, zero value otherwise.
func (o *DatabaseServerV4Response) GetMajorVersion() string {
	if o == nil || isNil(o.MajorVersion) {
		var ret string
		return ret
	}
	return *o.MajorVersion
}

// GetMajorVersionOk returns a tuple with the MajorVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *DatabaseServerV4Response) GetMajorVersionOk() (*string, bool) {
	if o == nil || isNil(o.MajorVersion) {
		return nil, false
	}
	return o.MajorVersion, true
}

// HasMajorVersion returns a boolean if a field has been set.
func (o *DatabaseServerV4Response) HasMajorVersion() bool {
	if o != nil && !isNil(o.MajorVersion) {
		return true
	}

	return false
}

// SetMajorVersion gets a reference to the given string and assigns it to the MajorVersion field.
func (o *DatabaseServerV4Response) SetMajorVersion(v string) {
	o.MajorVersion = &v
}

func (o DatabaseServerV4Response) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o DatabaseServerV4Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["name"] = o.Name
	if !isNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	toSerialize["host"] = o.Host
	toSerialize["port"] = o.Port
	toSerialize["databaseVendor"] = o.DatabaseVendor
	toSerialize["connectionDriver"] = o.ConnectionDriver
	toSerialize["environmentCrn"] = o.EnvironmentCrn
	if !isNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !isNil(o.Crn) {
		toSerialize["crn"] = o.Crn
	}
	toSerialize["databaseVendorDisplayName"] = o.DatabaseVendorDisplayName
	if !isNil(o.ConnectionUserName) {
		toSerialize["connectionUserName"] = o.ConnectionUserName
	}
	if !isNil(o.ConnectionPassword) {
		toSerialize["connectionPassword"] = o.ConnectionPassword
	}
	if !isNil(o.CreationDate) {
		toSerialize["creationDate"] = o.CreationDate
	}
	if !isNil(o.ResourceStatus) {
		toSerialize["resourceStatus"] = o.ResourceStatus
	}
	if !isNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !isNil(o.StatusReason) {
		toSerialize["statusReason"] = o.StatusReason
	}
	if !isNil(o.SslConfig) {
		toSerialize["sslConfig"] = o.SslConfig
	}
	if !isNil(o.ClusterCrn) {
		toSerialize["clusterCrn"] = o.ClusterCrn
	}
	if !isNil(o.MajorVersion) {
		toSerialize["majorVersion"] = o.MajorVersion
	}
	return toSerialize, nil
}

type NullableDatabaseServerV4Response struct {
	value *DatabaseServerV4Response
	isSet bool
}

func (v NullableDatabaseServerV4Response) Get() *DatabaseServerV4Response {
	return v.value
}

func (v *NullableDatabaseServerV4Response) Set(val *DatabaseServerV4Response) {
	v.value = val
	v.isSet = true
}

func (v NullableDatabaseServerV4Response) IsSet() bool {
	return v.isSet
}

func (v *NullableDatabaseServerV4Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDatabaseServerV4Response(val *DatabaseServerV4Response) *NullableDatabaseServerV4Response {
	return &NullableDatabaseServerV4Response{value: val, isSet: true}
}

func (v NullableDatabaseServerV4Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDatabaseServerV4Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
