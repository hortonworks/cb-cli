/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the SecretResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SecretResponse{}

// SecretResponse Password of the administrative user of the database server
type SecretResponse struct {
	// Engine path of the secret.
	EnginePath *string `json:"enginePath,omitempty"`
	// Path of the secret.
	SecretPath *string `json:"secretPath,omitempty"`
}

// NewSecretResponse instantiates a new SecretResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSecretResponse() *SecretResponse {
	this := SecretResponse{}
	return &this
}

// NewSecretResponseWithDefaults instantiates a new SecretResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSecretResponseWithDefaults() *SecretResponse {
	this := SecretResponse{}
	return &this
}

// GetEnginePath returns the EnginePath field value if set, zero value otherwise.
func (o *SecretResponse) GetEnginePath() string {
	if o == nil || isNil(o.EnginePath) {
		var ret string
		return ret
	}
	return *o.EnginePath
}

// GetEnginePathOk returns a tuple with the EnginePath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetEnginePathOk() (*string, bool) {
	if o == nil || isNil(o.EnginePath) {
		return nil, false
	}
	return o.EnginePath, true
}

// HasEnginePath returns a boolean if a field has been set.
func (o *SecretResponse) HasEnginePath() bool {
	if o != nil && !isNil(o.EnginePath) {
		return true
	}

	return false
}

// SetEnginePath gets a reference to the given string and assigns it to the EnginePath field.
func (o *SecretResponse) SetEnginePath(v string) {
	o.EnginePath = &v
}

// GetSecretPath returns the SecretPath field value if set, zero value otherwise.
func (o *SecretResponse) GetSecretPath() string {
	if o == nil || isNil(o.SecretPath) {
		var ret string
		return ret
	}
	return *o.SecretPath
}

// GetSecretPathOk returns a tuple with the SecretPath field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SecretResponse) GetSecretPathOk() (*string, bool) {
	if o == nil || isNil(o.SecretPath) {
		return nil, false
	}
	return o.SecretPath, true
}

// HasSecretPath returns a boolean if a field has been set.
func (o *SecretResponse) HasSecretPath() bool {
	if o != nil && !isNil(o.SecretPath) {
		return true
	}

	return false
}

// SetSecretPath gets a reference to the given string and assigns it to the SecretPath field.
func (o *SecretResponse) SetSecretPath(v string) {
	o.SecretPath = &v
}

func (o SecretResponse) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SecretResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.EnginePath) {
		toSerialize["enginePath"] = o.EnginePath
	}
	if !isNil(o.SecretPath) {
		toSerialize["secretPath"] = o.SecretPath
	}
	return toSerialize, nil
}

type NullableSecretResponse struct {
	value *SecretResponse
	isSet bool
}

func (v NullableSecretResponse) Get() *SecretResponse {
	return v.value
}

func (v *NullableSecretResponse) Set(val *SecretResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableSecretResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableSecretResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSecretResponse(val *SecretResponse) *NullableSecretResponse {
	return &NullableSecretResponse{value: val, isSet: true}
}

func (v NullableSecretResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSecretResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
