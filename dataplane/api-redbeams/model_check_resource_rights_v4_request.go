/*
Redbeams API

API for working with databases and database servers

API version: 2.66.0-b41-1-ge11bb40
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CheckResourceRightsV4Request type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CheckResourceRightsV4Request{}

// CheckResourceRightsV4Request struct for CheckResourceRightsV4Request
type CheckResourceRightsV4Request struct {
	Rights         []string           `json:"rights,omitempty"`
	ResourceRights []ResourceRightsV4 `json:"resourceRights,omitempty"`
}

// NewCheckResourceRightsV4Request instantiates a new CheckResourceRightsV4Request object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCheckResourceRightsV4Request() *CheckResourceRightsV4Request {
	this := CheckResourceRightsV4Request{}
	return &this
}

// NewCheckResourceRightsV4RequestWithDefaults instantiates a new CheckResourceRightsV4Request object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCheckResourceRightsV4RequestWithDefaults() *CheckResourceRightsV4Request {
	this := CheckResourceRightsV4Request{}
	return &this
}

// GetRights returns the Rights field value if set, zero value otherwise.
func (o *CheckResourceRightsV4Request) GetRights() []string {
	if o == nil || isNil(o.Rights) {
		var ret []string
		return ret
	}
	return o.Rights
}

// GetRightsOk returns a tuple with the Rights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResourceRightsV4Request) GetRightsOk() ([]string, bool) {
	if o == nil || isNil(o.Rights) {
		return nil, false
	}
	return o.Rights, true
}

// HasRights returns a boolean if a field has been set.
func (o *CheckResourceRightsV4Request) HasRights() bool {
	if o != nil && !isNil(o.Rights) {
		return true
	}

	return false
}

// SetRights gets a reference to the given []string and assigns it to the Rights field.
func (o *CheckResourceRightsV4Request) SetRights(v []string) {
	o.Rights = v
}

// GetResourceRights returns the ResourceRights field value if set, zero value otherwise.
func (o *CheckResourceRightsV4Request) GetResourceRights() []ResourceRightsV4 {
	if o == nil || isNil(o.ResourceRights) {
		var ret []ResourceRightsV4
		return ret
	}
	return o.ResourceRights
}

// GetResourceRightsOk returns a tuple with the ResourceRights field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CheckResourceRightsV4Request) GetResourceRightsOk() ([]ResourceRightsV4, bool) {
	if o == nil || isNil(o.ResourceRights) {
		return nil, false
	}
	return o.ResourceRights, true
}

// HasResourceRights returns a boolean if a field has been set.
func (o *CheckResourceRightsV4Request) HasResourceRights() bool {
	if o != nil && !isNil(o.ResourceRights) {
		return true
	}

	return false
}

// SetResourceRights gets a reference to the given []ResourceRightsV4 and assigns it to the ResourceRights field.
func (o *CheckResourceRightsV4Request) SetResourceRights(v []ResourceRightsV4) {
	o.ResourceRights = v
}

func (o CheckResourceRightsV4Request) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CheckResourceRightsV4Request) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Rights) {
		toSerialize["rights"] = o.Rights
	}
	if !isNil(o.ResourceRights) {
		toSerialize["resourceRights"] = o.ResourceRights
	}
	return toSerialize, nil
}

type NullableCheckResourceRightsV4Request struct {
	value *CheckResourceRightsV4Request
	isSet bool
}

func (v NullableCheckResourceRightsV4Request) Get() *CheckResourceRightsV4Request {
	return v.value
}

func (v *NullableCheckResourceRightsV4Request) Set(val *CheckResourceRightsV4Request) {
	v.value = val
	v.isSet = true
}

func (v NullableCheckResourceRightsV4Request) IsSet() bool {
	return v.isSet
}

func (v *NullableCheckResourceRightsV4Request) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCheckResourceRightsV4Request(val *CheckResourceRightsV4Request) *NullableCheckResourceRightsV4Request {
	return &NullableCheckResourceRightsV4Request{value: val, isSet: true}
}

func (v NullableCheckResourceRightsV4Request) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCheckResourceRightsV4Request) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
