// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerV4Response Response containing information about a database server that was acted upon, e.g., retrieved, deleted, listed
// swagger:model DatabaseServerV4Response
type DatabaseServerV4Response struct {

	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	// Required: true
	ConnectionDriver *string `json:"connectionDriver"`

	// Password of the administrative user of the database server
	ConnectionPassword *SecretResponse `json:"connectionPassword,omitempty"`

	// Username of the administrative user of the database server
	ConnectionUserName *SecretResponse `json:"connectionUserName,omitempty"`

	// Creation date / time of the database server, in epoch milliseconds
	CreationDate int64 `json:"creationDate,omitempty"`

	// CRN of the database server
	Crn string `json:"crn,omitempty"`

	// Name of the database vendor (MYSQL, POSTGRES, ...)
	// Required: true
	DatabaseVendor *string `json:"databaseVendor"`

	// Display name of the database vendor (MySQL, PostgreSQL, ...)
	// Required: true
	DatabaseVendorDisplayName *string `json:"databaseVendorDisplayName"`

	// Description of the database server
	// Max Length: 1000000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// CRN of the environment of the database server
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Host of the database server
	// Required: true
	Host *string `json:"host"`

	// Internal ID of the database server
	ID int64 `json:"id,omitempty"`

	// Name of the database server
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// Port of the database server
	// Required: true
	Port *int32 `json:"port"`

	// Ownership status of the database server
	// Enum: [UNKNOWN SERVICE_MANAGED USER_MANAGED]
	ResourceStatus string `json:"resourceStatus,omitempty"`

	// Status of the database server stack
	// Enum: [REQUESTED CREATE_IN_PROGRESS AVAILABLE UPDATE_IN_PROGRESS UPDATE_REQUESTED UPDATE_FAILED CREATE_FAILED ENABLE_SECURITY_FAILED DELETE_REQUESTED PRE_DELETE_IN_PROGRESS DELETE_IN_PROGRESS DELETE_FAILED DELETE_COMPLETED STOPPED STOP_REQUESTED START_REQUESTED STOP_IN_PROGRESS START_IN_PROGRESS START_FAILED STOP_FAILED WAIT_FOR_SYNC MAINTENANCE_MODE_ENABLED UNKNOWN]
	Status string `json:"status,omitempty"`

	// Additional status information about the database server stack
	StatusReason string `json:"statusReason,omitempty"`
}

// Validate validates this database server v4 response
func (m *DatabaseServerV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseVendorDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServerV4Response) validateConnectionDriver(formats strfmt.Registry) error {

	if err := validate.Required("connectionDriver", "body", m.ConnectionDriver); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateConnectionPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionPassword) { // not required
		return nil
	}

	if m.ConnectionPassword != nil {
		if err := m.ConnectionPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionPassword")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4Response) validateConnectionUserName(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionUserName) { // not required
		return nil
	}

	if m.ConnectionUserName != nil {
		if err := m.ConnectionUserName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionUserName")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDatabaseVendor(formats strfmt.Registry) error {

	if err := validate.Required("databaseVendor", "body", m.DatabaseVendor); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDatabaseVendorDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("databaseVendorDisplayName", "body", m.DatabaseVendorDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000000); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

var databaseServerV4ResponseTypeResourceStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["UNKNOWN","SERVICE_MANAGED","USER_MANAGED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerV4ResponseTypeResourceStatusPropEnum = append(databaseServerV4ResponseTypeResourceStatusPropEnum, v)
	}
}

const (

	// DatabaseServerV4ResponseResourceStatusUNKNOWN captures enum value "UNKNOWN"
	DatabaseServerV4ResponseResourceStatusUNKNOWN string = "UNKNOWN"

	// DatabaseServerV4ResponseResourceStatusSERVICEMANAGED captures enum value "SERVICE_MANAGED"
	DatabaseServerV4ResponseResourceStatusSERVICEMANAGED string = "SERVICE_MANAGED"

	// DatabaseServerV4ResponseResourceStatusUSERMANAGED captures enum value "USER_MANAGED"
	DatabaseServerV4ResponseResourceStatusUSERMANAGED string = "USER_MANAGED"
)

// prop value enum
func (m *DatabaseServerV4Response) validateResourceStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, databaseServerV4ResponseTypeResourceStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServerV4Response) validateResourceStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ResourceStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateResourceStatusEnum("resourceStatus", "body", m.ResourceStatus); err != nil {
		return err
	}

	return nil
}

var databaseServerV4ResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","ENABLE_SECURITY_FAILED","DELETE_REQUESTED","PRE_DELETE_IN_PROGRESS","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC","MAINTENANCE_MODE_ENABLED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerV4ResponseTypeStatusPropEnum = append(databaseServerV4ResponseTypeStatusPropEnum, v)
	}
}

const (

	// DatabaseServerV4ResponseStatusREQUESTED captures enum value "REQUESTED"
	DatabaseServerV4ResponseStatusREQUESTED string = "REQUESTED"

	// DatabaseServerV4ResponseStatusCREATEINPROGRESS captures enum value "CREATE_IN_PROGRESS"
	DatabaseServerV4ResponseStatusCREATEINPROGRESS string = "CREATE_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusAVAILABLE captures enum value "AVAILABLE"
	DatabaseServerV4ResponseStatusAVAILABLE string = "AVAILABLE"

	// DatabaseServerV4ResponseStatusUPDATEINPROGRESS captures enum value "UPDATE_IN_PROGRESS"
	DatabaseServerV4ResponseStatusUPDATEINPROGRESS string = "UPDATE_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusUPDATEREQUESTED captures enum value "UPDATE_REQUESTED"
	DatabaseServerV4ResponseStatusUPDATEREQUESTED string = "UPDATE_REQUESTED"

	// DatabaseServerV4ResponseStatusUPDATEFAILED captures enum value "UPDATE_FAILED"
	DatabaseServerV4ResponseStatusUPDATEFAILED string = "UPDATE_FAILED"

	// DatabaseServerV4ResponseStatusCREATEFAILED captures enum value "CREATE_FAILED"
	DatabaseServerV4ResponseStatusCREATEFAILED string = "CREATE_FAILED"

	// DatabaseServerV4ResponseStatusENABLESECURITYFAILED captures enum value "ENABLE_SECURITY_FAILED"
	DatabaseServerV4ResponseStatusENABLESECURITYFAILED string = "ENABLE_SECURITY_FAILED"

	// DatabaseServerV4ResponseStatusDELETEREQUESTED captures enum value "DELETE_REQUESTED"
	DatabaseServerV4ResponseStatusDELETEREQUESTED string = "DELETE_REQUESTED"

	// DatabaseServerV4ResponseStatusPREDELETEINPROGRESS captures enum value "PRE_DELETE_IN_PROGRESS"
	DatabaseServerV4ResponseStatusPREDELETEINPROGRESS string = "PRE_DELETE_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusDELETEINPROGRESS captures enum value "DELETE_IN_PROGRESS"
	DatabaseServerV4ResponseStatusDELETEINPROGRESS string = "DELETE_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusDELETEFAILED captures enum value "DELETE_FAILED"
	DatabaseServerV4ResponseStatusDELETEFAILED string = "DELETE_FAILED"

	// DatabaseServerV4ResponseStatusDELETECOMPLETED captures enum value "DELETE_COMPLETED"
	DatabaseServerV4ResponseStatusDELETECOMPLETED string = "DELETE_COMPLETED"

	// DatabaseServerV4ResponseStatusSTOPPED captures enum value "STOPPED"
	DatabaseServerV4ResponseStatusSTOPPED string = "STOPPED"

	// DatabaseServerV4ResponseStatusSTOPREQUESTED captures enum value "STOP_REQUESTED"
	DatabaseServerV4ResponseStatusSTOPREQUESTED string = "STOP_REQUESTED"

	// DatabaseServerV4ResponseStatusSTARTREQUESTED captures enum value "START_REQUESTED"
	DatabaseServerV4ResponseStatusSTARTREQUESTED string = "START_REQUESTED"

	// DatabaseServerV4ResponseStatusSTOPINPROGRESS captures enum value "STOP_IN_PROGRESS"
	DatabaseServerV4ResponseStatusSTOPINPROGRESS string = "STOP_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusSTARTINPROGRESS captures enum value "START_IN_PROGRESS"
	DatabaseServerV4ResponseStatusSTARTINPROGRESS string = "START_IN_PROGRESS"

	// DatabaseServerV4ResponseStatusSTARTFAILED captures enum value "START_FAILED"
	DatabaseServerV4ResponseStatusSTARTFAILED string = "START_FAILED"

	// DatabaseServerV4ResponseStatusSTOPFAILED captures enum value "STOP_FAILED"
	DatabaseServerV4ResponseStatusSTOPFAILED string = "STOP_FAILED"

	// DatabaseServerV4ResponseStatusWAITFORSYNC captures enum value "WAIT_FOR_SYNC"
	DatabaseServerV4ResponseStatusWAITFORSYNC string = "WAIT_FOR_SYNC"

	// DatabaseServerV4ResponseStatusMAINTENANCEMODEENABLED captures enum value "MAINTENANCE_MODE_ENABLED"
	DatabaseServerV4ResponseStatusMAINTENANCEMODEENABLED string = "MAINTENANCE_MODE_ENABLED"

	// DatabaseServerV4ResponseStatusUNKNOWN captures enum value "UNKNOWN"
	DatabaseServerV4ResponseStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DatabaseServerV4Response) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, databaseServerV4ResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServerV4Response) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerV4Response) UnmarshalBinary(b []byte) error {
	var res DatabaseServerV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
