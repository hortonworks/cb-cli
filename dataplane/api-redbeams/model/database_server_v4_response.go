// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerV4Response database server v4 response
// swagger:model DatabaseServerV4Response
type DatabaseServerV4Response struct {

	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	// Required: true
	ConnectionDriver *string `json:"connectionDriver"`

	// Password of the administrative user of the database server
	ConnectionPassword *SecretResponse `json:"connectionPassword,omitempty"`

	// User name of the administrative user of the database server
	ConnectionUserName *SecretResponse `json:"connectionUserName,omitempty"`

	// URL that points to the JAR of the connection driver (JDBC connector)
	// Max Length: 150
	// Min Length: 0
	ConnectorJarURL *string `json:"connectorJarUrl,omitempty"`

	// Creation date / time of the resource, in epoch milliseconds
	CreationDate int64 `json:"creationDate,omitempty"`

	// CRN of the resource
	Crn string `json:"crn,omitempty"`

	// Name of the database vendor (MYSQL, POSTGRES, ...)
	// Required: true
	DatabaseVendor *string `json:"databaseVendor"`

	// Display name of the database vendor (MySQL, PostgreSQL, ...)
	// Required: true
	DatabaseVendorDisplayName *string `json:"databaseVendorDisplayName"`

	// Description of the resource
	// Max Length: 1000000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// Crn of the environment of the resource
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Host of the database server
	// Required: true
	Host *string `json:"host"`

	// ID of the resource
	ID int64 `json:"id,omitempty"`

	// Name of the database server
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// Port of the database server
	// Required: true
	Port *int32 `json:"port"`
}

// Validate validates this database server v4 response
func (m *DatabaseServerV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionDriver(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectorJarURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseVendorDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServerV4Response) validateConnectionDriver(formats strfmt.Registry) error {

	if err := validate.Required("connectionDriver", "body", m.ConnectionDriver); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateConnectionPassword(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionPassword) { // not required
		return nil
	}

	if m.ConnectionPassword != nil {
		if err := m.ConnectionPassword.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionPassword")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4Response) validateConnectionUserName(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectionUserName) { // not required
		return nil
	}

	if m.ConnectionUserName != nil {
		if err := m.ConnectionUserName.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("connectionUserName")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4Response) validateConnectorJarURL(formats strfmt.Registry) error {

	if swag.IsZero(m.ConnectorJarURL) { // not required
		return nil
	}

	if err := validate.MinLength("connectorJarUrl", "body", string(*m.ConnectorJarURL), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("connectorJarUrl", "body", string(*m.ConnectorJarURL), 150); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDatabaseVendor(formats strfmt.Registry) error {

	if err := validate.Required("databaseVendor", "body", m.DatabaseVendor); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDatabaseVendorDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("databaseVendorDisplayName", "body", m.DatabaseVendorDisplayName); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000000); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Response) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerV4Response) UnmarshalBinary(b []byte) error {
	var res DatabaseServerV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
