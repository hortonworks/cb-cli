// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// X509Certificate x509 certificate
// swagger:model X509Certificate
type X509Certificate struct {

	// basic constraints
	BasicConstraints int32 `json:"basicConstraints,omitempty"`

	// critical extension o ids
	// Unique: true
	CriticalExtensionOIds []string `json:"criticalExtensionOIDs"`

	// encoded
	Encoded []strfmt.Base64 `json:"encoded"`

	// extended key usage
	ExtendedKeyUsage []string `json:"extendedKeyUsage"`

	// issuer alternative names
	IssuerAlternativeNames [][]interface{} `json:"issuerAlternativeNames"`

	// issuer d n
	IssuerDN *Principal `json:"issuerDN,omitempty"`

	// issuer unique ID
	IssuerUniqueID []bool `json:"issuerUniqueID"`

	// issuer x500 principal
	IssuerX500Principal *X500Principal `json:"issuerX500Principal,omitempty"`

	// key usage
	KeyUsage []bool `json:"keyUsage"`

	// non critical extension o ids
	// Unique: true
	NonCriticalExtensionOIds []string `json:"nonCriticalExtensionOIDs"`

	// not after
	// Format: date-time
	NotAfter strfmt.DateTime `json:"notAfter,omitempty"`

	// not before
	// Format: date-time
	NotBefore strfmt.DateTime `json:"notBefore,omitempty"`

	// public key
	PublicKey *PublicKey `json:"publicKey,omitempty"`

	// serial number
	SerialNumber int64 `json:"serialNumber,omitempty"`

	// sig alg name
	SigAlgName string `json:"sigAlgName,omitempty"`

	// sig alg o ID
	SigAlgOID string `json:"sigAlgOID,omitempty"`

	// sig alg params
	SigAlgParams []strfmt.Base64 `json:"sigAlgParams"`

	// signature
	Signature []strfmt.Base64 `json:"signature"`

	// subject alternative names
	SubjectAlternativeNames [][]interface{} `json:"subjectAlternativeNames"`

	// subject d n
	SubjectDN *Principal `json:"subjectDN,omitempty"`

	// subject unique ID
	SubjectUniqueID []bool `json:"subjectUniqueID"`

	// subject x500 principal
	SubjectX500Principal *X500Principal `json:"subjectX500Principal,omitempty"`

	// tbscertificate
	Tbscertificate []strfmt.Base64 `json:"tbscertificate"`

	// type
	Type string `json:"type,omitempty"`

	// version
	Version int32 `json:"version,omitempty"`
}

// Validate validates this x509 certificate
func (m *X509Certificate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCriticalExtensionOIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEncoded(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIssuerX500Principal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNonCriticalExtensionOIds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotAfter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNotBefore(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSigAlgParams(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSignature(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectDN(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubjectX500Principal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTbscertificate(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *X509Certificate) validateCriticalExtensionOIds(formats strfmt.Registry) error {

	if swag.IsZero(m.CriticalExtensionOIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("criticalExtensionOIDs", "body", m.CriticalExtensionOIds); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateEncoded(formats strfmt.Registry) error {

	if swag.IsZero(m.Encoded) { // not required
		return nil
	}

	for i := 0; i < len(m.Encoded); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *X509Certificate) validateIssuerDN(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuerDN) { // not required
		return nil
	}

	if m.IssuerDN != nil {
		if err := m.IssuerDN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerDN")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateIssuerX500Principal(formats strfmt.Registry) error {

	if swag.IsZero(m.IssuerX500Principal) { // not required
		return nil
	}

	if m.IssuerX500Principal != nil {
		if err := m.IssuerX500Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("issuerX500Principal")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateNonCriticalExtensionOIds(formats strfmt.Registry) error {

	if swag.IsZero(m.NonCriticalExtensionOIds) { // not required
		return nil
	}

	if err := validate.UniqueItems("nonCriticalExtensionOIDs", "body", m.NonCriticalExtensionOIds); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateNotAfter(formats strfmt.Registry) error {

	if swag.IsZero(m.NotAfter) { // not required
		return nil
	}

	if err := validate.FormatOf("notAfter", "body", "date-time", m.NotAfter.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validateNotBefore(formats strfmt.Registry) error {

	if swag.IsZero(m.NotBefore) { // not required
		return nil
	}

	if err := validate.FormatOf("notBefore", "body", "date-time", m.NotBefore.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *X509Certificate) validatePublicKey(formats strfmt.Registry) error {

	if swag.IsZero(m.PublicKey) { // not required
		return nil
	}

	if m.PublicKey != nil {
		if err := m.PublicKey.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("publicKey")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateSigAlgParams(formats strfmt.Registry) error {

	if swag.IsZero(m.SigAlgParams) { // not required
		return nil
	}

	for i := 0; i < len(m.SigAlgParams); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *X509Certificate) validateSignature(formats strfmt.Registry) error {

	if swag.IsZero(m.Signature) { // not required
		return nil
	}

	for i := 0; i < len(m.Signature); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

func (m *X509Certificate) validateSubjectDN(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectDN) { // not required
		return nil
	}

	if m.SubjectDN != nil {
		if err := m.SubjectDN.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subjectDN")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateSubjectX500Principal(formats strfmt.Registry) error {

	if swag.IsZero(m.SubjectX500Principal) { // not required
		return nil
	}

	if m.SubjectX500Principal != nil {
		if err := m.SubjectX500Principal.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subjectX500Principal")
			}
			return err
		}
	}

	return nil
}

func (m *X509Certificate) validateTbscertificate(formats strfmt.Registry) error {

	if swag.IsZero(m.Tbscertificate) { // not required
		return nil
	}

	for i := 0; i < len(m.Tbscertificate); i++ {

		// Format "byte" (base64 string) is already validated when unmarshalled

	}

	return nil
}

// MarshalBinary interface implementation
func (m *X509Certificate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *X509Certificate) UnmarshalBinary(b []byte) error {
	var res X509Certificate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
