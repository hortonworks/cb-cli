// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerV4StackRequest database server v4 stack request
// swagger:model DatabaseServerV4StackRequest
type DatabaseServerV4StackRequest struct {

	// AWS-specific parameters for the database server
	Aws *AwsDatabaseServerV4Parameters `json:"aws,omitempty"`

	// Azure-specific parameters for the database server
	Azure *AzureDatabaseServerV4Parameters `json:"azure,omitempty"`

	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver string `json:"connectionDriver,omitempty"`

	// Name of the database vendor (MYSQL, POSTGRES, ...)
	DatabaseVendor string `json:"databaseVendor,omitempty"`

	// GCP-specific parameters for the database server
	Gcp *GcpDatabaseServerV4Parameters `json:"gcp,omitempty"`

	// Instance type of the database server
	InstanceType string `json:"instanceType,omitempty"`

	// Port of the database server
	// Maximum: 65535
	// Minimum: 1
	Port int32 `json:"port,omitempty"`

	// Username of the administrative user of the database server
	RootUserName string `json:"rootUserName,omitempty"`

	// Password of the administrative user of the database server
	RootUserPassword string `json:"rootUserPassword,omitempty"`

	// Security group of the database server
	SecurityGroup *SecurityGroupV4StackRequest `json:"securityGroup,omitempty"`

	// Storage size of the database server, in GB
	StorageSize int64 `json:"storageSize,omitempty"`
}

// Validate validates this database server v4 stack request
func (m *DatabaseServerV4StackRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAws(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAzure(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGcp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroup(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServerV4StackRequest) validateAws(formats strfmt.Registry) error {

	if swag.IsZero(m.Aws) { // not required
		return nil
	}

	if m.Aws != nil {
		if err := m.Aws.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("aws")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4StackRequest) validateAzure(formats strfmt.Registry) error {

	if swag.IsZero(m.Azure) { // not required
		return nil
	}

	if m.Azure != nil {
		if err := m.Azure.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("azure")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4StackRequest) validateGcp(formats strfmt.Registry) error {

	if swag.IsZero(m.Gcp) { // not required
		return nil
	}

	if m.Gcp != nil {
		if err := m.Gcp.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("gcp")
			}
			return err
		}
	}

	return nil
}

func (m *DatabaseServerV4StackRequest) validatePort(formats strfmt.Registry) error {

	if swag.IsZero(m.Port) { // not required
		return nil
	}

	if err := validate.MinimumInt("port", "body", int64(m.Port), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("port", "body", int64(m.Port), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4StackRequest) validateSecurityGroup(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroup) { // not required
		return nil
	}

	if m.SecurityGroup != nil {
		if err := m.SecurityGroup.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("securityGroup")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerV4StackRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerV4StackRequest) UnmarshalBinary(b []byte) error {
	var res DatabaseServerV4StackRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
