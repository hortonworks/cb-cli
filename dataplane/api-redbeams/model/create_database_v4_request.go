// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateDatabaseV4Request Request for creating a new database on a registered database server
// swagger:model CreateDatabaseV4Request
type CreateDatabaseV4Request struct {

	// Description of the database
	// Max Length: 1000000
	// Min Length: 0
	DatabaseDescription *string `json:"databaseDescription,omitempty"`

	// Name of the database
	// Required: true
	DatabaseName *string `json:"databaseName"`

	// CRN of the database server
	// Required: true
	ExistingDatabaseServerCrn *string `json:"existingDatabaseServerCrn"`

	// Type of database, i.e., the service name that will use the database (HIVE, DRUID, SUPERSET, RANGER, ...)
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this create database v4 request
func (m *CreateDatabaseV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDatabaseDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExistingDatabaseServerCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateDatabaseV4Request) validateDatabaseDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.DatabaseDescription) { // not required
		return nil
	}

	if err := validate.MinLength("databaseDescription", "body", string(*m.DatabaseDescription), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("databaseDescription", "body", string(*m.DatabaseDescription), 1000000); err != nil {
		return err
	}

	return nil
}

func (m *CreateDatabaseV4Request) validateDatabaseName(formats strfmt.Registry) error {

	if err := validate.Required("databaseName", "body", m.DatabaseName); err != nil {
		return err
	}

	return nil
}

func (m *CreateDatabaseV4Request) validateExistingDatabaseServerCrn(formats strfmt.Registry) error {

	if err := validate.Required("existingDatabaseServerCrn", "body", m.ExistingDatabaseServerCrn); err != nil {
		return err
	}

	return nil
}

func (m *CreateDatabaseV4Request) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateDatabaseV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateDatabaseV4Request) UnmarshalBinary(b []byte) error {
	var res CreateDatabaseV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
