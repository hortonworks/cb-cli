// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SslConfigV4Request Request for the SSL config of a database server
// swagger:model SslConfigV4Request
type SslConfigV4Request struct {

	// SSL enforcement mode for the database server
	// Enum: [ENABLED DISABLED]
	SslMode string `json:"sslMode,omitempty"`
}

// Validate validates this ssl config v4 request
func (m *SslConfigV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSslMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sslConfigV4RequestTypeSslModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sslConfigV4RequestTypeSslModePropEnum = append(sslConfigV4RequestTypeSslModePropEnum, v)
	}
}

const (

	// SslConfigV4RequestSslModeENABLED captures enum value "ENABLED"
	SslConfigV4RequestSslModeENABLED string = "ENABLED"

	// SslConfigV4RequestSslModeDISABLED captures enum value "DISABLED"
	SslConfigV4RequestSslModeDISABLED string = "DISABLED"
)

// prop value enum
func (m *SslConfigV4Request) validateSslModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sslConfigV4RequestTypeSslModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SslConfigV4Request) validateSslMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SslMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslModeEnum("sslMode", "body", m.SslMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslConfigV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslConfigV4Request) UnmarshalBinary(b []byte) error {
	var res SslConfigV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
