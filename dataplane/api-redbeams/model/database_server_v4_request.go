// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerV4Request Request containing information about a database server to be registered
// swagger:model DatabaseServerV4Request
type DatabaseServerV4Request struct {

	// Name of the JDBC connection driver (for example: 'org.postgresql.Driver')
	ConnectionDriver string `json:"connectionDriver,omitempty"`

	// Password of the administrative user of the database server
	// Required: true
	ConnectionPassword *string `json:"connectionPassword"`

	// Username of the administrative user of the database server
	// Required: true
	ConnectionUserName *string `json:"connectionUserName"`

	// Name of the database vendor (MYSQL, POSTGRES, ...)
	// Required: true
	DatabaseVendor *string `json:"databaseVendor"`

	// Description of the database server
	// Max Length: 1000000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// CRN of the environment of the database server
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Host of the database server
	// Required: true
	Host *string `json:"host"`

	// Name of the database server
	// Required: true
	// Max Length: 100
	// Min Length: 5
	// Pattern: (^[a-z][-a-z0-9]*[a-z0-9]$)
	Name *string `json:"name"`

	// Port of the database server
	// Required: true
	Port *int32 `json:"port"`
}

// Validate validates this database server v4 request
func (m *DatabaseServerV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConnectionPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConnectionUserName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDatabaseVendor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePort(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServerV4Request) validateConnectionPassword(formats strfmt.Registry) error {

	if err := validate.Required("connectionPassword", "body", m.ConnectionPassword); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateConnectionUserName(formats strfmt.Registry) error {

	if err := validate.Required("connectionUserName", "body", m.ConnectionUserName); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateDatabaseVendor(formats strfmt.Registry) error {

	if err := validate.Required("databaseVendor", "body", m.DatabaseVendor); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000000); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 5); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `(^[a-z][-a-z0-9]*[a-z0-9]$)`); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerV4Request) validatePort(formats strfmt.Registry) error {

	if err := validate.Required("port", "body", m.Port); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerV4Request) UnmarshalBinary(b []byte) error {
	var res DatabaseServerV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
