// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CertificateSwapV4Request Request for testing database certificate
// swagger:model CertificateSwapV4Request
type CertificateSwapV4Request struct {

	// The first certificate should be included
	// Required: true
	FirstCert *bool `json:"firstCert"`

	// The second certificate should be included
	// Required: true
	SecondCert *bool `json:"secondCert"`
}

// Validate validates this certificate swap v4 request
func (m *CertificateSwapV4Request) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateFirstCert(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecondCert(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateSwapV4Request) validateFirstCert(formats strfmt.Registry) error {

	if err := validate.Required("firstCert", "body", m.FirstCert); err != nil {
		return err
	}

	return nil
}

func (m *CertificateSwapV4Request) validateSecondCert(formats strfmt.Registry) error {

	if err := validate.Required("secondCert", "body", m.SecondCert); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateSwapV4Request) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateSwapV4Request) UnmarshalBinary(b []byte) error {
	var res CertificateSwapV4Request
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
