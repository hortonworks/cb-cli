// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SslConfigV4Response Response for the SSL config of a database server
// swagger:model SslConfigV4Response
type SslConfigV4Response struct {

	// Cloud provider specific identifier of the SSL certificate currently active for the database server
	SslCertificateActiveCloudProviderIdentifier string `json:"sslCertificateActiveCloudProviderIdentifier,omitempty"`

	// Version number of the SSL certificate currently active for the database server
	SslCertificateActiveVersion int32 `json:"sslCertificateActiveVersion,omitempty"`

	// Highest version number of the SSL certificate available for the database server; does not necessarily equal the active version
	SslCertificateHighestAvailableVersion int32 `json:"sslCertificateHighestAvailableVersion,omitempty"`

	// SSL certificate type
	// Enum: [CLOUD_PROVIDER_OWNED BRING_YOUR_OWN NONE]
	SslCertificateType string `json:"sslCertificateType,omitempty"`

	// Set of relevant SSL certificates for the database server, including the active one
	// Unique: true
	SslCertificates []string `json:"sslCertificates"`

	// SSL enforcement mode for the database server
	// Enum: [ENABLED DISABLED]
	SslMode string `json:"sslMode,omitempty"`
}

// Validate validates this ssl config v4 response
func (m *SslConfigV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSslCertificateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslCertificates(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSslMode(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var sslConfigV4ResponseTypeSslCertificateTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["CLOUD_PROVIDER_OWNED","BRING_YOUR_OWN","NONE"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sslConfigV4ResponseTypeSslCertificateTypePropEnum = append(sslConfigV4ResponseTypeSslCertificateTypePropEnum, v)
	}
}

const (

	// SslConfigV4ResponseSslCertificateTypeCLOUDPROVIDEROWNED captures enum value "CLOUD_PROVIDER_OWNED"
	SslConfigV4ResponseSslCertificateTypeCLOUDPROVIDEROWNED string = "CLOUD_PROVIDER_OWNED"

	// SslConfigV4ResponseSslCertificateTypeBRINGYOUROWN captures enum value "BRING_YOUR_OWN"
	SslConfigV4ResponseSslCertificateTypeBRINGYOUROWN string = "BRING_YOUR_OWN"

	// SslConfigV4ResponseSslCertificateTypeNONE captures enum value "NONE"
	SslConfigV4ResponseSslCertificateTypeNONE string = "NONE"
)

// prop value enum
func (m *SslConfigV4Response) validateSslCertificateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sslConfigV4ResponseTypeSslCertificateTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SslConfigV4Response) validateSslCertificateType(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificateType) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslCertificateTypeEnum("sslCertificateType", "body", m.SslCertificateType); err != nil {
		return err
	}

	return nil
}

func (m *SslConfigV4Response) validateSslCertificates(formats strfmt.Registry) error {

	if swag.IsZero(m.SslCertificates) { // not required
		return nil
	}

	if err := validate.UniqueItems("sslCertificates", "body", m.SslCertificates); err != nil {
		return err
	}

	return nil
}

var sslConfigV4ResponseTypeSslModePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		sslConfigV4ResponseTypeSslModePropEnum = append(sslConfigV4ResponseTypeSslModePropEnum, v)
	}
}

const (

	// SslConfigV4ResponseSslModeENABLED captures enum value "ENABLED"
	SslConfigV4ResponseSslModeENABLED string = "ENABLED"

	// SslConfigV4ResponseSslModeDISABLED captures enum value "DISABLED"
	SslConfigV4ResponseSslModeDISABLED string = "DISABLED"
)

// prop value enum
func (m *SslConfigV4Response) validateSslModeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, sslConfigV4ResponseTypeSslModePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *SslConfigV4Response) validateSslMode(formats strfmt.Registry) error {

	if swag.IsZero(m.SslMode) { // not required
		return nil
	}

	// value enum
	if err := m.validateSslModeEnum("sslMode", "body", m.SslMode); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SslConfigV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SslConfigV4Response) UnmarshalBinary(b []byte) error {
	var res SslConfigV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
