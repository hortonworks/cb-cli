// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DatabaseServerStatusV4Response Response containing status information about a database server
// swagger:model DatabaseServerStatusV4Response
type DatabaseServerStatusV4Response struct {

	// CRN of the environment of the database server
	// Required: true
	EnvironmentCrn *string `json:"environmentCrn"`

	// Name of the database server
	// Required: true
	Name *string `json:"name"`

	// CRN of the database server
	// Required: true
	ResourceCrn *string `json:"resourceCrn"`

	// Status of the database server stack
	// Required: true
	// Enum: [REQUESTED CREATE_IN_PROGRESS AVAILABLE UPDATE_IN_PROGRESS UPDATE_REQUESTED UPDATE_FAILED CREATE_FAILED ENABLE_SECURITY_FAILED DELETE_REQUESTED PRE_DELETE_IN_PROGRESS DELETE_IN_PROGRESS DELETE_FAILED DELETE_COMPLETED STOPPED STOP_REQUESTED START_REQUESTED STOP_IN_PROGRESS START_IN_PROGRESS START_FAILED STOP_FAILED WAIT_FOR_SYNC MAINTENANCE_MODE_ENABLED UNKNOWN]
	Status *string `json:"status"`

	// Additional status information about the database server stack
	// Required: true
	StatusReason *string `json:"statusReason"`
}

// Validate validates this database server status v4 response
func (m *DatabaseServerStatusV4Response) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourceCrn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatusReason(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DatabaseServerStatusV4Response) validateEnvironmentCrn(formats strfmt.Registry) error {

	if err := validate.Required("environmentCrn", "body", m.EnvironmentCrn); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerStatusV4Response) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerStatusV4Response) validateResourceCrn(formats strfmt.Registry) error {

	if err := validate.Required("resourceCrn", "body", m.ResourceCrn); err != nil {
		return err
	}

	return nil
}

var databaseServerStatusV4ResponseTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["REQUESTED","CREATE_IN_PROGRESS","AVAILABLE","UPDATE_IN_PROGRESS","UPDATE_REQUESTED","UPDATE_FAILED","CREATE_FAILED","ENABLE_SECURITY_FAILED","DELETE_REQUESTED","PRE_DELETE_IN_PROGRESS","DELETE_IN_PROGRESS","DELETE_FAILED","DELETE_COMPLETED","STOPPED","STOP_REQUESTED","START_REQUESTED","STOP_IN_PROGRESS","START_IN_PROGRESS","START_FAILED","STOP_FAILED","WAIT_FOR_SYNC","MAINTENANCE_MODE_ENABLED","UNKNOWN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		databaseServerStatusV4ResponseTypeStatusPropEnum = append(databaseServerStatusV4ResponseTypeStatusPropEnum, v)
	}
}

const (

	// DatabaseServerStatusV4ResponseStatusREQUESTED captures enum value "REQUESTED"
	DatabaseServerStatusV4ResponseStatusREQUESTED string = "REQUESTED"

	// DatabaseServerStatusV4ResponseStatusCREATEINPROGRESS captures enum value "CREATE_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusCREATEINPROGRESS string = "CREATE_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusAVAILABLE captures enum value "AVAILABLE"
	DatabaseServerStatusV4ResponseStatusAVAILABLE string = "AVAILABLE"

	// DatabaseServerStatusV4ResponseStatusUPDATEINPROGRESS captures enum value "UPDATE_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusUPDATEINPROGRESS string = "UPDATE_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusUPDATEREQUESTED captures enum value "UPDATE_REQUESTED"
	DatabaseServerStatusV4ResponseStatusUPDATEREQUESTED string = "UPDATE_REQUESTED"

	// DatabaseServerStatusV4ResponseStatusUPDATEFAILED captures enum value "UPDATE_FAILED"
	DatabaseServerStatusV4ResponseStatusUPDATEFAILED string = "UPDATE_FAILED"

	// DatabaseServerStatusV4ResponseStatusCREATEFAILED captures enum value "CREATE_FAILED"
	DatabaseServerStatusV4ResponseStatusCREATEFAILED string = "CREATE_FAILED"

	// DatabaseServerStatusV4ResponseStatusENABLESECURITYFAILED captures enum value "ENABLE_SECURITY_FAILED"
	DatabaseServerStatusV4ResponseStatusENABLESECURITYFAILED string = "ENABLE_SECURITY_FAILED"

	// DatabaseServerStatusV4ResponseStatusDELETEREQUESTED captures enum value "DELETE_REQUESTED"
	DatabaseServerStatusV4ResponseStatusDELETEREQUESTED string = "DELETE_REQUESTED"

	// DatabaseServerStatusV4ResponseStatusPREDELETEINPROGRESS captures enum value "PRE_DELETE_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusPREDELETEINPROGRESS string = "PRE_DELETE_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusDELETEINPROGRESS captures enum value "DELETE_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusDELETEINPROGRESS string = "DELETE_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusDELETEFAILED captures enum value "DELETE_FAILED"
	DatabaseServerStatusV4ResponseStatusDELETEFAILED string = "DELETE_FAILED"

	// DatabaseServerStatusV4ResponseStatusDELETECOMPLETED captures enum value "DELETE_COMPLETED"
	DatabaseServerStatusV4ResponseStatusDELETECOMPLETED string = "DELETE_COMPLETED"

	// DatabaseServerStatusV4ResponseStatusSTOPPED captures enum value "STOPPED"
	DatabaseServerStatusV4ResponseStatusSTOPPED string = "STOPPED"

	// DatabaseServerStatusV4ResponseStatusSTOPREQUESTED captures enum value "STOP_REQUESTED"
	DatabaseServerStatusV4ResponseStatusSTOPREQUESTED string = "STOP_REQUESTED"

	// DatabaseServerStatusV4ResponseStatusSTARTREQUESTED captures enum value "START_REQUESTED"
	DatabaseServerStatusV4ResponseStatusSTARTREQUESTED string = "START_REQUESTED"

	// DatabaseServerStatusV4ResponseStatusSTOPINPROGRESS captures enum value "STOP_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusSTOPINPROGRESS string = "STOP_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusSTARTINPROGRESS captures enum value "START_IN_PROGRESS"
	DatabaseServerStatusV4ResponseStatusSTARTINPROGRESS string = "START_IN_PROGRESS"

	// DatabaseServerStatusV4ResponseStatusSTARTFAILED captures enum value "START_FAILED"
	DatabaseServerStatusV4ResponseStatusSTARTFAILED string = "START_FAILED"

	// DatabaseServerStatusV4ResponseStatusSTOPFAILED captures enum value "STOP_FAILED"
	DatabaseServerStatusV4ResponseStatusSTOPFAILED string = "STOP_FAILED"

	// DatabaseServerStatusV4ResponseStatusWAITFORSYNC captures enum value "WAIT_FOR_SYNC"
	DatabaseServerStatusV4ResponseStatusWAITFORSYNC string = "WAIT_FOR_SYNC"

	// DatabaseServerStatusV4ResponseStatusMAINTENANCEMODEENABLED captures enum value "MAINTENANCE_MODE_ENABLED"
	DatabaseServerStatusV4ResponseStatusMAINTENANCEMODEENABLED string = "MAINTENANCE_MODE_ENABLED"

	// DatabaseServerStatusV4ResponseStatusUNKNOWN captures enum value "UNKNOWN"
	DatabaseServerStatusV4ResponseStatusUNKNOWN string = "UNKNOWN"
)

// prop value enum
func (m *DatabaseServerStatusV4Response) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, databaseServerStatusV4ResponseTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *DatabaseServerStatusV4Response) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *DatabaseServerStatusV4Response) validateStatusReason(formats strfmt.Registry) error {

	if err := validate.Required("statusReason", "body", m.StatusReason); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DatabaseServerStatusV4Response) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DatabaseServerStatusV4Response) UnmarshalBinary(b []byte) error {
	var res DatabaseServerStatusV4Response
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
