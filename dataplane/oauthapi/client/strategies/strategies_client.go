// Code generated by go-swagger; DO NOT EDIT.

package strategies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new strategies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for strategies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateStrategy creates strategy
*/
func (a *Client) CreateStrategy(params *CreateStrategyParams) (*CreateStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStrategyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStrategy",
		Method:             "POST",
		PathPattern:        "/caas/api/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &CreateStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*CreateStrategyOK), nil

}

/*
ListStrategies lists strategies
*/
func (a *Client) ListStrategies(params *ListStrategiesParams) (*ListStrategiesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListStrategiesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "listStrategies",
		Method:             "GET",
		PathPattern:        "/caas/api/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ListStrategiesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ListStrategiesOK), nil

}

/*
UpdateStrategy updates strategy
*/
func (a *Client) UpdateStrategy(params *UpdateStrategyParams) (*UpdateStrategyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStrategyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStrategy",
		Method:             "PUT",
		PathPattern:        "/caas/api/strategies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &UpdateStrategyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*UpdateStrategyOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
