// Code generated by go-swagger; DO NOT EDIT.

package tenants

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hortonworks/cb-cli/dataplane/oauthapi/model"
)

// NewRegisterTenantParams creates a new RegisterTenantParams object
// with the default values initialized.
func NewRegisterTenantParams() *RegisterTenantParams {
	var ()
	return &RegisterTenantParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewRegisterTenantParamsWithTimeout creates a new RegisterTenantParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewRegisterTenantParamsWithTimeout(timeout time.Duration) *RegisterTenantParams {
	var ()
	return &RegisterTenantParams{

		timeout: timeout,
	}
}

// NewRegisterTenantParamsWithContext creates a new RegisterTenantParams object
// with the default values initialized, and the ability to set a context for a request
func NewRegisterTenantParamsWithContext(ctx context.Context) *RegisterTenantParams {
	var ()
	return &RegisterTenantParams{

		Context: ctx,
	}
}

// NewRegisterTenantParamsWithHTTPClient creates a new RegisterTenantParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewRegisterTenantParamsWithHTTPClient(client *http.Client) *RegisterTenantParams {
	var ()
	return &RegisterTenantParams{
		HTTPClient: client,
	}
}

/*RegisterTenantParams contains all the parameters to send to the API endpoint
for the register tenant operation typically these are written to a http.Request
*/
type RegisterTenantParams struct {

	/*Body*/
	Body *model.TenantRegisterRequest
	/*Method
	  method

	*/
	Method string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the register tenant params
func (o *RegisterTenantParams) WithTimeout(timeout time.Duration) *RegisterTenantParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the register tenant params
func (o *RegisterTenantParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the register tenant params
func (o *RegisterTenantParams) WithContext(ctx context.Context) *RegisterTenantParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the register tenant params
func (o *RegisterTenantParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the register tenant params
func (o *RegisterTenantParams) WithHTTPClient(client *http.Client) *RegisterTenantParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the register tenant params
func (o *RegisterTenantParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the register tenant params
func (o *RegisterTenantParams) WithBody(body *model.TenantRegisterRequest) *RegisterTenantParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the register tenant params
func (o *RegisterTenantParams) SetBody(body *model.TenantRegisterRequest) {
	o.Body = body
}

// WithMethod adds the method to the register tenant params
func (o *RegisterTenantParams) WithMethod(method string) *RegisterTenantParams {
	o.SetMethod(method)
	return o
}

// SetMethod adds the method to the register tenant params
func (o *RegisterTenantParams) SetMethod(method string) {
	o.Method = method
}

// WriteToRequest writes these params to a swagger request
func (o *RegisterTenantParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body == nil {
		o.Body = new(model.TenantRegisterRequest)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	// query param method
	qrMethod := o.Method
	qMethod := qrMethod
	if qMethod != "" {
		if err := r.SetQueryParam("method", qMethod); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
