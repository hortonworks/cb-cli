// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hortonworks/cb-cli/dataplane/oauthapi/model"
)

// NewGetAllUsersParams creates a new GetAllUsersParams object
// with the default values initialized.
func NewGetAllUsersParams() *GetAllUsersParams {
	var ()
	return &GetAllUsersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAllUsersParamsWithTimeout creates a new GetAllUsersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAllUsersParamsWithTimeout(timeout time.Duration) *GetAllUsersParams {
	var ()
	return &GetAllUsersParams{

		timeout: timeout,
	}
}

// NewGetAllUsersParamsWithContext creates a new GetAllUsersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAllUsersParamsWithContext(ctx context.Context) *GetAllUsersParams {
	var ()
	return &GetAllUsersParams{

		Context: ctx,
	}
}

// NewGetAllUsersParamsWithHTTPClient creates a new GetAllUsersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAllUsersParamsWithHTTPClient(client *http.Client) *GetAllUsersParams {
	var ()
	return &GetAllUsersParams{
		HTTPClient: client,
	}
}

/*GetAllUsersParams contains all the parameters to send to the API endpoint
for the get all users operation typically these are written to a http.Request
*/
type GetAllUsersParams struct {

	/*Body*/
	Body *model.UserContext
	/*ID
	  ID of user that needs to be fetched

	*/
	ID *string
	/*UserName
	  name of user that needs to be fetched

	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get all users params
func (o *GetAllUsersParams) WithTimeout(timeout time.Duration) *GetAllUsersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get all users params
func (o *GetAllUsersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get all users params
func (o *GetAllUsersParams) WithContext(ctx context.Context) *GetAllUsersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get all users params
func (o *GetAllUsersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get all users params
func (o *GetAllUsersParams) WithHTTPClient(client *http.Client) *GetAllUsersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get all users params
func (o *GetAllUsersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the get all users params
func (o *GetAllUsersParams) WithBody(body *model.UserContext) *GetAllUsersParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the get all users params
func (o *GetAllUsersParams) SetBody(body *model.UserContext) {
	o.Body = body
}

// WithID adds the id to the get all users params
func (o *GetAllUsersParams) WithID(id *string) *GetAllUsersParams {
	o.SetID(id)
	return o
}

// SetID adds the id to the get all users params
func (o *GetAllUsersParams) SetID(id *string) {
	o.ID = id
}

// WithUserName adds the userName to the get all users params
func (o *GetAllUsersParams) WithUserName(userName *string) *GetAllUsersParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the get all users params
func (o *GetAllUsersParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAllUsersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body == nil {
		o.Body = new(model.UserContext)
	}

	if err := r.SetBodyParam(o.Body); err != nil {
		return err
	}

	if o.ID != nil {

		// query param id
		var qrID string
		if o.ID != nil {
			qrID = *o.ID
		}
		qID := qrID
		if qID != "" {
			if err := r.SetQueryParam("id", qID); err != nil {
				return err
			}
		}

	}

	if o.UserName != nil {

		// query param user_name
		var qrUserName string
		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {
			if err := r.SetQueryParam("user_name", qUserName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
