// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/hortonworks/cb-cli/dataplane/oauthapi/model"
)

// NewAssignUsersToRoleParams creates a new AssignUsersToRoleParams object
// with the default values initialized.
func NewAssignUsersToRoleParams() *AssignUsersToRoleParams {
	var ()
	return &AssignUsersToRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAssignUsersToRoleParamsWithTimeout creates a new AssignUsersToRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAssignUsersToRoleParamsWithTimeout(timeout time.Duration) *AssignUsersToRoleParams {
	var ()
	return &AssignUsersToRoleParams{

		timeout: timeout,
	}
}

// NewAssignUsersToRoleParamsWithContext creates a new AssignUsersToRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewAssignUsersToRoleParamsWithContext(ctx context.Context) *AssignUsersToRoleParams {
	var ()
	return &AssignUsersToRoleParams{

		Context: ctx,
	}
}

// NewAssignUsersToRoleParamsWithHTTPClient creates a new AssignUsersToRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAssignUsersToRoleParamsWithHTTPClient(client *http.Client) *AssignUsersToRoleParams {
	var ()
	return &AssignUsersToRoleParams{
		HTTPClient: client,
	}
}

/*AssignUsersToRoleParams contains all the parameters to send to the API endpoint
for the assign users to role operation typically these are written to a http.Request
*/
type AssignUsersToRoleParams struct {

	/*UserIds*/
	UserIds *model.UsersInput
	/*RoleID
	  Role ID

	*/
	RoleID string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the assign users to role params
func (o *AssignUsersToRoleParams) WithTimeout(timeout time.Duration) *AssignUsersToRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the assign users to role params
func (o *AssignUsersToRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the assign users to role params
func (o *AssignUsersToRoleParams) WithContext(ctx context.Context) *AssignUsersToRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the assign users to role params
func (o *AssignUsersToRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the assign users to role params
func (o *AssignUsersToRoleParams) WithHTTPClient(client *http.Client) *AssignUsersToRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the assign users to role params
func (o *AssignUsersToRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithUserIds adds the userIds to the assign users to role params
func (o *AssignUsersToRoleParams) WithUserIds(userIds *model.UsersInput) *AssignUsersToRoleParams {
	o.SetUserIds(userIds)
	return o
}

// SetUserIds adds the userIds to the assign users to role params
func (o *AssignUsersToRoleParams) SetUserIds(userIds *model.UsersInput) {
	o.UserIds = userIds
}

// WithRoleID adds the roleID to the assign users to role params
func (o *AssignUsersToRoleParams) WithRoleID(roleID string) *AssignUsersToRoleParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the assign users to role params
func (o *AssignUsersToRoleParams) SetRoleID(roleID string) {
	o.RoleID = roleID
}

// WriteToRequest writes these params to a swagger request
func (o *AssignUsersToRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.UserIds == nil {
		o.UserIds = new(model.UsersInput)
	}

	if err := r.SetBodyParam(o.UserIds); err != nil {
		return err
	}

	// path param roleId
	if err := r.SetPathParam("roleId", o.RoleID); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
