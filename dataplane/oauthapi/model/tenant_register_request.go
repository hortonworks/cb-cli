// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TenantRegisterRequest tenant register request
// swagger:model TenantRegisterRequest

type TenantRegisterRequest struct {

	// label
	// Required: true
	Label *string `json:"label"`

	// name
	// Required: true
	Name *string `json:"name"`

	// su
	// Required: true
	Su *SuperUser `json:"su"`
}

/* polymorph TenantRegisterRequest label false */

/* polymorph TenantRegisterRequest name false */

/* polymorph TenantRegisterRequest su false */

// Validate validates this tenant register request
func (m *TenantRegisterRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSu(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TenantRegisterRequest) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *TenantRegisterRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *TenantRegisterRequest) validateSu(formats strfmt.Registry) error {

	if err := validate.Required("su", "body", m.Su); err != nil {
		return err
	}

	if m.Su != nil {

		if err := m.Su.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("su")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TenantRegisterRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TenantRegisterRequest) UnmarshalBinary(b []byte) error {
	var res TenantRegisterRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
