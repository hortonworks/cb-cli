// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StrategyType strategy type
// swagger:model StrategyType

type StrategyType struct {

	// config schema
	// Required: true
	ConfigSchema *JSON `json:"config_schema"`

	// display name
	// Required: true
	DisplayName *string `json:"display_name"`

	// id
	ID strfmt.UUID `json:"id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// template
	// Required: true
	Template *JSON `json:"template"`
}

/* polymorph StrategyType config_schema false */

/* polymorph StrategyType display_name false */

/* polymorph StrategyType id false */

/* polymorph StrategyType name false */

/* polymorph StrategyType template false */

// Validate validates this strategy type
func (m *StrategyType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfigSchema(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTemplate(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StrategyType) validateConfigSchema(formats strfmt.Registry) error {

	if err := validate.Required("config_schema", "body", m.ConfigSchema); err != nil {
		return err
	}

	if m.ConfigSchema != nil {

		if err := m.ConfigSchema.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("config_schema")
			}
			return err
		}
	}

	return nil
}

func (m *StrategyType) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	return nil
}

func (m *StrategyType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *StrategyType) validateTemplate(formats strfmt.Registry) error {

	if err := validate.Required("template", "body", m.Template); err != nil {
		return err
	}

	if m.Template != nil {

		if err := m.Template.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("template")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StrategyType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StrategyType) UnmarshalBinary(b []byte) error {
	var res StrategyType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
