// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserInfo user info
// swagger:model UserInfo

type UserInfo struct {

	// display name
	DisplayName string `json:"display_name,omitempty"`

	// email
	Email string `json:"email,omitempty"`

	// family name
	FamilyName string `json:"family_name,omitempty"`

	// id
	ID strfmt.UUID `json:"id,omitempty"`

	// middle name
	MiddleName string `json:"middle_name,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// permissions
	Permissions []string `json:"permissions"`

	// picture
	Picture string `json:"picture,omitempty"`

	// preferred username
	// Required: true
	PreferredUsername *string `json:"preferred_username"`

	// strategy id
	// Required: true
	StrategyID *strfmt.UUID `json:"strategy_id"`

	// tenant id
	// Required: true
	TenantID *strfmt.UUID `json:"tenant_id"`
}

/* polymorph UserInfo display_name false */

/* polymorph UserInfo email false */

/* polymorph UserInfo family_name false */

/* polymorph UserInfo id false */

/* polymorph UserInfo middle_name false */

/* polymorph UserInfo name false */

/* polymorph UserInfo permissions false */

/* polymorph UserInfo picture false */

/* polymorph UserInfo preferred_username false */

/* polymorph UserInfo strategy_id false */

/* polymorph UserInfo tenant_id false */

// Validate validates this user info
func (m *UserInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePermissions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validatePreferredUsername(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateStrategyID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserInfo) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *UserInfo) validatePermissions(formats strfmt.Registry) error {

	if swag.IsZero(m.Permissions) { // not required
		return nil
	}

	return nil
}

func (m *UserInfo) validatePreferredUsername(formats strfmt.Registry) error {

	if err := validate.Required("preferred_username", "body", m.PreferredUsername); err != nil {
		return err
	}

	return nil
}

func (m *UserInfo) validateStrategyID(formats strfmt.Registry) error {

	if err := validate.Required("strategy_id", "body", m.StrategyID); err != nil {
		return err
	}

	if err := validate.FormatOf("strategy_id", "body", "uuid", m.StrategyID.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserInfo) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	if err := validate.FormatOf("tenant_id", "body", "uuid", m.TenantID.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UserInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserInfo) UnmarshalBinary(b []byte) error {
	var res UserInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
