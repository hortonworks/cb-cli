// Code generated by go-swagger; DO NOT EDIT.

package v1imagecatalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1imagecatalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1imagecatalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeletePublicImageCatalogByName deletes public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) DeletePublicImageCatalogByName(params *DeletePublicImageCatalogByNameParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeletePublicImageCatalogByNameParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deletePublicImageCatalogByName",
		Method:             "DELETE",
		PathPattern:        "/v1/imagecatalogs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeletePublicImageCatalogByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetImageCatalogRequestFromName retrieves imagecatalog request by imagecatalog name

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImageCatalogRequestFromName(params *GetImageCatalogRequestFromNameParams) (*GetImageCatalogRequestFromNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImageCatalogRequestFromNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImageCatalogRequestFromName",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/{name}/request",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImageCatalogRequestFromNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImageCatalogRequestFromNameOK), nil

}

/*
GetImagesByProvider determines available images for the cloudbreak version by the given provider and default image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetImagesByProvider(params *GetImagesByProviderParams) (*GetImagesByProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByProviderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByProvider",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByProviderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByProviderOK), nil

}

/*
GetImagesByStackNameAndCustomImageCatalog determines available images for the given stackfrom the given imagecatalog name

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndCustomImageCatalog(params *GetImagesByStackNameAndCustomImageCatalogParams) (*GetImagesByStackNameAndCustomImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndCustomImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndCustomImageCatalog",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/account/upgrade/{stackName}/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndCustomImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndCustomImageCatalogOK), nil

}

/*
GetImagesByStackNameAndDefaultImageCatalog determines available images for the given stackfrom the default image catalog

Provides an interface to determine available Virtual Machine images for the given stack.Please consider running sync beforehand
*/
func (a *Client) GetImagesByStackNameAndDefaultImageCatalog(params *GetImagesByStackNameAndDefaultImageCatalogParams) (*GetImagesByStackNameAndDefaultImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetImagesByStackNameAndDefaultImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getImagesByStackNameAndDefaultImageCatalog",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/account/upgrade/{stackName}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetImagesByStackNameAndDefaultImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetImagesByStackNameAndDefaultImageCatalogOK), nil

}

/*
GetPublicImageCatalogsByName gets custom image catalog by name

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetPublicImageCatalogsByName(params *GetPublicImageCatalogsByNameParams) (*GetPublicImageCatalogsByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicImageCatalogsByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicImageCatalogsByName",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/account/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicImageCatalogsByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicImageCatalogsByNameOK), nil

}

/*
GetPublicImagesByProviderAndCustomImageCatalog determines available images for the cloudbreak version by the given provider and given image catalog url

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetPublicImagesByProviderAndCustomImageCatalog(params *GetPublicImagesByProviderAndCustomImageCatalogParams) (*GetPublicImagesByProviderAndCustomImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicImagesByProviderAndCustomImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicImagesByProviderAndCustomImageCatalog",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/account/{name}/{platform}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicImagesByProviderAndCustomImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicImagesByProviderAndCustomImageCatalogOK), nil

}

/*
GetPublicsImageCatalogs lists available custom image catalogs as public resources

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) GetPublicsImageCatalogs(params *GetPublicsImageCatalogsParams) (*GetPublicsImageCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicsImageCatalogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getPublicsImageCatalogs",
		Method:             "GET",
		PathPattern:        "/v1/imagecatalogs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetPublicsImageCatalogsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetPublicsImageCatalogsOK), nil

}

/*
PostPrivateImageCatalog creates image catalog as private resources

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PostPrivateImageCatalog(params *PostPrivateImageCatalogParams) (*PostPrivateImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPrivateImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPrivateImageCatalog",
		Method:             "POST",
		PathPattern:        "/v1/imagecatalogs/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPrivateImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPrivateImageCatalogOK), nil

}

/*
PostPublicImageCatalog creates image catalog as public resources

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PostPublicImageCatalog(params *PostPublicImageCatalogParams) (*PostPublicImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostPublicImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "postPublicImageCatalog",
		Method:             "POST",
		PathPattern:        "/v1/imagecatalogs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PostPublicImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostPublicImageCatalogOK), nil

}

/*
PutPublicImageCatalog updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutPublicImageCatalog(params *PutPublicImageCatalogParams) (*PutPublicImageCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutPublicImageCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putPublicImageCatalog",
		Method:             "PUT",
		PathPattern:        "/v1/imagecatalogs/account",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutPublicImageCatalogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutPublicImageCatalogOK), nil

}

/*
PutSetDefaultImageCatalogByName updates public owned or private image catalog by id

Provides an interface to determine available Virtual Machine images for the given version of Cloudbreak.
*/
func (a *Client) PutSetDefaultImageCatalogByName(params *PutSetDefaultImageCatalogByNameParams) (*PutSetDefaultImageCatalogByNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutSetDefaultImageCatalogByNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "putSetDefaultImageCatalogByName",
		Method:             "PUT",
		PathPattern:        "/v1/imagecatalogs/setdefault/{name}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &PutSetDefaultImageCatalogByNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutSetDefaultImageCatalogByNameOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
