// Code generated by go-swagger; DO NOT EDIT.

package v1usages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetDeployerUsageParams creates a new GetDeployerUsageParams object
// with the default values initialized.
func NewGetDeployerUsageParams() *GetDeployerUsageParams {
	var ()
	return &GetDeployerUsageParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetDeployerUsageParamsWithTimeout creates a new GetDeployerUsageParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetDeployerUsageParamsWithTimeout(timeout time.Duration) *GetDeployerUsageParams {
	var ()
	return &GetDeployerUsageParams{

		timeout: timeout,
	}
}

// NewGetDeployerUsageParamsWithContext creates a new GetDeployerUsageParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetDeployerUsageParamsWithContext(ctx context.Context) *GetDeployerUsageParams {
	var ()
	return &GetDeployerUsageParams{

		Context: ctx,
	}
}

// NewGetDeployerUsageParamsWithHTTPClient creates a new GetDeployerUsageParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetDeployerUsageParamsWithHTTPClient(client *http.Client) *GetDeployerUsageParams {
	var ()
	return &GetDeployerUsageParams{
		HTTPClient: client,
	}
}

/*GetDeployerUsageParams contains all the parameters to send to the API endpoint
for the get deployer usage operation typically these are written to a http.Request
*/
type GetDeployerUsageParams struct {

	/*Account*/
	Account *string
	/*Cloud*/
	Cloud *string
	/*Filterenddate*/
	Filterenddate *int64
	/*Since*/
	Since *int64
	/*User*/
	User *string
	/*Zone*/
	Zone *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get deployer usage params
func (o *GetDeployerUsageParams) WithTimeout(timeout time.Duration) *GetDeployerUsageParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get deployer usage params
func (o *GetDeployerUsageParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get deployer usage params
func (o *GetDeployerUsageParams) WithContext(ctx context.Context) *GetDeployerUsageParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get deployer usage params
func (o *GetDeployerUsageParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get deployer usage params
func (o *GetDeployerUsageParams) WithHTTPClient(client *http.Client) *GetDeployerUsageParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get deployer usage params
func (o *GetDeployerUsageParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAccount adds the account to the get deployer usage params
func (o *GetDeployerUsageParams) WithAccount(account *string) *GetDeployerUsageParams {
	o.SetAccount(account)
	return o
}

// SetAccount adds the account to the get deployer usage params
func (o *GetDeployerUsageParams) SetAccount(account *string) {
	o.Account = account
}

// WithCloud adds the cloud to the get deployer usage params
func (o *GetDeployerUsageParams) WithCloud(cloud *string) *GetDeployerUsageParams {
	o.SetCloud(cloud)
	return o
}

// SetCloud adds the cloud to the get deployer usage params
func (o *GetDeployerUsageParams) SetCloud(cloud *string) {
	o.Cloud = cloud
}

// WithFilterenddate adds the filterenddate to the get deployer usage params
func (o *GetDeployerUsageParams) WithFilterenddate(filterenddate *int64) *GetDeployerUsageParams {
	o.SetFilterenddate(filterenddate)
	return o
}

// SetFilterenddate adds the filterenddate to the get deployer usage params
func (o *GetDeployerUsageParams) SetFilterenddate(filterenddate *int64) {
	o.Filterenddate = filterenddate
}

// WithSince adds the since to the get deployer usage params
func (o *GetDeployerUsageParams) WithSince(since *int64) *GetDeployerUsageParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get deployer usage params
func (o *GetDeployerUsageParams) SetSince(since *int64) {
	o.Since = since
}

// WithUser adds the user to the get deployer usage params
func (o *GetDeployerUsageParams) WithUser(user *string) *GetDeployerUsageParams {
	o.SetUser(user)
	return o
}

// SetUser adds the user to the get deployer usage params
func (o *GetDeployerUsageParams) SetUser(user *string) {
	o.User = user
}

// WithZone adds the zone to the get deployer usage params
func (o *GetDeployerUsageParams) WithZone(zone *string) *GetDeployerUsageParams {
	o.SetZone(zone)
	return o
}

// SetZone adds the zone to the get deployer usage params
func (o *GetDeployerUsageParams) SetZone(zone *string) {
	o.Zone = zone
}

// WriteToRequest writes these params to a swagger request
func (o *GetDeployerUsageParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Account != nil {

		// query param account
		var qrAccount string
		if o.Account != nil {
			qrAccount = *o.Account
		}
		qAccount := qrAccount
		if qAccount != "" {
			if err := r.SetQueryParam("account", qAccount); err != nil {
				return err
			}
		}

	}

	if o.Cloud != nil {

		// query param cloud
		var qrCloud string
		if o.Cloud != nil {
			qrCloud = *o.Cloud
		}
		qCloud := qrCloud
		if qCloud != "" {
			if err := r.SetQueryParam("cloud", qCloud); err != nil {
				return err
			}
		}

	}

	if o.Filterenddate != nil {

		// query param filterenddate
		var qrFilterenddate int64
		if o.Filterenddate != nil {
			qrFilterenddate = *o.Filterenddate
		}
		qFilterenddate := swag.FormatInt64(qrFilterenddate)
		if qFilterenddate != "" {
			if err := r.SetQueryParam("filterenddate", qFilterenddate); err != nil {
				return err
			}
		}

	}

	if o.Since != nil {

		// query param since
		var qrSince int64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatInt64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.User != nil {

		// query param user
		var qrUser string
		if o.User != nil {
			qrUser = *o.User
		}
		qUser := qrUser
		if qUser != "" {
			if err := r.SetQueryParam("user", qUser); err != nil {
				return err
			}
		}

	}

	if o.Zone != nil {

		// query param zone
		var qrZone string
		if o.Zone != nil {
			qrZone = *o.Zone
		}
		qZone := qrZone
		if qZone != "" {
			if err := r.SetQueryParam("zone", qZone); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
