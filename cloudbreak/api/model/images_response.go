// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ImagesResponse images response
// swagger:model ImagesResponse

type ImagesResponse struct {

	// base images
	BaseImages []*BaseImageResponse `json:"baseImages"`

	// hdf images
	HdfImages []*ImageResponse `json:"hdfImages"`

	// hdp images
	HdpImages []*ImageResponse `json:"hdpImages"`

	// supported versions
	// Unique: true
	SupportedVersions []string `json:"supportedVersions"`
}

/* polymorph ImagesResponse baseImages false */

/* polymorph ImagesResponse hdfImages false */

/* polymorph ImagesResponse hdpImages false */

/* polymorph ImagesResponse supportedVersions false */

// Validate validates this images response
func (m *ImagesResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBaseImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHdfImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateHdpImages(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateSupportedVersions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ImagesResponse) validateBaseImages(formats strfmt.Registry) error {

	if swag.IsZero(m.BaseImages) { // not required
		return nil
	}

	for i := 0; i < len(m.BaseImages); i++ {

		if swag.IsZero(m.BaseImages[i]) { // not required
			continue
		}

		if m.BaseImages[i] != nil {

			if err := m.BaseImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("baseImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImagesResponse) validateHdfImages(formats strfmt.Registry) error {

	if swag.IsZero(m.HdfImages) { // not required
		return nil
	}

	for i := 0; i < len(m.HdfImages); i++ {

		if swag.IsZero(m.HdfImages[i]) { // not required
			continue
		}

		if m.HdfImages[i] != nil {

			if err := m.HdfImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hdfImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImagesResponse) validateHdpImages(formats strfmt.Registry) error {

	if swag.IsZero(m.HdpImages) { // not required
		return nil
	}

	for i := 0; i < len(m.HdpImages); i++ {

		if swag.IsZero(m.HdpImages[i]) { // not required
			continue
		}

		if m.HdpImages[i] != nil {

			if err := m.HdpImages[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("hdpImages" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *ImagesResponse) validateSupportedVersions(formats strfmt.Registry) error {

	if swag.IsZero(m.SupportedVersions) { // not required
		return nil
	}

	if err := validate.UniqueItems("supportedVersions", "body", m.SupportedVersions); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ImagesResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ImagesResponse) UnmarshalBinary(b []byte) error {
	var res ImagesResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
