// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// CertificateResponse certificate response
// swagger:model CertificateResponse

type CertificateResponse struct {

	// client certificate used by the gateway
	ClientCert []strfmt.Base64 `json:"clientCert"`

	// client key used by the gateway
	ClientKey []strfmt.Base64 `json:"clientKey"`

	// server certificate used by the gateway
	ServerCert []strfmt.Base64 `json:"serverCert"`
}

/* polymorph CertificateResponse clientCert false */

/* polymorph CertificateResponse clientKey false */

/* polymorph CertificateResponse serverCert false */

// Validate validates this certificate response
func (m *CertificateResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientCert(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateClientKey(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerCert(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CertificateResponse) validateClientCert(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientCert) { // not required
		return nil
	}

	return nil
}

func (m *CertificateResponse) validateClientKey(formats strfmt.Registry) error {

	if swag.IsZero(m.ClientKey) { // not required
		return nil
	}

	return nil
}

func (m *CertificateResponse) validateServerCert(formats strfmt.Registry) error {

	if swag.IsZero(m.ServerCert) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CertificateResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CertificateResponse) UnmarshalBinary(b []byte) error {
	var res CertificateResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
