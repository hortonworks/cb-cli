// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LdapConfigResponse ldap config response
// swagger:model LdapConfigResponse

type LdapConfigResponse struct {

	// LDAP group for administrators
	AdminGroup string `json:"adminGroup,omitempty"`

	// Self-signed certificate of LDAPS server
	Certificate string `json:"certificate,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// directory type of server LDAP or AD
	DirectoryType string `json:"directoryType,omitempty"`

	// domain in LDAP server (e.g. ad.seq.com).
	Domain string `json:"domain,omitempty"`

	// Environments of the resource
	// Unique: true
	Environments []string `json:"environments"`

	// Group Member Attribute (defaults to member)
	GroupMemberAttribute string `json:"groupMemberAttribute,omitempty"`

	// Group Id Attribute (defaults to cn)
	GroupNameAttribute string `json:"groupNameAttribute,omitempty"`

	// Group Object Class (defaults to groupOfNames)
	GroupObjectClass string `json:"groupObjectClass,omitempty"`

	// template for group search for authorization (e.g. dc=hadoop,dc=apache,dc=org)
	GroupSearchBase string `json:"groupSearchBase,omitempty"`

	// id of the resource
	ID int64 `json:"id,omitempty"`

	// name of the resource
	// Required: true
	Name *string `json:"name"`

	// determines the protocol (LDAP or LDAP over SSL)
	Protocol string `json:"protocol,omitempty"`

	// resource is visible in account
	Public *bool `json:"public,omitempty"`

	// public host or IP address of LDAP server
	// Required: true
	ServerHost *string `json:"serverHost"`

	// port of LDAP server (typically: 389 or 636 for LDAPS)
	// Required: true
	// Maximum: 65535
	// Minimum: 1
	ServerPort *int32 `json:"serverPort"`

	// template for pattern based user search for authentication (e.g. cn={0},dc=hadoop,dc=apache,dc=org)
	// Required: true
	UserDnPattern *string `json:"userDnPattern"`

	// attribute name for simplified search filter (e.g. sAMAccountName in case of AD, UID or cn for LDAP).
	UserNameAttribute string `json:"userNameAttribute,omitempty"`

	// User Object Class (defaults to person)
	UserObjectClass string `json:"userObjectClass,omitempty"`

	// template for user search for authentication (e.g. dc=hadoop,dc=apache,dc=org)
	// Required: true
	UserSearchBase *string `json:"userSearchBase"`
}

/* polymorph LdapConfigResponse adminGroup false */

/* polymorph LdapConfigResponse certificate false */

/* polymorph LdapConfigResponse description false */

/* polymorph LdapConfigResponse directoryType false */

/* polymorph LdapConfigResponse domain false */

/* polymorph LdapConfigResponse environments false */

/* polymorph LdapConfigResponse groupMemberAttribute false */

/* polymorph LdapConfigResponse groupNameAttribute false */

/* polymorph LdapConfigResponse groupObjectClass false */

/* polymorph LdapConfigResponse groupSearchBase false */

/* polymorph LdapConfigResponse id false */

/* polymorph LdapConfigResponse name false */

/* polymorph LdapConfigResponse protocol false */

/* polymorph LdapConfigResponse public false */

/* polymorph LdapConfigResponse serverHost false */

/* polymorph LdapConfigResponse serverPort false */

/* polymorph LdapConfigResponse userDnPattern false */

/* polymorph LdapConfigResponse userNameAttribute false */

/* polymorph LdapConfigResponse userObjectClass false */

/* polymorph LdapConfigResponse userSearchBase false */

// Validate validates this ldap config response
func (m *LdapConfigResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateDirectoryType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateEnvironments(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerHost(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateServerPort(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserDnPattern(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateUserSearchBase(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LdapConfigResponse) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

var ldapConfigResponseTypeDirectoryTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["LDAP","ACTIVE_DIRECTORY"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		ldapConfigResponseTypeDirectoryTypePropEnum = append(ldapConfigResponseTypeDirectoryTypePropEnum, v)
	}
}

const (
	// LdapConfigResponseDirectoryTypeLDAP captures enum value "LDAP"
	LdapConfigResponseDirectoryTypeLDAP string = "LDAP"
	// LdapConfigResponseDirectoryTypeACTIVEDIRECTORY captures enum value "ACTIVE_DIRECTORY"
	LdapConfigResponseDirectoryTypeACTIVEDIRECTORY string = "ACTIVE_DIRECTORY"
)

// prop value enum
func (m *LdapConfigResponse) validateDirectoryTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, ldapConfigResponseTypeDirectoryTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *LdapConfigResponse) validateDirectoryType(formats strfmt.Registry) error {

	if swag.IsZero(m.DirectoryType) { // not required
		return nil
	}

	// value enum
	if err := m.validateDirectoryTypeEnum("directoryType", "body", m.DirectoryType); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateEnvironments(formats strfmt.Registry) error {

	if swag.IsZero(m.Environments) { // not required
		return nil
	}

	if err := validate.UniqueItems("environments", "body", m.Environments); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateServerHost(formats strfmt.Registry) error {

	if err := validate.Required("serverHost", "body", m.ServerHost); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateServerPort(formats strfmt.Registry) error {

	if err := validate.Required("serverPort", "body", m.ServerPort); err != nil {
		return err
	}

	if err := validate.MinimumInt("serverPort", "body", int64(*m.ServerPort), 1, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("serverPort", "body", int64(*m.ServerPort), 65535, false); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateUserDnPattern(formats strfmt.Registry) error {

	if err := validate.Required("userDnPattern", "body", m.UserDnPattern); err != nil {
		return err
	}

	return nil
}

func (m *LdapConfigResponse) validateUserSearchBase(formats strfmt.Registry) error {

	if err := validate.Required("userSearchBase", "body", m.UserSearchBase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LdapConfigResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LdapConfigResponse) UnmarshalBinary(b []byte) error {
	var res LdapConfigResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
