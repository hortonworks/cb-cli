// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BlueprintRequest blueprint request
// swagger:model BlueprintRequest

type BlueprintRequest struct {

	// ambari blueprint JSON, set this or the url field
	AmbariBlueprint string `json:"ambariBlueprint,omitempty"`

	// description of the resource
	// Max Length: 1000
	// Min Length: 0
	Description *string `json:"description,omitempty"`

	// input parameters of the blueprint
	// Unique: true
	Inputs []*BlueprintParameter `json:"inputs"`

	// name of the resource
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[^;\/%]*$
	Name *string `json:"name"`

	// properties to extend the blueprint with
	Properties []map[string]map[string]string `json:"properties"`

	// user defined tags for blueprint
	Tags map[string]interface{} `json:"tags,omitempty"`

	// url source of an ambari blueprint, set this or the ambariBlueprint field
	URL string `json:"url,omitempty"`
}

/* polymorph BlueprintRequest ambariBlueprint false */

/* polymorph BlueprintRequest description false */

/* polymorph BlueprintRequest inputs false */

/* polymorph BlueprintRequest name false */

/* polymorph BlueprintRequest properties false */

/* polymorph BlueprintRequest tags false */

/* polymorph BlueprintRequest url false */

// Validate validates this blueprint request
func (m *BlueprintRequest) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDescription(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BlueprintRequest) validateDescription(formats strfmt.Registry) error {

	if swag.IsZero(m.Description) { // not required
		return nil
	}

	if err := validate.MinLength("description", "body", string(*m.Description), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("description", "body", string(*m.Description), 1000); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintRequest) validateInputs(formats strfmt.Registry) error {

	if swag.IsZero(m.Inputs) { // not required
		return nil
	}

	if err := validate.UniqueItems("inputs", "body", m.Inputs); err != nil {
		return err
	}

	for i := 0; i < len(m.Inputs); i++ {

		if swag.IsZero(m.Inputs[i]) { // not required
			continue
		}

		if m.Inputs[i] != nil {

			if err := m.Inputs[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("inputs" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *BlueprintRequest) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 100); err != nil {
		return err
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `^[^;\/%]*$`); err != nil {
		return err
	}

	return nil
}

func (m *BlueprintRequest) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BlueprintRequest) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BlueprintRequest) UnmarshalBinary(b []byte) error {
	var res BlueprintRequest
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
