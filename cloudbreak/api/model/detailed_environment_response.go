// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// DetailedEnvironmentResponse detailed environment response
// swagger:model DetailedEnvironmentResponse

type DetailedEnvironmentResponse struct {

	// Cloud platform of the environment.
	CloudPlatform string `json:"cloudPlatform,omitempty"`

	// Name of the credential of the environment.
	CredentialName string `json:"credentialName,omitempty"`

	// description of the resource
	Description string `json:"description,omitempty"`

	// id of the resource
	ID int64 `json:"id,omitempty"`

	// Name of the LDAP configurations in the environment.
	// Unique: true
	LdapConfigs []string `json:"ldapConfigs"`

	// Location of the environment.
	Location *LocationResponse `json:"location,omitempty"`

	// name of the resource
	Name string `json:"name,omitempty"`

	// Name of the proxy configurations in the environment.
	// Unique: true
	ProxyConfigs []string `json:"proxyConfigs"`

	// Name of the RDS configurations in the environment.
	// Unique: true
	RdsConfigs []string `json:"rdsConfigs"`

	// Regions of the environment.
	Regions *CompactRegionResponse `json:"regions,omitempty"`

	// Name of the workload clusters created in the environment.
	// Unique: true
	WorkloadClusters []string `json:"workloadClusters"`

	// workspace
	Workspace *WorkspaceResourceResponse `json:"workspace,omitempty"`
}

/* polymorph DetailedEnvironmentResponse cloudPlatform false */

/* polymorph DetailedEnvironmentResponse credentialName false */

/* polymorph DetailedEnvironmentResponse description false */

/* polymorph DetailedEnvironmentResponse id false */

/* polymorph DetailedEnvironmentResponse ldapConfigs false */

/* polymorph DetailedEnvironmentResponse location false */

/* polymorph DetailedEnvironmentResponse name false */

/* polymorph DetailedEnvironmentResponse proxyConfigs false */

/* polymorph DetailedEnvironmentResponse rdsConfigs false */

/* polymorph DetailedEnvironmentResponse regions false */

/* polymorph DetailedEnvironmentResponse workloadClusters false */

/* polymorph DetailedEnvironmentResponse workspace false */

// Validate validates this detailed environment response
func (m *DetailedEnvironmentResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLdapConfigs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateLocation(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProxyConfigs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRdsConfigs(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateRegions(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkloadClusters(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateWorkspace(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *DetailedEnvironmentResponse) validateLdapConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.LdapConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("ldapConfigs", "body", m.LdapConfigs); err != nil {
		return err
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateLocation(formats strfmt.Registry) error {

	if swag.IsZero(m.Location) { // not required
		return nil
	}

	if m.Location != nil {

		if err := m.Location.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("location")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateProxyConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.ProxyConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("proxyConfigs", "body", m.ProxyConfigs); err != nil {
		return err
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateRdsConfigs(formats strfmt.Registry) error {

	if swag.IsZero(m.RdsConfigs) { // not required
		return nil
	}

	if err := validate.UniqueItems("rdsConfigs", "body", m.RdsConfigs); err != nil {
		return err
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateRegions(formats strfmt.Registry) error {

	if swag.IsZero(m.Regions) { // not required
		return nil
	}

	if m.Regions != nil {

		if err := m.Regions.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("regions")
			}
			return err
		}
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateWorkloadClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.WorkloadClusters) { // not required
		return nil
	}

	if err := validate.UniqueItems("workloadClusters", "body", m.WorkloadClusters); err != nil {
		return err
	}

	return nil
}

func (m *DetailedEnvironmentResponse) validateWorkspace(formats strfmt.Registry) error {

	if swag.IsZero(m.Workspace) { // not required
		return nil
	}

	if m.Workspace != nil {

		if err := m.Workspace.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("workspace")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *DetailedEnvironmentResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *DetailedEnvironmentResponse) UnmarshalBinary(b []byte) error {
	var res DetailedEnvironmentResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
