// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// HistoryResponse history response
// swagger:model HistoryResponse
type HistoryResponse struct {

	// Count of scaling
	Adjustment int32 `json:"adjustment,omitempty"`

	// Type of adjustment
	// Enum: [NODE_COUNT PERCENTAGE EXACT]
	AdjustmentType string `json:"adjustmentType,omitempty"`

	// Type of the alert event
	// Enum: [METRIC TIME PROMETHEUS]
	AlertType string `json:"alertType,omitempty"`

	// Id of the cloudbreak stack
	CbStackID int64 `json:"cbStackId,omitempty"`

	// If of the cluster
	ClusterID int64 `json:"clusterId,omitempty"`

	// The affected hostgroup name
	HostGroup string `json:"hostGroup,omitempty"`

	// Id of the history object
	ID int64 `json:"id,omitempty"`

	// The node count before of the scaling
	OriginalNodeCount int32 `json:"originalNodeCount,omitempty"`

	// Additional properties
	Properties map[string]string `json:"properties,omitempty"`

	// Status of scaling activity
	// Enum: [FAILED SUCCESS ENABLED DISABLED]
	ScalingStatus string `json:"scalingStatus,omitempty"`

	// Reason of the status
	StatusReason string `json:"statusReason,omitempty"`

	// Time of the creation
	Timestamp int64 `json:"timestamp,omitempty"`
}

// Validate validates this history response
func (m *HistoryResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAlertType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScalingStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyResponseTypeAdjustmentTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["NODE_COUNT","PERCENTAGE","EXACT"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyResponseTypeAdjustmentTypePropEnum = append(historyResponseTypeAdjustmentTypePropEnum, v)
	}
}

const (

	// HistoryResponseAdjustmentTypeNODECOUNT captures enum value "NODE_COUNT"
	HistoryResponseAdjustmentTypeNODECOUNT string = "NODE_COUNT"

	// HistoryResponseAdjustmentTypePERCENTAGE captures enum value "PERCENTAGE"
	HistoryResponseAdjustmentTypePERCENTAGE string = "PERCENTAGE"

	// HistoryResponseAdjustmentTypeEXACT captures enum value "EXACT"
	HistoryResponseAdjustmentTypeEXACT string = "EXACT"
)

// prop value enum
func (m *HistoryResponse) validateAdjustmentTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyResponseTypeAdjustmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryResponse) validateAdjustmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustmentType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAdjustmentTypeEnum("adjustmentType", "body", m.AdjustmentType); err != nil {
		return err
	}

	return nil
}

var historyResponseTypeAlertTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["METRIC","TIME","PROMETHEUS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyResponseTypeAlertTypePropEnum = append(historyResponseTypeAlertTypePropEnum, v)
	}
}

const (

	// HistoryResponseAlertTypeMETRIC captures enum value "METRIC"
	HistoryResponseAlertTypeMETRIC string = "METRIC"

	// HistoryResponseAlertTypeTIME captures enum value "TIME"
	HistoryResponseAlertTypeTIME string = "TIME"

	// HistoryResponseAlertTypePROMETHEUS captures enum value "PROMETHEUS"
	HistoryResponseAlertTypePROMETHEUS string = "PROMETHEUS"
)

// prop value enum
func (m *HistoryResponse) validateAlertTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyResponseTypeAlertTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryResponse) validateAlertType(formats strfmt.Registry) error {

	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	// value enum
	if err := m.validateAlertTypeEnum("alertType", "body", m.AlertType); err != nil {
		return err
	}

	return nil
}

var historyResponseTypeScalingStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["FAILED","SUCCESS","ENABLED","DISABLED"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		historyResponseTypeScalingStatusPropEnum = append(historyResponseTypeScalingStatusPropEnum, v)
	}
}

const (

	// HistoryResponseScalingStatusFAILED captures enum value "FAILED"
	HistoryResponseScalingStatusFAILED string = "FAILED"

	// HistoryResponseScalingStatusSUCCESS captures enum value "SUCCESS"
	HistoryResponseScalingStatusSUCCESS string = "SUCCESS"

	// HistoryResponseScalingStatusENABLED captures enum value "ENABLED"
	HistoryResponseScalingStatusENABLED string = "ENABLED"

	// HistoryResponseScalingStatusDISABLED captures enum value "DISABLED"
	HistoryResponseScalingStatusDISABLED string = "DISABLED"
)

// prop value enum
func (m *HistoryResponse) validateScalingStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, historyResponseTypeScalingStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *HistoryResponse) validateScalingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ScalingStatus) { // not required
		return nil
	}

	// value enum
	if err := m.validateScalingStatusEnum("scalingStatus", "body", m.ScalingStatus); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *HistoryResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *HistoryResponse) UnmarshalBinary(b []byte) error {
	var res HistoryResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
