// Code generated by go-swagger; DO NOT EDIT.

package model

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ScalingConfiguration scaling configuration
// swagger:model ScalingConfiguration
type ScalingConfiguration struct {

	// The time between two scaling activities
	// Required: true
	// Minimum: 1
	Cooldown *int32 `json:"cooldown"`

	// The maximum size of the cluster after scaling
	// Required: true
	MaxSize *int32 `json:"maxSize"`

	// The minimum size of the cluster after scaling
	// Required: true
	MinSize *int32 `json:"minSize"`
}

// Validate validates this scaling configuration
func (m *ScalingConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCooldown(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxSize(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMinSize(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ScalingConfiguration) validateCooldown(formats strfmt.Registry) error {

	if err := validate.Required("cooldown", "body", m.Cooldown); err != nil {
		return err
	}

	if err := validate.MinimumInt("cooldown", "body", int64(*m.Cooldown), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *ScalingConfiguration) validateMaxSize(formats strfmt.Registry) error {

	if err := validate.Required("maxSize", "body", m.MaxSize); err != nil {
		return err
	}

	return nil
}

func (m *ScalingConfiguration) validateMinSize(formats strfmt.Registry) error {

	if err := validate.Required("minSize", "body", m.MinSize); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ScalingConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ScalingConfiguration) UnmarshalBinary(b []byte) error {
	var res ScalingConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
