// Code generated by go-swagger; DO NOT EDIT.

package v2clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v2clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v2clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteByCloudbreakCluster deletes cluster

Ambari cluster.
*/
func (a *Client) DeleteByCloudbreakCluster(params *DeleteByCloudbreakClusterParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteByCloudbreakClusterParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteByCloudbreakCluster",
		Method:             "DELETE",
		PathPattern:        "/v2/clusters/{cbClusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
DisableAutoscaleStateByCloudbreakCluster sets cluster s autoscale feature state

Ambari cluster.
*/
func (a *Client) DisableAutoscaleStateByCloudbreakCluster(params *DisableAutoscaleStateByCloudbreakClusterParams) (*DisableAutoscaleStateByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDisableAutoscaleStateByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "disableAutoscaleStateByCloudbreakCluster",
		Method:             "POST",
		PathPattern:        "/v2/clusters/{cbClusterId}/disable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DisableAutoscaleStateByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DisableAutoscaleStateByCloudbreakClusterOK), nil

}

/*
EnableAutoscaleStateByCloudbreakCluster sets cluster s autoscale feature state

Ambari cluster.
*/
func (a *Client) EnableAutoscaleStateByCloudbreakCluster(params *EnableAutoscaleStateByCloudbreakClusterParams) (*EnableAutoscaleStateByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEnableAutoscaleStateByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "enableAutoscaleStateByCloudbreakCluster",
		Method:             "POST",
		PathPattern:        "/v2/clusters/{cbClusterId}/enable",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &EnableAutoscaleStateByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*EnableAutoscaleStateByCloudbreakClusterOK), nil

}

/*
GetByCloudbreakCluster retrieves cluster

Ambari cluster.
*/
func (a *Client) GetByCloudbreakCluster(params *GetByCloudbreakClusterParams) (*GetByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getByCloudbreakCluster",
		Method:             "GET",
		PathPattern:        "/v2/clusters/{cbClusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetByCloudbreakClusterOK), nil

}

/*
ModifyByCloudbreakCluster modifies cluster

Ambari cluster.
*/
func (a *Client) ModifyByCloudbreakCluster(params *ModifyByCloudbreakClusterParams) (*ModifyByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyByCloudbreakCluster",
		Method:             "PUT",
		PathPattern:        "/v2/clusters/{cbClusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyByCloudbreakClusterOK), nil

}

/*
RunByCloudbreakCluster sets cluster state

Ambari cluster.
*/
func (a *Client) RunByCloudbreakCluster(params *RunByCloudbreakClusterParams) (*RunByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRunByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "runByCloudbreakCluster",
		Method:             "POST",
		PathPattern:        "/v2/clusters/{cbClusterId}/running",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &RunByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*RunByCloudbreakClusterOK), nil

}

/*
SuspendByCloudbreakCluster sets cluster state

Ambari cluster.
*/
func (a *Client) SuspendByCloudbreakCluster(params *SuspendByCloudbreakClusterParams) (*SuspendByCloudbreakClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSuspendByCloudbreakClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "suspendByCloudbreakCluster",
		Method:             "POST",
		PathPattern:        "/v2/clusters/{cbClusterId}/suspended",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SuspendByCloudbreakClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SuspendByCloudbreakClusterOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
