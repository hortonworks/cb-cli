// Code generated by go-swagger; DO NOT EDIT.

package v1clusters

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new v1clusters API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for v1clusters API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
AddCluster creates cluster

Ambari cluster.
*/
func (a *Client) AddCluster(params *AddClusterParams) (*AddClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAddClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "addCluster",
		Method:             "POST",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &AddClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*AddClusterOK), nil

}

/*
DeleteCluster deletes cluster

Ambari cluster.
*/
func (a *Client) DeleteCluster(params *DeleteClusterParams) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteClusterParams()
	}

	_, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCluster",
		Method:             "DELETE",
		PathPattern:        "/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &DeleteClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return err
	}
	return nil

}

/*
GetCluster retrieves cluster

Ambari cluster.
*/
func (a *Client) GetCluster(params *GetClusterParams) (*GetClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCluster",
		Method:             "GET",
		PathPattern:        "/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClusterOK), nil

}

/*
GetClusters retrieves all cluster

Ambari cluster.
*/
func (a *Client) GetClusters(params *GetClustersParams) (*GetClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetClustersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getClusters",
		Method:             "GET",
		PathPattern:        "/v1/clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &GetClustersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetClustersOK), nil

}

/*
ModifyCluster modifies cluster

Ambari cluster.
*/
func (a *Client) ModifyCluster(params *ModifyClusterParams) (*ModifyClusterOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewModifyClusterParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "modifyCluster",
		Method:             "PUT",
		PathPattern:        "/v1/clusters/{clusterId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &ModifyClusterReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*ModifyClusterOK), nil

}

/*
SetAutoscaleState sets cluster s autoscale feature state

Ambari cluster.
*/
func (a *Client) SetAutoscaleState(params *SetAutoscaleStateParams) (*SetAutoscaleStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetAutoscaleStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setAutoscaleState",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{clusterId}/autoscale",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetAutoscaleStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetAutoscaleStateOK), nil

}

/*
SetState sets cluster state

Ambari cluster.
*/
func (a *Client) SetState(params *SetStateParams) (*SetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSetStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "setState",
		Method:             "POST",
		PathPattern:        "/v1/clusters/{clusterId}/state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http", "https"},
		Params:             params,
		Reader:             &SetStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*SetStateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
