package models_autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*AmbariConnectionDetails ambari connection details

swagger:model AmbariConnectionDetails
*/
type AmbariConnectionDetails struct {

	/* Initial state of the cluster
	 */
	ClusterState *string `json:"clusterState,omitempty"`

	/* Ambari server host address
	 */
	Host *string `json:"host,omitempty"`

	/* Ambari server password
	 */
	Pass *string `json:"pass,omitempty"`

	/* Ambari server port
	 */
	Port *string `json:"port,omitempty"`

	/* Id of the stack in Cloudbreak
	 */
	StackID *int64 `json:"stackId,omitempty"`

	/* Ambari server username
	 */
	User *string `json:"user,omitempty"`
}

// Validate validates this ambari connection details
func (m *AmbariConnectionDetails) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClusterState(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var ambariConnectionDetailsTypeClusterStatePropEnum []interface{}

func (m *AmbariConnectionDetails) validateClusterStateEnum(path, location string, value string) error {
	if ambariConnectionDetailsTypeClusterStatePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["RUNNING","SUSPENDED","PENDING"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			ambariConnectionDetailsTypeClusterStatePropEnum = append(ambariConnectionDetailsTypeClusterStatePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, ambariConnectionDetailsTypeClusterStatePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *AmbariConnectionDetails) validateClusterState(formats strfmt.Registry) error {

	if swag.IsZero(m.ClusterState) { // not required
		return nil
	}

	if err := m.validateClusterStateEnum("clusterState", "body", *m.ClusterState); err != nil {
		return err
	}

	return nil
}
