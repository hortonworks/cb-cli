package models_autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*History history

swagger:model History
*/
type History struct {

	/* Count of scaling
	 */
	Adjustment *int32 `json:"adjustment,omitempty"`

	/* Type of adjustment
	 */
	AdjustmentType *string `json:"adjustmentType,omitempty"`

	/* Type of the alert event
	 */
	AlertType *string `json:"alertType,omitempty"`

	/* Id of the cloudbreak stack
	 */
	CbStackID *int64 `json:"cbStackId,omitempty"`

	/* If of the cluster
	 */
	ClusterID *int64 `json:"clusterId,omitempty"`

	/* The affected hostgroup name
	 */
	HostGroup *string `json:"hostGroup,omitempty"`

	/* Id of the history object
	 */
	ID *int64 `json:"id,omitempty"`

	/* The node count before of the scaling
	 */
	OriginalNodeCount *int32 `json:"originalNodeCount,omitempty"`

	/* Additional properties
	 */
	Properties map[string]string `json:"properties,omitempty"`

	/* Status of scaling activity
	 */
	ScalingStatus *string `json:"scalingStatus,omitempty"`

	/* Reason of the status
	 */
	StatusReason *string `json:"statusReason,omitempty"`

	/* Time of the creation
	 */
	Timestamp *int64 `json:"timestamp,omitempty"`
}

// Validate validates this history
func (m *History) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateAlertType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateProperties(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateScalingStatus(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var historyTypeAdjustmentTypePropEnum []interface{}

func (m *History) validateAdjustmentTypeEnum(path, location string, value string) error {
	if historyTypeAdjustmentTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["NODE_COUNT","PERCENTAGE","EXACT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			historyTypeAdjustmentTypePropEnum = append(historyTypeAdjustmentTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, historyTypeAdjustmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *History) validateAdjustmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustmentType) { // not required
		return nil
	}

	if err := m.validateAdjustmentTypeEnum("adjustmentType", "body", *m.AdjustmentType); err != nil {
		return err
	}

	return nil
}

var historyTypeAlertTypePropEnum []interface{}

func (m *History) validateAlertTypeEnum(path, location string, value string) error {
	if historyTypeAlertTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["METRIC","TIME","PROMETHEUS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			historyTypeAlertTypePropEnum = append(historyTypeAlertTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, historyTypeAlertTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *History) validateAlertType(formats strfmt.Registry) error {

	if swag.IsZero(m.AlertType) { // not required
		return nil
	}

	if err := m.validateAlertTypeEnum("alertType", "body", *m.AlertType); err != nil {
		return err
	}

	return nil
}

func (m *History) validateProperties(formats strfmt.Registry) error {

	if swag.IsZero(m.Properties) { // not required
		return nil
	}

	if err := validate.Required("properties", "body", m.Properties); err != nil {
		return err
	}

	return nil
}

var historyTypeScalingStatusPropEnum []interface{}

func (m *History) validateScalingStatusEnum(path, location string, value string) error {
	if historyTypeScalingStatusPropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["FAILED","SUCCESS"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			historyTypeScalingStatusPropEnum = append(historyTypeScalingStatusPropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, historyTypeScalingStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *History) validateScalingStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.ScalingStatus) { // not required
		return nil
	}

	if err := m.validateScalingStatusEnum("scalingStatus", "body", *m.ScalingStatus); err != nil {
		return err
	}

	return nil
}
