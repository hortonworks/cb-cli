package models_autoscale

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-swagger/go-swagger/strfmt"
	"github.com/go-swagger/go-swagger/swag"

	"github.com/go-swagger/go-swagger/errors"
	"github.com/go-swagger/go-swagger/httpkit/validate"
)

/*ScalingPolicy scaling policy

swagger:model ScalingPolicy
*/
type ScalingPolicy struct {

	/* Type of the scaling count
	 */
	AdjustmentType *string `json:"adjustmentType,omitempty"`

	/* Id of the alert which trigger the scaling
	 */
	AlertID *int64 `json:"alertId,omitempty"`

	/* Name of hostgroup which affected by the scaling
	 */
	HostGroup *string `json:"hostGroup,omitempty"`

	/* Id of the policy
	 */
	ID *int64 `json:"id,omitempty"`

	/* Name of the policy

	Pattern: ([a-zA-Z][-a-zA-Z0-9]*)
	*/
	Name *string `json:"name,omitempty"`

	/* Count of the scaling
	 */
	ScalingAdjustment *int32 `json:"scalingAdjustment,omitempty"`
}

// Validate validates this scaling policy
func (m *ScalingPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdjustmentType(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		// prop
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var scalingPolicyTypeAdjustmentTypePropEnum []interface{}

func (m *ScalingPolicy) validateAdjustmentTypeEnum(path, location string, value string) error {
	if scalingPolicyTypeAdjustmentTypePropEnum == nil {
		var res []string
		if err := json.Unmarshal([]byte(`["NODE_COUNT","PERCENTAGE","EXACT"]`), &res); err != nil {
			return err
		}
		for _, v := range res {
			scalingPolicyTypeAdjustmentTypePropEnum = append(scalingPolicyTypeAdjustmentTypePropEnum, v)
		}
	}
	if err := validate.Enum(path, location, value, scalingPolicyTypeAdjustmentTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *ScalingPolicy) validateAdjustmentType(formats strfmt.Registry) error {

	if swag.IsZero(m.AdjustmentType) { // not required
		return nil
	}

	if err := m.validateAdjustmentTypeEnum("adjustmentType", "body", *m.AdjustmentType); err != nil {
		return err
	}

	return nil
}

func (m *ScalingPolicy) validateName(formats strfmt.Registry) error {

	if swag.IsZero(m.Name) { // not required
		return nil
	}

	if err := validate.Pattern("name", "body", string(*m.Name), `([a-zA-Z][-a-zA-Z0-9]*)`); err != nil {
		return err
	}

	return nil
}
